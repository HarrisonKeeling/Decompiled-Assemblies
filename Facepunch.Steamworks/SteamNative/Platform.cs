using Facepunch.Steamworks;
using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace SteamNative
{
	internal static class Platform
	{
		private static Facepunch.Steamworks.OperatingSystem _os;

		private static Architecture _arch;

		internal static Architecture Arch
		{
			get
			{
				if (Platform._arch == Architecture.Unset)
				{
					if (IntPtr.Size != 8)
					{
						if (IntPtr.Size != 4)
						{
							throw new Exception("Unsupported Architecture!");
						}
						Platform._arch = Architecture.x86;
					}
					else
					{
						Platform._arch = Architecture.x64;
					}
				}
				return Platform._arch;
			}
			set
			{
				Platform._arch = value;
			}
		}

		public static bool IsLinux32
		{
			get
			{
				if (Platform.Arch != Architecture.x86)
				{
					return false;
				}
				return Platform.Os == Facepunch.Steamworks.OperatingSystem.Linux;
			}
		}

		public static bool IsLinux64
		{
			get
			{
				if (Platform.Arch != Architecture.x64)
				{
					return false;
				}
				return Platform.Os == Facepunch.Steamworks.OperatingSystem.Linux;
			}
		}

		public static bool IsOsx
		{
			get
			{
				return Platform.Os == Facepunch.Steamworks.OperatingSystem.macOS;
			}
		}

		public static bool IsWindows
		{
			get
			{
				return Platform.Os == Facepunch.Steamworks.OperatingSystem.Windows;
			}
		}

		public static bool IsWindows32
		{
			get
			{
				if (Platform.Arch == Architecture.x86)
				{
					return Platform.IsWindows;
				}
				return false;
			}
		}

		public static bool IsWindows64
		{
			get
			{
				if (Platform.Arch == Architecture.x64)
				{
					return Platform.IsWindows;
				}
				return false;
			}
		}

		internal static Facepunch.Steamworks.OperatingSystem Os
		{
			get
			{
				if (Platform._os == Facepunch.Steamworks.OperatingSystem.Unset)
				{
					Platform._os = Facepunch.Steamworks.OperatingSystem.Windows;
					Platform._os = Platform.RunningPlatform();
				}
				return Platform._os;
			}
			set
			{
				Platform._os = value;
			}
		}

		public static bool PackSmall
		{
			get
			{
				return Platform.Os != Facepunch.Steamworks.OperatingSystem.Windows;
			}
		}

		public static Facepunch.Steamworks.OperatingSystem RunningPlatform()
		{
			PlatformID platform = Environment.OSVersion.Platform;
			if (platform != PlatformID.Unix)
			{
				if (platform == PlatformID.MacOSX)
				{
					return Facepunch.Steamworks.OperatingSystem.macOS;
				}
				return Facepunch.Steamworks.OperatingSystem.Windows;
			}
			if (Directory.Exists("/Applications") && Directory.Exists("/System") && Directory.Exists("/Users") && Directory.Exists("/Volumes"))
			{
				return Facepunch.Steamworks.OperatingSystem.macOS;
			}
			return Facepunch.Steamworks.OperatingSystem.Linux;
		}

		internal interface Interface : IDisposable
		{
			bool IsValid
			{
				get;
			}

			int ISteamAppList_GetAppBuildId(uint nAppID);

			int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax);

			int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax);

			uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs);

			uint ISteamAppList_GetNumInstalledApps();

			bool ISteamApps_BGetDLCDataByIndex(int iDLC, ref uint pAppID, ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize);

			bool ISteamApps_BIsAppInstalled(uint appID);

			bool ISteamApps_BIsCybercafe();

			bool ISteamApps_BIsDlcInstalled(uint appID);

			bool ISteamApps_BIsLowViolence();

			bool ISteamApps_BIsSubscribed();

			bool ISteamApps_BIsSubscribedApp(uint appID);

			bool ISteamApps_BIsSubscribedFromFreeWeekend();

			bool ISteamApps_BIsVACBanned();

			int ISteamApps_GetAppBuildId();

			uint ISteamApps_GetAppInstallDir(uint appID, StringBuilder pchFolder, uint cchFolderBufferSize);

			CSteamID ISteamApps_GetAppOwner();

			IntPtr ISteamApps_GetAvailableGameLanguages();

			bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize);

			IntPtr ISteamApps_GetCurrentGameLanguage();

			int ISteamApps_GetDLCCount();

			bool ISteamApps_GetDlcDownloadProgress(uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

			uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID);

			SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName);

			uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots);

			IntPtr ISteamApps_GetLaunchQueryParam(string pchKey);

			void ISteamApps_InstallDLC(uint nAppID);

			bool ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly);

			void ISteamApps_RequestAllProofOfPurchaseKeys();

			void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID);

			void ISteamApps_UninstallDLC(uint nAppID);

			bool ISteamClient_BReleaseSteamPipe(int hSteamPipe);

			bool ISteamClient_BShutdownIfAllPipesClosed();

			HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe);

			HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType);

			HSteamPipe ISteamClient_CreateSteamPipe();

			uint ISteamClient_GetIPCCallCount();

			IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamGameServerStats(int hSteamuser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamGenericInterface(int hSteamUser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamParentalSettings(int hSteamuser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion);

			IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion);

			void ISteamClient_ReleaseUser(int hSteamPipe, int hUser);

			void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort);

			void ISteamClient_SetWarningMessageHook(IntPtr pFunction);

			void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle);

			void ISteamController_ActivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle);

			void ISteamController_DeactivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle);

			void ISteamController_DeactivateAllActionSetLayers(ulong controllerHandle);

			ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName);

			int ISteamController_GetActiveActionSetLayers(ulong controllerHandle, IntPtr handlesOut);

			ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ulong controllerHandle, ulong analogActionHandle);

			ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName);

			int ISteamController_GetAnalogActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut);

			int ISteamController_GetConnectedControllers(IntPtr handlesOut);

			ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex);

			ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle);

			ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ulong controllerHandle, ulong digitalActionHandle);

			ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName);

			int ISteamController_GetDigitalActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut);

			int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle);

			IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin);

			SteamInputType ISteamController_GetInputTypeForHandle(ulong controllerHandle);

			ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle);

			IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin);

			bool ISteamController_Init();

			void ISteamController_RunFrame();

			void ISteamController_SetLEDColor(ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

			bool ISteamController_ShowAnalogActionOrigins(ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition);

			bool ISteamController_ShowBindingPanel(ulong controllerHandle);

			bool ISteamController_ShowDigitalActionOrigins(ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition);

			bool ISteamController_Shutdown();

			void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction);

			void ISteamController_TriggerHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);

			void ISteamController_TriggerRepeatedHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

			void ISteamController_TriggerVibration(ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

			void ISteamFriends_ActivateGameOverlay(string pchDialog);

			void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby);

			void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag);

			void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID);

			void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL);

			void ISteamFriends_ClearRichPresence();

			bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat);

			SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(IntPtr psteamIDClans, int cClansToRequest);

			SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex);

			CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser);

			bool ISteamFriends_GetClanActivityCounts(ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

			CSteamID ISteamFriends_GetClanByIndex(int iClan);

			int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan);

			int ISteamFriends_GetClanChatMessage(ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter);

			int ISteamFriends_GetClanCount();

			IntPtr ISteamFriends_GetClanName(ulong steamIDClan);

			CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer);

			int ISteamFriends_GetClanOfficerCount(ulong steamIDClan);

			CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan);

			IntPtr ISteamFriends_GetClanTag(ulong steamIDClan);

			CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend);

			int ISteamFriends_GetCoplayFriendCount();

			SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID);

			CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags);

			AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend);

			int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend);

			int ISteamFriends_GetFriendCount(int iFriendFlags);

			int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource);

			CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend);

			bool ISteamFriends_GetFriendGamePlayed(ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo);

			int ISteamFriends_GetFriendMessage(ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

			IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend);

			IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName);

			PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend);

			FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend);

			IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey);

			IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey);

			int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend);

			int ISteamFriends_GetFriendsGroupCount();

			FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG);

			int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID);

			void ISteamFriends_GetFriendsGroupMembersList(short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount);

			IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID);

			int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend);

			int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend);

			int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend);

			IntPtr ISteamFriends_GetPersonaName();

			PersonaState ISteamFriends_GetPersonaState();

			IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer);

			int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend);

			uint ISteamFriends_GetUserRestrictions();

			bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags);

			bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString);

			bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser);

			bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat);

			bool ISteamFriends_IsClanOfficialGameGroup(ulong steamIDClan);

			bool ISteamFriends_IsClanPublic(ulong steamIDClan);

			SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID);

			bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource);

			SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan);

			bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan);

			bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat);

			bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend);

			SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan);

			void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend);

			bool ISteamFriends_RequestUserInformation(ulong steamIDUser, bool bRequireNameOnly);

			bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText);

			void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, bool bSpeaking);

			bool ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled);

			SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName);

			void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith);

			bool ISteamFriends_SetRichPresence(string pchKey, string pchValue);

			SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan);

			BeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

			bool ISteamGameServer_BLoggedOn();

			bool ISteamGameServer_BSecure();

			bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore);

			void ISteamGameServer_CancelAuthTicket(uint hAuthTicket);

			void ISteamGameServer_ClearAllKeyValues();

			SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer);

			CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection();

			void ISteamGameServer_EnableHeartbeats(bool bActive);

			void ISteamGameServer_EndAuthSession(ulong steamID);

			void ISteamGameServer_ForceHeartbeat();

			HAuthTicket ISteamGameServer_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

			void ISteamGameServer_GetGameplayStats();

			int ISteamGameServer_GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

			uint ISteamGameServer_GetPublicIP();

			SteamAPICall_t ISteamGameServer_GetServerReputation();

			CSteamID ISteamGameServer_GetSteamID();

			bool ISteamGameServer_HandleIncomingPacket(IntPtr pData, int cbData, uint srcIP, ushort srcPort);

			bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString);

			void ISteamGameServer_LogOff();

			void ISteamGameServer_LogOn(string pszToken);

			void ISteamGameServer_LogOnAnonymous();

			bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup);

			bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser);

			void ISteamGameServer_SendUserDisconnect(ulong steamIDUser);

			void ISteamGameServer_SetBotPlayerCount(int cBotplayers);

			void ISteamGameServer_SetDedicatedServer(bool bDedicated);

			void ISteamGameServer_SetGameData(string pchGameData);

			void ISteamGameServer_SetGameDescription(string pszGameDescription);

			void ISteamGameServer_SetGameTags(string pchGameTags);

			void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval);

			void ISteamGameServer_SetKeyValue(string pKey, string pValue);

			void ISteamGameServer_SetMapName(string pszMapName);

			void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax);

			void ISteamGameServer_SetModDir(string pszModDir);

			void ISteamGameServer_SetPasswordProtected(bool bPasswordProtected);

			void ISteamGameServer_SetProduct(string pszProduct);

			void ISteamGameServer_SetRegion(string pszRegion);

			void ISteamGameServer_SetServerName(string pszServerName);

			void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort);

			void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName);

			UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID);

			bool ISteamGameServer_WasRestartRequested();

			bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName);

			bool ISteamGameServerStats_GetUserAchievement(ulong steamIDUser, string pchName, ref bool pbAchieved);

			bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData);

			bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData);

			SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser);

			bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName);

			bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData);

			bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData);

			SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser);

			bool ISteamGameServerStats_UpdateUserAvgRateStat(ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength);

			void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue);

			void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, bool bAllowed);

			void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle);

			SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS);

			void ISteamHTMLSurface_DestructISteamHTMLSurface();

			void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript);

			void ISteamHTMLSurface_Find(uint unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse);

			void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y);

			void ISteamHTMLSurface_GoBack(uint unBrowserHandle);

			void ISteamHTMLSurface_GoForward(uint unBrowserHandle);

			bool ISteamHTMLSurface_Init();

			void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, bool bResult);

			void ISteamHTMLSurface_KeyChar(uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers);

			void ISteamHTMLSurface_KeyDown(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

			void ISteamHTMLSurface_KeyUp(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

			void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData);

			void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton);

			void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton);

			void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y);

			void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton);

			void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta);

			void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle);

			void ISteamHTMLSurface_Reload(uint unBrowserHandle);

			void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle);

			void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle, bool bBackgroundMode);

			void ISteamHTMLSurface_SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, bool bSecure, bool bHTTPOnly);

			void ISteamHTMLSurface_SetDPIScalingFactor(uint unBrowserHandle, float flDPIScaling);

			void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll);

			void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, bool bHasKeyFocus);

			void ISteamHTMLSurface_SetPageScaleFactor(uint unBrowserHandle, float flZoom, int nPointX, int nPointY);

			void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight);

			void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll);

			bool ISteamHTMLSurface_Shutdown();

			void ISteamHTMLSurface_StopFind(uint unBrowserHandle);

			void ISteamHTMLSurface_StopLoad(uint unBrowserHandle);

			void ISteamHTMLSurface_ViewSource(uint unBrowserHandle);

			HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify);

			HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

			bool ISteamHTTP_DeferHTTPRequest(uint hRequest);

			bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut);

			bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, ref bool pbWasTimedOut);

			bool ISteamHTTP_GetHTTPResponseBodyData(uint hRequest, out byte pBodyDataBuffer, uint unBufferSize);

			bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize);

			bool ISteamHTTP_GetHTTPResponseHeaderSize(uint hRequest, string pchHeaderName, out uint unResponseHeaderSize);

			bool ISteamHTTP_GetHTTPResponseHeaderValue(uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize);

			bool ISteamHTTP_GetHTTPStreamingResponseBodyData(uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize);

			bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest);

			bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer);

			bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest);

			bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle);

			bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle);

			bool ISteamHTTP_SetCookie(uint hCookieContainer, string pchHost, string pchUrl, string pchCookie);

			bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds);

			bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue);

			bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer);

			bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(uint hRequest, string pchParamName, string pchParamValue);

			bool ISteamHTTP_SetHTTPRequestHeaderValue(uint hRequest, string pchHeaderName, string pchHeaderValue);

			bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds);

			bool ISteamHTTP_SetHTTPRequestRawPostBody(uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen);

			bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(uint hRequest, bool bRequireVerifiedCertificate);

			bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo);

			bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef);

			bool ISteamInventory_AddPromoItems(ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength);

			bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected);

			bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity);

			bool ISteamInventory_DeserializeResult(ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

			void ISteamInventory_DestroyResult(int resultHandle);

			bool ISteamInventory_ExchangeItems(ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

			bool ISteamInventory_GenerateItems(ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

			bool ISteamInventory_GetAllItems(ref int pResultHandle);

			bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

			bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

			bool ISteamInventory_GetItemDefinitionProperty(int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

			bool ISteamInventory_GetItemPrice(int iDefinition, out ulong pPrice);

			bool ISteamInventory_GetItemsByID(ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs);

			bool ISteamInventory_GetItemsWithPrices(IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength);

			uint ISteamInventory_GetNumItemsWithPrices();

			bool ISteamInventory_GetResultItemProperty(int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

			bool ISteamInventory_GetResultItems(int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize);

			Result ISteamInventory_GetResultStatus(int resultHandle);

			uint ISteamInventory_GetResultTimestamp(int resultHandle);

			bool ISteamInventory_GrantPromoItems(ref int pResultHandle);

			bool ISteamInventory_LoadItemDefinitions();

			bool ISteamInventory_RemoveProperty(ulong handle, ulong nItemID, string pchPropertyName);

			SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID);

			SteamAPICall_t ISteamInventory_RequestPrices();

			void ISteamInventory_SendItemDropHeartbeat();

			bool ISteamInventory_SerializeResult(int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize);

			bool ISteamInventory_SetProperty(ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue);

			bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, bool bValue);

			bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, long nValue);

			bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, float flValue);

			SteamAPICall_t ISteamInventory_StartPurchase(int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

			SteamInventoryUpdateHandle_t ISteamInventory_StartUpdateProperties();

			bool ISteamInventory_SubmitUpdateProperties(ulong handle, ref int pResultHandle);

			bool ISteamInventory_TradeItems(ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength);

			bool ISteamInventory_TransferItemQuantity(ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest);

			bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition);

			int ISteamMatchmaking_AddFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

			void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby);

			void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter);

			void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable);

			void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo);

			void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);

			void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults);

			void ISteamMatchmaking_AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);

			SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers);

			bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey);

			bool ISteamMatchmaking_GetFavoriteGame(int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

			int ISteamMatchmaking_GetFavoriteGameCount();

			CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby);

			int ISteamMatchmaking_GetLobbyChatEntry(ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

			IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey);

			bool ISteamMatchmaking_GetLobbyDataByIndex(ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize);

			int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby);

			bool ISteamMatchmaking_GetLobbyGameServer(ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer);

			CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember);

			IntPtr ISteamMatchmaking_GetLobbyMemberData(ulong steamIDLobby, ulong steamIDUser, string pchKey);

			int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby);

			CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby);

			int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby);

			bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee);

			SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby);

			void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby);

			bool ISteamMatchmaking_RemoveFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

			bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby);

			SteamAPICall_t ISteamMatchmaking_RequestLobbyList();

			bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

			bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent);

			bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue);

			void ISteamMatchmaking_SetLobbyGameServer(ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer);

			bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, bool bLobbyJoinable);

			void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue);

			bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers);

			bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner);

			bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType);

			void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest);

			void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery);

			int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest);

			IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer);

			bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest);

			HServerQuery ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

			HServerQuery ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

			void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest);

			void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer);

			void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest);

			HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

			HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

			HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

			HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

			HServerListRequest ISteamMatchmakingServers_RequestLANServerList(uint iApp, IntPtr pRequestServersResponse);

			HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

			HServerQuery ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

			bool ISteamMusic_BIsEnabled();

			bool ISteamMusic_BIsPlaying();

			AudioPlayback_Status ISteamMusic_GetPlaybackStatus();

			float ISteamMusic_GetVolume();

			void ISteamMusic_Pause();

			void ISteamMusic_Play();

			void ISteamMusic_PlayNext();

			void ISteamMusic_PlayPrevious();

			void ISteamMusic_SetVolume(float flVolume);

			bool ISteamMusicRemote_BActivationSuccess(bool bValue);

			bool ISteamMusicRemote_BIsCurrentMusicRemote();

			bool ISteamMusicRemote_CurrentEntryDidChange();

			bool ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable);

			bool ISteamMusicRemote_CurrentEntryWillChange();

			bool ISteamMusicRemote_DeregisterSteamMusicRemote();

			bool ISteamMusicRemote_EnableLooped(bool bValue);

			bool ISteamMusicRemote_EnablePlaylists(bool bValue);

			bool ISteamMusicRemote_EnablePlayNext(bool bValue);

			bool ISteamMusicRemote_EnablePlayPrevious(bool bValue);

			bool ISteamMusicRemote_EnableQueue(bool bValue);

			bool ISteamMusicRemote_EnableShuffled(bool bValue);

			bool ISteamMusicRemote_PlaylistDidChange();

			bool ISteamMusicRemote_PlaylistWillChange();

			bool ISteamMusicRemote_QueueDidChange();

			bool ISteamMusicRemote_QueueWillChange();

			bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName);

			bool ISteamMusicRemote_ResetPlaylistEntries();

			bool ISteamMusicRemote_ResetQueueEntries();

			bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID);

			bool ISteamMusicRemote_SetCurrentQueueEntry(int nID);

			bool ISteamMusicRemote_SetDisplayName(string pchDisplayName);

			bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText);

			bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength);

			bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText);

			bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength);

			bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue);

			bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText);

			bool ISteamMusicRemote_UpdateLooped(bool bValue);

			bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus);

			bool ISteamMusicRemote_UpdateShuffled(bool bValue);

			bool ISteamMusicRemote_UpdateVolume(float flValue);

			bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote);

			bool ISteamNetworking_AllowP2PPacketRelay(bool bAllow);

			bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel);

			bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote);

			SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

			SNetListenSocket_t ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

			SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

			bool ISteamNetworking_DestroyListenSocket(uint hSocket, bool bNotifyRemoteEnd);

			bool ISteamNetworking_DestroySocket(uint hSocket, bool bNotifyRemoteEnd);

			bool ISteamNetworking_GetListenSocketInfo(uint hListenSocket, out uint pnIP, out ushort pnPort);

			int ISteamNetworking_GetMaxPacketSize(uint hSocket);

			bool ISteamNetworking_GetP2PSessionState(ulong steamIDRemote, ref P2PSessionState_t pConnectionState);

			SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket);

			bool ISteamNetworking_GetSocketInfo(uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

			bool ISteamNetworking_IsDataAvailable(uint hListenSocket, out uint pcubMsgSize, ref uint phSocket);

			bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize);

			bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

			bool ISteamNetworking_ReadP2PPacket(IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel);

			bool ISteamNetworking_RetrieveData(uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket);

			bool ISteamNetworking_RetrieveDataFromSocket(uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

			bool ISteamNetworking_SendDataOnSocket(uint hSocket, IntPtr pubData, uint cubData, bool bReliable);

			bool ISteamNetworking_SendP2PPacket(ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel);

			bool ISteamParentalSettings_BIsAppBlocked(uint nAppID);

			bool ISteamParentalSettings_BIsAppInBlockList(uint nAppID);

			bool ISteamParentalSettings_BIsFeatureBlocked(ParentalFeature eFeature);

			bool ISteamParentalSettings_BIsFeatureInBlockList(ParentalFeature eFeature);

			bool ISteamParentalSettings_BIsParentalLockEnabled();

			bool ISteamParentalSettings_BIsParentalLockLocked();

			SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle);

			PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ulong unPublishedFileId);

			SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId);

			SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(WorkshopFileAction eAction, uint unStartIndex);

			SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags);

			SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex);

			SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags);

			SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex);

			bool ISteamRemoteStorage_FileDelete(string pchFile);

			bool ISteamRemoteStorage_FileExists(string pchFile);

			bool ISteamRemoteStorage_FileForget(string pchFile);

			bool ISteamRemoteStorage_FilePersisted(string pchFile);

			int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead);

			SteamAPICall_t ISteamRemoteStorage_FileReadAsync(string pchFile, uint nOffset, uint cubToRead);

			bool ISteamRemoteStorage_FileReadAsyncComplete(ulong hReadCall, IntPtr pvBuffer, uint cubToRead);

			SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile);

			bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData);

			SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(string pchFile, IntPtr pvData, uint cubData);

			bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle);

			bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle);

			UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile);

			bool ISteamRemoteStorage_FileWriteStreamWriteChunk(ulong writeHandle, IntPtr pvData, int cubData);

			int ISteamRemoteStorage_GetCachedUGCCount();

			UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent);

			int ISteamRemoteStorage_GetFileCount();

			IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes);

			int ISteamRemoteStorage_GetFileSize(string pchFile);

			long ISteamRemoteStorage_GetFileTimestamp(string pchFile);

			SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(ulong unPublishedFileId, uint unMaxSecondsOld);

			SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId);

			bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes);

			RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile);

			bool ISteamRemoteStorage_GetUGCDetails(ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner);

			bool ISteamRemoteStorage_GetUGCDownloadProgress(ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected);

			SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId);

			bool ISteamRemoteStorage_IsCloudEnabledForAccount();

			bool ISteamRemoteStorage_IsCloudEnabledForApp();

			SteamAPICall_t ISteamRemoteStorage_PublishVideo(WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags);

			SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType);

			void ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled);

			bool ISteamRemoteStorage_SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);

			SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(ulong unPublishedFileId, WorkshopFileAction eAction);

			SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId);

			SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority);

			SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(ulong hContent, string pchLocation, uint unPriority);

			int ISteamRemoteStorage_UGCRead(ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction);

			SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId);

			bool ISteamRemoteStorage_UpdatePublishedFileDescription(ulong updateHandle, string pchDescription);

			bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile);

			bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ulong updateHandle, string pchPreviewFile);

			bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ulong updateHandle, string pchChangeDescription);

			bool ISteamRemoteStorage_UpdatePublishedFileTags(ulong updateHandle, ref SteamParamStringArray_t pTags);

			bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle);

			bool ISteamRemoteStorage_UpdatePublishedFileVisibility(ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility);

			SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(ulong unPublishedFileId, bool bVoteUp);

			ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);

			ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename);

			void ISteamScreenshots_HookScreenshots(bool bHook);

			bool ISteamScreenshots_IsScreenshotsHooked();

			bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation);

			bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID);

			bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID);

			void ISteamScreenshots_TriggerScreenshot();

			ScreenshotHandle ISteamScreenshots_WriteScreenshot(IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight);

			SteamAPICall_t ISteamUGC_AddAppDependency(ulong nPublishedFileID, uint nAppID);

			SteamAPICall_t ISteamUGC_AddDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID);

			bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName);

			bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue);

			bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type);

			bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID);

			SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID);

			bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue);

			bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName);

			bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder);

			SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType);

			UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

			UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

			UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

			SteamAPICall_t ISteamUGC_DeleteItem(ulong nPublishedFileID);

			bool ISteamUGC_DownloadItem(ulong nPublishedFileID, bool bHighPriority);

			SteamAPICall_t ISteamUGC_GetAppDependencies(ulong nPublishedFileID);

			bool ISteamUGC_GetItemDownloadInfo(ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

			bool ISteamUGC_GetItemInstallInfo(ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp);

			uint ISteamUGC_GetItemState(ulong nPublishedFileID);

			ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal);

			uint ISteamUGC_GetNumSubscribedItems();

			bool ISteamUGC_GetQueryUGCAdditionalPreview(ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType);

			bool ISteamUGC_GetQueryUGCChildren(ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries);

			bool ISteamUGC_GetQueryUGCKeyValueTag(ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize);

			bool ISteamUGC_GetQueryUGCMetadata(ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize);

			uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index);

			uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index);

			bool ISteamUGC_GetQueryUGCPreviewURL(ulong handle, uint index, StringBuilder pchURL, uint cchURLSize);

			bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails);

			bool ISteamUGC_GetQueryUGCStatistic(ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue);

			uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries);

			SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID);

			bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle);

			SteamAPICall_t ISteamUGC_RemoveAppDependency(ulong nPublishedFileID, uint nAppID);

			SteamAPICall_t ISteamUGC_RemoveDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID);

			SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID);

			bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey);

			bool ISteamUGC_RemoveItemPreview(ulong handle, uint index);

			SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds);

			SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle);

			bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds);

			bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName);

			bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder);

			bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription);

			bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData);

			bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile);

			bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags);

			bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle);

			bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage);

			bool ISteamUGC_SetItemVisibility(ulong handle, RemoteStoragePublishedFileVisibility eVisibility);

			bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage);

			bool ISteamUGC_SetMatchAnyTag(ulong handle, bool bMatchAnyTag);

			bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays);

			bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle, bool bReturnAdditionalPreviews);

			bool ISteamUGC_SetReturnChildren(ulong handle, bool bReturnChildren);

			bool ISteamUGC_SetReturnKeyValueTags(ulong handle, bool bReturnKeyValueTags);

			bool ISteamUGC_SetReturnLongDescription(ulong handle, bool bReturnLongDescription);

			bool ISteamUGC_SetReturnMetadata(ulong handle, bool bReturnMetadata);

			bool ISteamUGC_SetReturnOnlyIDs(ulong handle, bool bReturnOnlyIDs);

			bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays);

			bool ISteamUGC_SetReturnTotalOnly(ulong handle, bool bReturnTotalOnly);

			bool ISteamUGC_SetSearchText(ulong handle, string pSearchText);

			SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, bool bVoteUp);

			UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID);

			SteamAPICall_t ISteamUGC_StartPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

			SteamAPICall_t ISteamUGC_StopPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

			SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems();

			SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote);

			SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID);

			void ISteamUGC_SuspendDownloads(bool bSuspend);

			SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID);

			bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile);

			bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID);

			void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

			BeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

			bool ISteamUser_BIsBehindNAT();

			bool ISteamUser_BIsPhoneIdentifying();

			bool ISteamUser_BIsPhoneRequiringVerification();

			bool ISteamUser_BIsPhoneVerified();

			bool ISteamUser_BIsTwoFactorEnabled();

			bool ISteamUser_BLoggedOn();

			void ISteamUser_CancelAuthTicket(uint hAuthTicket);

			VoiceResult ISteamUser_DecompressVoice(IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

			void ISteamUser_EndAuthSession(ulong steamID);

			HAuthTicket ISteamUser_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

			VoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

			bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

			int ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil);

			HSteamUser ISteamUser_GetHSteamUser();

			int ISteamUser_GetPlayerSteamLevel();

			CSteamID ISteamUser_GetSteamID();

			bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer);

			VoiceResult ISteamUser_GetVoice(bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

			uint ISteamUser_GetVoiceOptimalSampleRate();

			int ISteamUser_InitiateGameConnection(IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure);

			SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude);

			SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL);

			void ISteamUser_StartVoiceRecording();

			void ISteamUser_StopVoiceRecording();

			void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer);

			void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo);

			UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID);

			SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC);

			bool ISteamUserStats_ClearAchievement(string pchName);

			SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

			SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers);

			SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName);

			SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType);

			bool ISteamUserStats_GetAchievement(string pchName, ref bool pbAchieved);

			bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent);

			bool ISteamUserStats_GetAchievementAndUnlockTime(string pchName, ref bool pbAchieved, out uint punUnlockTime);

			IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey);

			int ISteamUserStats_GetAchievementIcon(string pchName);

			IntPtr ISteamUserStats_GetAchievementName(uint iAchievement);

			bool ISteamUserStats_GetDownloadedLeaderboardEntry(ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax);

			bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData);

			bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData);

			int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData);

			int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData);

			LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard);

			int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard);

			IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard);

			LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard);

			int ISteamUserStats_GetMostAchievedAchievementInfo(StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved);

			int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved);

			uint ISteamUserStats_GetNumAchievements();

			SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers();

			bool ISteamUserStats_GetStat(string pchName, out int pData);

			bool ISteamUserStats_GetStat0(string pchName, out float pData);

			bool ISteamUserStats_GetUserAchievement(ulong steamIDUser, string pchName, ref bool pbAchieved);

			bool ISteamUserStats_GetUserAchievementAndUnlockTime(ulong steamIDUser, string pchName, ref bool pbAchieved, out uint punUnlockTime);

			bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData);

			bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData);

			bool ISteamUserStats_IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress);

			bool ISteamUserStats_RequestCurrentStats();

			SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages();

			SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays);

			SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser);

			bool ISteamUserStats_ResetAllStats(bool bAchievementsToo);

			bool ISteamUserStats_SetAchievement(string pchName);

			bool ISteamUserStats_SetStat(string pchName, int nData);

			bool ISteamUserStats_SetStat0(string pchName, float fData);

			bool ISteamUserStats_StoreStats();

			bool ISteamUserStats_UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength);

			SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount);

			bool ISteamUtils_BOverlayNeedsPresent();

			SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName);

			SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall);

			bool ISteamUtils_GetAPICallResult(ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, ref bool pbFailed);

			uint ISteamUtils_GetAppID();

			Universe ISteamUtils_GetConnectedUniverse();

			bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

			byte ISteamUtils_GetCurrentBatteryPower();

			bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText);

			uint ISteamUtils_GetEnteredGamepadTextLength();

			bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize);

			bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

			uint ISteamUtils_GetIPCCallCount();

			IntPtr ISteamUtils_GetIPCountry();

			uint ISteamUtils_GetSecondsSinceAppActive();

			uint ISteamUtils_GetSecondsSinceComputerActive();

			uint ISteamUtils_GetServerRealTime();

			IntPtr ISteamUtils_GetSteamUILanguage();

			bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, ref bool pbFailed);

			bool ISteamUtils_IsOverlayEnabled();

			bool ISteamUtils_IsSteamInBigPictureMode();

			bool ISteamUtils_IsSteamRunningInVR();

			bool ISteamUtils_IsVRHeadsetStreamingEnabled();

			void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);

			void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition);

			void ISteamUtils_SetVRHeadsetStreamingEnabled(bool bEnabled);

			void ISteamUtils_SetWarningMessageHook(IntPtr pFunction);

			bool ISteamUtils_ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

			void ISteamUtils_StartVRDashboard();

			void ISteamVideo_GetOPFSettings(uint unVideoAppID);

			bool ISteamVideo_GetOPFStringForApp(uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize);

			void ISteamVideo_GetVideoURL(uint unVideoAppID);

			bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers);

			HSteamPipe SteamApi_SteamAPI_GetHSteamPipe();

			HSteamUser SteamApi_SteamAPI_GetHSteamUser();

			bool SteamApi_SteamAPI_Init();

			void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

			void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

			bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID);

			void SteamApi_SteamAPI_RunCallbacks();

			void SteamApi_SteamAPI_Shutdown();

			void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback);

			void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

			HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe();

			HSteamUser SteamApi_SteamGameServer_GetHSteamUser();

			void SteamApi_SteamGameServer_RunCallbacks();

			void SteamApi_SteamGameServer_Shutdown();

			IntPtr SteamApi_SteamInternal_CreateInterface(string version);

			bool SteamApi_SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString);
		}

		internal class Linux32 : Platform.Interface, IDisposable
		{
			internal IntPtr _ptr;

			public bool IsValid
			{
				get
				{
					return this._ptr != IntPtr.Zero;
				}
			}

			internal Linux32(IntPtr pointer)
			{
				this._ptr = pointer;
			}

			public virtual void Dispose()
			{
				this._ptr = IntPtr.Zero;
			}

			public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID);
			}

			public virtual int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
			}

			public virtual int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
			}

			public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
			}

			public virtual uint ISteamAppList_GetNumInstalledApps()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr);
			}

			public virtual bool ISteamApps_BGetDLCDataByIndex(int iDLC, ref uint pAppID, ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
			}

			public virtual bool ISteamApps_BIsAppInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsCybercafe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr);
			}

			public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsLowViolence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr);
			}

			public virtual bool ISteamApps_BIsSubscribed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr);
			}

			public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr);
			}

			public virtual bool ISteamApps_BIsVACBanned()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr);
			}

			public virtual int ISteamApps_GetAppBuildId()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr);
			}

			public virtual uint ISteamApps_GetAppInstallDir(uint appID, StringBuilder pchFolder, uint cchFolderBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
			}

			public virtual CSteamID ISteamApps_GetAppOwner()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr);
			}

			public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr);
			}

			public virtual bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
			}

			public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr);
			}

			public virtual int ISteamApps_GetDLCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr);
			}

			public virtual bool ISteamApps_GetDlcDownloadProgress(uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal);
			}

			public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID);
			}

			public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName);
			}

			public virtual uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
			}

			public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey);
			}

			public virtual void ISteamApps_InstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
			}

			public virtual bool ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly);
			}

			public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
			}

			public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
			}

			public virtual void ISteamApps_UninstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
			}

			public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe);
			}

			public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr);
			}

			public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe);
			}

			public virtual HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType);
			}

			public virtual HSteamPipe ISteamClient_CreateSteamPipe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr);
			}

			public virtual uint ISteamClient_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr);
			}

			public virtual IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGameServerStats(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGenericInterface(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamParentalSettings(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamParentalSettings(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
			}

			public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
			}

			public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
			}

			public virtual void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
			}

			public virtual void ISteamController_ActivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_ActivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			public virtual void ISteamController_DeactivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_DeactivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			public virtual void ISteamController_DeactivateAllActionSetLayers(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_DeactivateAllActionSetLayers(this._ptr, controllerHandle);
			}

			public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName);
			}

			public virtual int ISteamController_GetActiveActionSetLayers(ulong controllerHandle, IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetActiveActionSetLayers(this._ptr, controllerHandle, handlesOut);
			}

			public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ulong controllerHandle, ulong analogActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
			}

			public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName);
			}

			public virtual int ISteamController_GetAnalogActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
			}

			public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut);
			}

			public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex);
			}

			public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle);
			}

			public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ulong controllerHandle, ulong digitalActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
			}

			public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName);
			}

			public virtual int ISteamController_GetDigitalActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
			}

			public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle);
			}

			public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin);
			}

			public virtual SteamInputType ISteamController_GetInputTypeForHandle(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetInputTypeForHandle(this._ptr, controllerHandle);
			}

			public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle);
			}

			public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin);
			}

			public virtual bool ISteamController_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_Init(this._ptr);
			}

			public virtual void ISteamController_RunFrame()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
			}

			public virtual void ISteamController_SetLEDColor(ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
			}

			public virtual bool ISteamController_ShowAnalogActionOrigins(ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
			}

			public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle);
			}

			public virtual bool ISteamController_ShowDigitalActionOrigins(ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
			}

			public virtual bool ISteamController_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_Shutdown(this._ptr);
			}

			public virtual void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
			}

			public virtual void ISteamController_TriggerHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
			}

			public virtual void ISteamController_TriggerRepeatedHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
			}

			public virtual void ISteamController_TriggerVibration(ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
			}

			public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
			}

			public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
			}

			public virtual void ISteamFriends_ClearRichPresence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
			}

			public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(IntPtr psteamIDClans, int cClansToRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
			}

			public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex);
			}

			public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
			}

			public virtual bool ISteamFriends_GetClanActivityCounts(ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting);
			}

			public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan);
			}

			public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan);
			}

			public virtual int ISteamFriends_GetClanChatMessage(ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
			}

			public virtual int ISteamFriends_GetClanCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr);
			}

			public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
			}

			public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan);
			}

			public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend);
			}

			public virtual int ISteamFriends_GetCoplayFriendCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr);
			}

			public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID);
			}

			public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
			}

			public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags);
			}

			public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource);
			}

			public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
			}

			public virtual bool ISteamFriends_GetFriendGamePlayed(ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				FriendGameInfo_t.PackSmall packSmall = new FriendGameInfo_t.PackSmall();
				bool flag = Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref packSmall);
				pFriendGameInfo = packSmall;
				return flag;
			}

			public virtual int ISteamFriends_GetFriendMessage(ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
			}

			public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
			}

			public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend);
			}

			public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
			}

			public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
			}

			public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendsGroupCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr);
			}

			public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG);
			}

			public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID);
			}

			public virtual void ISteamFriends_GetFriendsGroupMembersList(short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
			}

			public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID);
			}

			public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetPersonaName()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr);
			}

			public virtual PersonaState ISteamFriends_GetPersonaState()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr);
			}

			public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer);
			}

			public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual uint ISteamFriends_GetUserRestrictions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr);
			}

			public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
			}

			public virtual bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
			}

			public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
			}

			public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat);
			}

			public virtual bool ISteamFriends_IsClanOfficialGameGroup(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_IsClanOfficialGameGroup(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_IsClanPublic(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_IsClanPublic(this._ptr, steamIDClan);
			}

			public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID);
			}

			public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
			}

			public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			public virtual bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
			}

			public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan);
			}

			public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
			}

			public virtual bool ISteamFriends_RequestUserInformation(ulong steamIDUser, bool bRequireNameOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
			}

			public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
			}

			public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, bool bSpeaking)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
			}

			public virtual bool ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled);
			}

			public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName);
			}

			public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
			}

			public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
			}

			public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan);
			}

			public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			public virtual bool ISteamGameServer_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr);
			}

			public virtual bool ISteamGameServer_BSecure()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr);
			}

			public virtual bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
			}

			public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			public virtual void ISteamGameServer_ClearAllKeyValues()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
			}

			public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer);
			}

			public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr);
			}

			public virtual void ISteamGameServer_EnableHeartbeats(bool bActive)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
			}

			public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
			}

			public virtual void ISteamGameServer_ForceHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
			}

			public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual void ISteamGameServer_GetGameplayStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
			}

			public virtual int ISteamGameServer_GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
			}

			public virtual uint ISteamGameServer_GetPublicIP()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr);
			}

			public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr);
			}

			public virtual CSteamID ISteamGameServer_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr);
			}

			public virtual bool ISteamGameServer_HandleIncomingPacket(IntPtr pData, int cbData, uint srcIP, ushort srcPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
			}

			public virtual bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
			}

			public virtual void ISteamGameServer_LogOff()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
			}

			public virtual void ISteamGameServer_LogOn(string pszToken)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
			}

			public virtual void ISteamGameServer_LogOnAnonymous()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
			}

			public virtual bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
			}

			public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
			}

			public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
			}

			public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
			}

			public virtual void ISteamGameServer_SetDedicatedServer(bool bDedicated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
			}

			public virtual void ISteamGameServer_SetGameData(string pchGameData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
			}

			public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
			}

			public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
			}

			public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
			}

			public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
			}

			public virtual void ISteamGameServer_SetMapName(string pszMapName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
			}

			public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
			}

			public virtual void ISteamGameServer_SetModDir(string pszModDir)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
			}

			public virtual void ISteamGameServer_SetPasswordProtected(bool bPasswordProtected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
			}

			public virtual void ISteamGameServer_SetProduct(string pszProduct)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
			}

			public virtual void ISteamGameServer_SetRegion(string pszRegion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
			}

			public virtual void ISteamGameServer_SetServerName(string pszServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
			}

			public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
			}

			public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
			}

			public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			public virtual bool ISteamGameServer_WasRestartRequested()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr);
			}

			public virtual bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
			}

			public virtual bool ISteamGameServerStats_GetUserAchievement(ulong steamIDUser, string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			public virtual bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
			}

			public virtual bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
			}

			public virtual bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
			}

			public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
			}

			public virtual void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
			}

			public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, bool bAllowed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
			}

			public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
			}

			public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
			}

			public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
			}

			public virtual void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
			}

			public virtual void ISteamHTMLSurface_Find(uint unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
			}

			public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
			}

			public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
			}

			public virtual bool ISteamHTMLSurface_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr);
			}

			public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, bool bResult)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
			}

			public virtual void ISteamHTMLSurface_KeyChar(uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_KeyDown(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_KeyUp(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
			}

			public virtual void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
			}

			public virtual void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
			}

			public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle, bool bBackgroundMode)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
			}

			public virtual void ISteamHTMLSurface_SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, bool bSecure, bool bHTTPOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
			}

			public virtual void ISteamHTMLSurface_SetDPIScalingFactor(uint unBrowserHandle, float flDPIScaling)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(this._ptr, unBrowserHandle, flDPIScaling);
			}

			public virtual void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, bool bHasKeyFocus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
			}

			public virtual void ISteamHTMLSurface_SetPageScaleFactor(uint unBrowserHandle, float flZoom, int nPointX, int nPointY)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
			}

			public virtual void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
			}

			public virtual void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			public virtual bool ISteamHTMLSurface_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr);
			}

			public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
			}

			public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify);
			}

			public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
			}

			public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut);
			}

			public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, ref bool pbWasTimedOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseBodyData(uint hRequest, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(uint hRequest, string pchHeaderName, out uint unResponseHeaderSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer);
			}

			public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
			}

			public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
			}

			public virtual bool ISteamHTTP_SetCookie(uint hCookieContainer, string pchHost, string pchUrl, string pchCookie)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(uint hRequest, string pchParamName, string pchParamValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(uint hRequest, string pchHeaderName, string pchHeaderValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(uint hRequest, bool bRequireVerifiedCertificate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
			}

			public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
			}

			public virtual bool ISteamInventory_AddPromoItems(ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
			}

			public virtual bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
			}

			public virtual bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
			}

			public virtual bool ISteamInventory_DeserializeResult(ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
			}

			public virtual void ISteamInventory_DestroyResult(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
			}

			public virtual bool ISteamInventory_ExchangeItems(ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
			}

			public virtual bool ISteamInventory_GenerateItems(ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle);
			}

			public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
			}

			public virtual bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize);
			}

			public virtual bool ISteamInventory_GetItemDefinitionProperty(int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			public virtual bool ISteamInventory_GetItemPrice(int iDefinition, out ulong pPrice)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetItemPrice(this._ptr, iDefinition, out pPrice);
			}

			public virtual bool ISteamInventory_GetItemsByID(ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
			}

			public virtual bool ISteamInventory_GetItemsWithPrices(IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetItemsWithPrices(this._ptr, pArrayItemDefs, pPrices, unArrayLength);
			}

			public virtual uint ISteamInventory_GetNumItemsWithPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetNumItemsWithPrices(this._ptr);
			}

			public virtual bool ISteamInventory_GetResultItemProperty(int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			public virtual bool ISteamInventory_GetResultItems(int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
			}

			public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle);
			}

			public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle);
			}

			public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle);
			}

			public virtual bool ISteamInventory_LoadItemDefinitions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr);
			}

			public virtual bool ISteamInventory_RemoveProperty(ulong handle, ulong nItemID, string pchPropertyName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_RemoveProperty(this._ptr, handle, nItemID, pchPropertyName);
			}

			public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID);
			}

			public virtual SteamAPICall_t ISteamInventory_RequestPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_RequestPrices(this._ptr);
			}

			public virtual void ISteamInventory_SendItemDropHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
			}

			public virtual bool ISteamInventory_SerializeResult(int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
			}

			public virtual bool ISteamInventory_SetProperty(ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_SetProperty(this._ptr, handle, nItemID, pchPropertyName, pchPropertyValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, bValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, long nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, nValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, flValue);
			}

			public virtual SteamAPICall_t ISteamInventory_StartPurchase(int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_StartPurchase(this._ptr, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			public virtual SteamInventoryUpdateHandle_t ISteamInventory_StartUpdateProperties()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_StartUpdateProperties(this._ptr);
			}

			public virtual bool ISteamInventory_SubmitUpdateProperties(ulong handle, ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_SubmitUpdateProperties(this._ptr, handle, ref pResultHandle);
			}

			public virtual bool ISteamInventory_TradeItems(ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
			}

			public virtual bool ISteamInventory_TransferItemQuantity(ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
			}

			public virtual bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
			}

			public virtual int ISteamMatchmaking_AddFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
			}

			public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			public virtual bool ISteamMatchmaking_GetFavoriteGame(int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
			}

			public virtual int ISteamMatchmaking_GetFavoriteGameCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby);
			}

			public virtual int ISteamMatchmaking_GetLobbyChatEntry(ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
			}

			public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
			}

			public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_GetLobbyGameServer(ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
			}

			public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(ulong steamIDLobby, ulong steamIDUser, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
			}

			public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby);
			}

			public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby);
			}

			public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_RemoveFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
			}

			public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr);
			}

			public virtual bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
			}

			public virtual bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
			}

			public virtual bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			public virtual void ISteamMatchmaking_SetLobbyGameServer(ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
			}

			public virtual bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, bool bLobbyJoinable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
			}

			public virtual void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
			}

			public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
			}

			public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
			}

			public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
			}

			public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
			}

			public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest);
			}

			public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
			}

			public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest);
			}

			public virtual HServerQuery ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
			}

			public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
			}

			public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(uint iApp, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerQuery ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual bool ISteamMusic_BIsEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr);
			}

			public virtual bool ISteamMusic_BIsPlaying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr);
			}

			public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr);
			}

			public virtual float ISteamMusic_GetVolume()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr);
			}

			public virtual void ISteamMusic_Pause()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
			}

			public virtual void ISteamMusic_Play()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMusic_Play(this._ptr);
			}

			public virtual void ISteamMusic_PlayNext()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
			}

			public virtual void ISteamMusic_PlayPrevious()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
			}

			public virtual void ISteamMusic_SetVolume(float flVolume)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
			}

			public virtual bool ISteamMusicRemote_BActivationSuccess(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr);
			}

			public virtual bool ISteamMusicRemote_EnableLooped(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlaylists(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlayNext(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlayPrevious(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnableQueue(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnableShuffled(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_PlaylistDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_PlaylistWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_QueueDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_QueueWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName);
			}

			public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr);
			}

			public virtual bool ISteamMusicRemote_ResetQueueEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr);
			}

			public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID);
			}

			public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID);
			}

			public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName);
			}

			public virtual bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
			}

			public virtual bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText);
			}

			public virtual bool ISteamMusicRemote_UpdateLooped(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus);
			}

			public virtual bool ISteamMusicRemote_UpdateShuffled(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue);
			}

			public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			public virtual bool ISteamNetworking_AllowP2PPacketRelay(bool bAllow)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow);
			}

			public virtual bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
			}

			public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
			}

			public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
			}

			public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
			}

			public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			public virtual bool ISteamNetworking_DestroySocket(uint hSocket, bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			public virtual bool ISteamNetworking_GetListenSocketInfo(uint hListenSocket, out uint pnIP, out ushort pnPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort);
			}

			public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket);
			}

			public virtual bool ISteamNetworking_GetP2PSessionState(ulong steamIDRemote, ref P2PSessionState_t pConnectionState)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				P2PSessionState_t.PackSmall packSmall = new P2PSessionState_t.PackSmall();
				bool flag = Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref packSmall);
				pConnectionState = packSmall;
				return flag;
			}

			public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket);
			}

			public virtual bool ISteamNetworking_GetSocketInfo(uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
			}

			public virtual bool ISteamNetworking_IsDataAvailable(uint hListenSocket, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
			}

			public virtual bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize);
			}

			public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel);
			}

			public virtual bool ISteamNetworking_ReadP2PPacket(IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
			}

			public virtual bool ISteamNetworking_RetrieveData(uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
			}

			public virtual bool ISteamNetworking_RetrieveDataFromSocket(uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
			}

			public virtual bool ISteamNetworking_SendDataOnSocket(uint hSocket, IntPtr pubData, uint cubData, bool bReliable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
			}

			public virtual bool ISteamNetworking_SendP2PPacket(ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
			}

			public virtual bool ISteamParentalSettings_BIsAppBlocked(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamParentalSettings_BIsAppBlocked(this._ptr, nAppID);
			}

			public virtual bool ISteamParentalSettings_BIsAppInBlockList(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamParentalSettings_BIsAppInBlockList(this._ptr, nAppID);
			}

			public virtual bool ISteamParentalSettings_BIsFeatureBlocked(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(this._ptr, eFeature);
			}

			public virtual bool ISteamParentalSettings_BIsFeatureInBlockList(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(this._ptr, eFeature);
			}

			public virtual bool ISteamParentalSettings_BIsParentalLockEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(this._ptr);
			}

			public virtual bool ISteamParentalSettings_BIsParentalLockLocked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(this._ptr);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle);
			}

			public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(WorkshopFileAction eAction, uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				SteamParamStringArray_t.PackSmall packSmall1 = new SteamParamStringArray_t.PackSmall();
				SteamAPICall_t steamAPICallT = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref packSmall, ref packSmall1);
				pTags = packSmall;
				pUserTags = packSmall1;
				return steamAPICallT;
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				SteamParamStringArray_t.PackSmall packSmall1 = new SteamParamStringArray_t.PackSmall();
				SteamAPICall_t steamAPICallT = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref packSmall, ref packSmall1);
				pRequiredTags = packSmall;
				pExcludedTags = packSmall1;
				return steamAPICallT;
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex);
			}

			public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile);
			}

			public virtual int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(string pchFile, uint nOffset, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
			}

			public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(ulong hReadCall, IntPtr pvBuffer, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(string pchFile, IntPtr pvData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle);
			}

			public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(ulong writeHandle, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
			}

			public virtual int ISteamRemoteStorage_GetCachedUGCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr);
			}

			public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent);
			}

			public virtual int ISteamRemoteStorage_GetFileCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr);
			}

			public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes);
			}

			public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile);
			}

			public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(ulong unPublishedFileId, uint unMaxSecondsOld)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes);
			}

			public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_GetUGCDetails(ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
			}

			public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr);
			}

			public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				SteamAPICall_t steamAPICallT = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref packSmall);
				pTags = packSmall;
				return steamAPICallT;
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				SteamAPICall_t steamAPICallT = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref packSmall, eWorkshopFileType);
				pTags = packSmall;
				return steamAPICallT;
			}

			public virtual void ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
			}

			public virtual bool ISteamRemoteStorage_SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(ulong unPublishedFileId, WorkshopFileAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(ulong hContent, string pchLocation, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
			}

			public virtual int ISteamRemoteStorage_UGCRead(ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(ulong updateHandle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ulong updateHandle, string pchPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ulong updateHandle, string pchChangeDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				bool flag = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref packSmall);
				pTags = packSmall;
				return flag;
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(ulong unPublishedFileId, bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
			}

			public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
			}

			public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
			}

			public virtual void ISteamScreenshots_HookScreenshots(bool bHook)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
			}

			public virtual bool ISteamScreenshots_IsScreenshotsHooked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr);
			}

			public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
			}

			public virtual bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
			}

			public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
			}

			public virtual void ISteamScreenshots_TriggerScreenshot()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
			}

			public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
			}

			public virtual SteamAPICall_t ISteamUGC_AddAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			public virtual SteamAPICall_t ISteamUGC_AddDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
			}

			public virtual bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
			}

			public virtual bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
			}

			public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
			}

			public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			public virtual bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
			}

			public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
			}

			public virtual bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
			}

			public virtual SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
			}

			public virtual SteamAPICall_t ISteamUGC_DeleteItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_DeleteItem(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, bool bHighPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
			}

			public virtual SteamAPICall_t ISteamUGC_GetAppDependencies(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetAppDependencies(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_GetItemDownloadInfo(ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal);
			}

			public virtual bool ISteamUGC_GetItemInstallInfo(ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
			}

			public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID);
			}

			public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal);
			}

			public virtual uint ISteamUGC_GetNumSubscribedItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr);
			}

			public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
			}

			public virtual bool ISteamUGC_GetQueryUGCChildren(ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
			}

			public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
			}

			public virtual bool ISteamUGC_GetQueryUGCMetadata(ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
			}

			public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
			}

			public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
			}

			public virtual bool ISteamUGC_GetQueryUGCPreviewURL(ulong handle, uint index, StringBuilder pchURL, uint cchURLSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
			}

			public virtual bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				SteamUGCDetails_t.PackSmall packSmall = new SteamUGCDetails_t.PackSmall();
				bool flag = Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref packSmall);
				pDetails = packSmall;
				return flag;
			}

			public virtual bool ISteamUGC_GetQueryUGCStatistic(ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
			}

			public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
			}

			public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_RemoveAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
			}

			public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
			}

			public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
			}

			public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle);
			}

			public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
			}

			public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
			}

			public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
			}

			public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
			}

			public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
			}

			public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
			}

			public virtual bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				bool flag = Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref packSmall);
				pTags = packSmall;
				return flag;
			}

			public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
			}

			public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
			}

			public virtual bool ISteamUGC_SetItemVisibility(ulong handle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
			}

			public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
			}

			public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, bool bMatchAnyTag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
			}

			public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
			}

			public virtual bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle, bool bReturnAdditionalPreviews)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
			}

			public virtual bool ISteamUGC_SetReturnChildren(ulong handle, bool bReturnChildren)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
			}

			public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, bool bReturnKeyValueTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
			}

			public virtual bool ISteamUGC_SetReturnLongDescription(ulong handle, bool bReturnLongDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
			}

			public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, bool bReturnMetadata)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
			}

			public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, bool bReturnOnlyIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
			}

			public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
			}

			public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, bool bReturnTotalOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
			}

			public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
			}

			public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
			}

			public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
			}

			public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
			}

			public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID);
			}

			public virtual void ISteamUGC_SuspendDownloads(bool bSuspend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
			}

			public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
			}

			public virtual bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
			}

			public virtual void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
			}

			public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			public virtual bool ISteamUser_BIsBehindNAT()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneIdentifying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneRequiringVerification()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneVerified()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr);
			}

			public virtual bool ISteamUser_BIsTwoFactorEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr);
			}

			public virtual bool ISteamUser_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr);
			}

			public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			public virtual VoiceResult ISteamUser_DecompressVoice(IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
			}

			public virtual void ISteamUser_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
			}

			public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual VoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			public virtual bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
			}

			public virtual HSteamUser ISteamUser_GetHSteamUser()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr);
			}

			public virtual int ISteamUser_GetPlayerSteamLevel()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr);
			}

			public virtual CSteamID ISteamUser_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr);
			}

			public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
			}

			public virtual VoiceResult ISteamUser_GetVoice(bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr);
			}

			public virtual int ISteamUser_InitiateGameConnection(IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
			}

			public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
			}

			public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL);
			}

			public virtual void ISteamUser_StartVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
			}

			public virtual void ISteamUser_StopVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
			}

			public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
			}

			public virtual void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
			}

			public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
			}

			public virtual bool ISteamUserStats_ClearAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName);
			}

			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
			}

			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
			}

			public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName);
			}

			public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
			}

			public virtual bool ISteamUserStats_GetAchievement(string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
			}

			public virtual bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent);
			}

			public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(string pchName, ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
			}

			public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
			}

			public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName);
			}

			public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement);
			}

			public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				LeaderboardEntry_t.PackSmall packSmall = new LeaderboardEntry_t.PackSmall();
				bool flag = Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref packSmall, pDetails, cDetailsMax);
				pLeaderboardEntry = packSmall;
				return flag;
			}

			public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData);
			}

			public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData);
			}

			public virtual int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
			}

			public virtual int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
			}

			public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard);
			}

			public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard);
			}

			public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard);
			}

			public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard);
			}

			public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			public virtual uint ISteamUserStats_GetNumAchievements()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr);
			}

			public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetUserAchievement(ulong steamIDUser, string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(ulong steamIDUser, string pchName, ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
			}

			public virtual bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamUserStats_IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
			}

			public virtual bool ISteamUserStats_RequestCurrentStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamUserStats_ResetAllStats(bool bAchievementsToo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo);
			}

			public virtual bool ISteamUserStats_SetAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName);
			}

			public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
			}

			public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
			}

			public virtual bool ISteamUserStats_StoreStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr);
			}

			public virtual bool ISteamUserStats_UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
			}

			public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
			}

			public virtual bool ISteamUtils_BOverlayNeedsPresent()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName);
			}

			public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall);
			}

			public virtual bool ISteamUtils_GetAPICallResult(ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
			}

			public virtual uint ISteamUtils_GetAppID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr);
			}

			public virtual Universe ISteamUtils_GetConnectedUniverse()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr);
			}

			public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort);
			}

			public virtual byte ISteamUtils_GetCurrentBatteryPower()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr);
			}

			public virtual bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
			}

			public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr);
			}

			public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
			}

			public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight);
			}

			public virtual uint ISteamUtils_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr);
			}

			public virtual IntPtr ISteamUtils_GetIPCountry()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr);
			}

			public virtual uint ISteamUtils_GetSecondsSinceAppActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr);
			}

			public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr);
			}

			public virtual uint ISteamUtils_GetServerRealTime()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr);
			}

			public virtual IntPtr ISteamUtils_GetSteamUILanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr);
			}

			public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
			}

			public virtual bool ISteamUtils_IsOverlayEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr);
			}

			public virtual bool ISteamUtils_IsSteamInBigPictureMode()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr);
			}

			public virtual bool ISteamUtils_IsSteamRunningInVR()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr);
			}

			public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr);
			}

			public virtual void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
			}

			public virtual void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
			}

			public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled(bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
			}

			public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
			}

			public virtual bool ISteamUtils_ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
			}

			public virtual void ISteamUtils_StartVRDashboard()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
			}

			public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
			}

			public virtual bool ISteamVideo_GetOPFStringForApp(uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
			}

			public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
			}

			public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers);
			}

			public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
			{
				return Platform.Linux32.Native.SteamAPI_GetHSteamPipe();
			}

			public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
			{
				return Platform.Linux32.Native.SteamAPI_GetHSteamUser();
			}

			public virtual bool SteamApi_SteamAPI_Init()
			{
				return Platform.Linux32.Native.SteamAPI_Init();
			}

			public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
			{
				Platform.Linux32.Native.SteamAPI_RegisterCallback(pCallback, callback);
			}

			public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Linux32.Native.SteamAPI_RegisterCallResult(pCallback, callback);
			}

			public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
			{
				return Platform.Linux32.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
			}

			public virtual void SteamApi_SteamAPI_RunCallbacks()
			{
				Platform.Linux32.Native.SteamAPI_RunCallbacks();
			}

			public virtual void SteamApi_SteamAPI_Shutdown()
			{
				Platform.Linux32.Native.SteamAPI_Shutdown();
			}

			public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
			{
				Platform.Linux32.Native.SteamAPI_UnregisterCallback(pCallback);
			}

			public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Linux32.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
			}

			public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
			{
				return Platform.Linux32.Native.SteamGameServer_GetHSteamPipe();
			}

			public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
			{
				return Platform.Linux32.Native.SteamGameServer_GetHSteamUser();
			}

			public virtual void SteamApi_SteamGameServer_RunCallbacks()
			{
				Platform.Linux32.Native.SteamGameServer_RunCallbacks();
			}

			public virtual void SteamApi_SteamGameServer_Shutdown()
			{
				Platform.Linux32.Native.SteamGameServer_Shutdown();
			}

			public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
			{
				return Platform.Linux32.Native.SteamInternal_CreateInterface(version);
			}

			public virtual bool SteamApi_SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString)
			{
				return Platform.Linux32.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
			}

			internal static class Native
			{
				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_GetHSteamUser();

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_Init();

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(IntPtr ISteamAppList, uint nAppID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(IntPtr ISteamAppList, uint nAppID, StringBuilder pchDirectory, int cchNameMax);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppName(IntPtr ISteamAppList, uint nAppID, StringBuilder pchName, int cchNameMax);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(IntPtr ISteamAppList, IntPtr pvecAppID, uint unMaxAppIDs);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(IntPtr ISteamApps, int iDLC, ref uint pAppID, ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(IntPtr ISteamApps, uint appID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(IntPtr ISteamApps, uint appID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(IntPtr ISteamApps, uint appID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(IntPtr ISteamApps);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(IntPtr ISteamApps, uint appID, StringBuilder pchFolder, uint cchFolderBufferSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(IntPtr ISteamApps);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(IntPtr ISteamApps, StringBuilder pchName, int cchNameBufferSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(IntPtr ISteamApps, uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(IntPtr ISteamApps, uint nAppID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(IntPtr ISteamApps, string pszFileName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(IntPtr ISteamApps, uint appID, IntPtr pvecDepots, uint cMaxDepots);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(IntPtr ISteamApps, string pchKey);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(IntPtr ISteamApps, bool bMissingFilesOnly);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(IntPtr ISteamApps);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(IntPtr ISteamApps, uint nAppID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(IntPtr ISteamClient, int hSteamPipe);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(IntPtr ISteamClient);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(IntPtr ISteamClient, int hSteamPipe);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(IntPtr ISteamClient, out int phSteamPipe, AccountType eAccountType);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamParentalSettings(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(IntPtr ISteamClient, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_ReleaseUser(IntPtr ISteamClient, int hSteamPipe, int hUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(IntPtr ISteamClient, uint unIP, ushort usPort);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(IntPtr ISteamClient, IntPtr pFunction);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_ActivateActionSet(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_ActivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_DeactivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_DeactivateAllActionSetLayers(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(IntPtr ISteamController, string pszActionSetName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetActiveActionSetLayers(IntPtr ISteamController, ulong controllerHandle, IntPtr handlesOut);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(IntPtr ISteamController, string pszActionName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetConnectedControllers(IntPtr ISteamController, IntPtr handlesOut);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(IntPtr ISteamController, int nIndex);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(IntPtr ISteamController, string pszActionName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(IntPtr ISteamController, ulong ulControllerHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_SetLEDColor(IntPtr ISteamController, ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(IntPtr ISteamController, ulong controllerHandle, ulong eAction);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerVibration(IntPtr ISteamController, ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(IntPtr ISteamFriends, string pchDialog);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(IntPtr ISteamFriends, ulong steamIDLobby);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(IntPtr ISteamFriends, uint nAppID, OverlayToStoreFlag eFlag);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(IntPtr ISteamFriends, string pchDialog, ulong steamID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(IntPtr ISteamFriends, string pchURL);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(IntPtr ISteamFriends, IntPtr psteamIDClans, int cClansToRequest);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(IntPtr ISteamFriends, uint unStartIndex);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(IntPtr ISteamFriends, ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(IntPtr ISteamFriends, int iClan);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iOfficer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(IntPtr ISteamFriends, int iCoplayFriend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(IntPtr ISteamFriends, ulong steamID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(IntPtr ISteamFriends, int iFriend, int iFriendFlags);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCount(IntPtr ISteamFriends, int iFriendFlags);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(IntPtr ISteamFriends, ulong steamIDSource);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(IntPtr ISteamFriends, ulong steamIDSource, int iFriend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(IntPtr ISteamFriends, ulong steamIDFriend, ref FriendGameInfo_t.PackSmall pFriendGameInfo);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(IntPtr ISteamFriends, ulong steamIDFriend, int iPersonaName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend, string pchKey);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(IntPtr ISteamFriends, ulong steamIDFriend, int iKey);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(IntPtr ISteamFriends, int iFG);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(IntPtr ISteamFriends, short friendsGroupID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(IntPtr ISteamFriends, short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(IntPtr ISteamFriends, short friendsGroupID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(IntPtr ISteamFriends);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(IntPtr ISteamFriends, ulong steamIDPlayer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_HasFriend(IntPtr ISteamFriends, ulong steamIDFriend, int iFriendFlags);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(IntPtr ISteamFriends, ulong steamIDFriend, string pchConnectString);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(IntPtr ISteamFriends, ulong steamIDClanChat, ulong steamIDUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanPublic(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(IntPtr ISteamFriends, ulong steamID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(IntPtr ISteamFriends, ulong steamIDUser, ulong steamIDSource);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, string pchMsgToSend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(IntPtr ISteamFriends, ulong steamIDUser, bool bRequireNameOnly);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, string pchText);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(IntPtr ISteamFriends, ulong steamIDUser, bool bSpeaking);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(IntPtr ISteamFriends, bool bInterceptEnabled);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(IntPtr ISteamFriends, string pchPersonaName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(IntPtr ISteamFriends, ulong steamIDUserPlayedWith);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(IntPtr ISteamFriends, string pchKey, string pchValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(IntPtr ISteamGameServer, ulong steamIDClan);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(IntPtr ISteamGameServer, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(IntPtr ISteamGameServer, ulong steamIDUser, string pchPlayerName, uint uScore);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(IntPtr ISteamGameServer, uint hAuthTicket);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(IntPtr ISteamGameServer, ulong steamIDNewPlayer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(IntPtr ISteamGameServer, bool bActive);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(IntPtr ISteamGameServer, ulong steamID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(IntPtr ISteamGameServer, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(IntPtr ISteamGameServer, IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(IntPtr ISteamGameServer, IntPtr pData, int cbData, uint srcIP, ushort srcPort);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(IntPtr ISteamGameServer, uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOn(IntPtr ISteamGameServer, string pszToken);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(IntPtr ISteamGameServer, ulong steamIDUser, ulong steamIDGroup);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(IntPtr ISteamGameServer, uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(IntPtr ISteamGameServer, ulong steamIDUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(IntPtr ISteamGameServer, int cBotplayers);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(IntPtr ISteamGameServer, bool bDedicated);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameData(IntPtr ISteamGameServer, string pchGameData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(IntPtr ISteamGameServer, string pszGameDescription);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameTags(IntPtr ISteamGameServer, string pchGameTags);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(IntPtr ISteamGameServer, int iHeartbeatInterval);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(IntPtr ISteamGameServer, string pKey, string pValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetMapName(IntPtr ISteamGameServer, string pszMapName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(IntPtr ISteamGameServer, int cPlayersMax);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetModDir(IntPtr ISteamGameServer, string pszModDir);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(IntPtr ISteamGameServer, bool bPasswordProtected);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetProduct(IntPtr ISteamGameServer, string pszProduct);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetRegion(IntPtr ISteamGameServer, string pszRegion);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetServerName(IntPtr ISteamGameServer, string pszServerName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(IntPtr ISteamGameServer, ushort unSpectatorPort);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(IntPtr ISteamGameServer, string pszSpectatorServerName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(IntPtr ISteamGameServer, ulong steamID, uint appID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, ref bool pbAchieved);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out int pData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out float pData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, int nData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float fData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchKey, string pchValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bAllowed);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(IntPtr ISteamHTMLSurface, string pchUserAgent, string pchUserCSS);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(IntPtr ISteamHTMLSurface);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchScript);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_Find(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bResult);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchURL, string pchPostData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int nDelta);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_Reload(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bBackgroundMode);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(IntPtr ISteamHTMLSurface, string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, bool bSecure, bool bHTTPOnly);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flDPIScaling);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bHasKeyFocus);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flZoom, int nPointX, int nPointY);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint unWidth, uint unHeight);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(IntPtr ISteamHTTP, bool bAllowResponsesToModify);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(IntPtr ISteamHTTP, HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(IntPtr ISteamHTTP, uint hRequest, out float pflPercentOut);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(IntPtr ISteamHTTP, uint hRequest, ref bool pbWasTimedOut);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(IntPtr ISteamHTTP, uint hRequest, out byte pBodyDataBuffer, uint unBufferSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(IntPtr ISteamHTTP, uint hRequest, out uint unBodySize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out uint unResponseHeaderSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(IntPtr ISteamHTTP, uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(IntPtr ISteamHTTP, uint hCookieContainer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetCookie(IntPtr ISteamHTTP, uint hCookieContainer, string pchHost, string pchUrl, string pchCookie);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(IntPtr ISteamHTTP, uint hRequest, uint unMilliseconds);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(IntPtr ISteamHTTP, uint hRequest, ulong ulContextValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(IntPtr ISteamHTTP, uint hRequest, uint hCookieContainer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(IntPtr ISteamHTTP, uint hRequest, string pchParamName, string pchParamValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, string pchHeaderValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(IntPtr ISteamHTTP, uint hRequest, uint unTimeoutSeconds);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(IntPtr ISteamHTTP, uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(IntPtr ISteamHTTP, uint hRequest, bool bRequireVerifiedCertificate);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(IntPtr ISteamHTTP, uint hRequest, string pchUserAgentInfo);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(IntPtr ISteamInventory, ref int pResultHandle, int itemDef);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(IntPtr ISteamInventory, int resultHandle, ulong steamIDExpected);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(IntPtr ISteamInventory, ref int pResultHandle, ulong itemConsume, uint unQuantity);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(IntPtr ISteamInventory, ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamInventory_DestroyResult(IntPtr ISteamInventory, int resultHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GenerateItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetAllItems(IntPtr ISteamInventory, ref int pResultHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(IntPtr ISteamInventory, ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(IntPtr ISteamInventory, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(IntPtr ISteamInventory, int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemPrice(IntPtr ISteamInventory, int iDefinition, out ulong pPrice);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(IntPtr ISteamInventory, ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsWithPrices(IntPtr ISteamInventory, IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamInventory_GetNumItemsWithPrices(IntPtr ISteamInventory);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(IntPtr ISteamInventory, int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItems(IntPtr ISteamInventory, int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(IntPtr ISteamInventory, int resultHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(IntPtr ISteamInventory, int resultHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(IntPtr ISteamInventory, ref int pResultHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(IntPtr ISteamInventory);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_RemoveProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(IntPtr ISteamInventory, ulong steamID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(IntPtr ISteamInventory);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(IntPtr ISteamInventory);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SerializeResult(IntPtr ISteamInventory, int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, bool bValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, long nValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, float flValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(IntPtr ISteamInventory, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(IntPtr ISteamInventory);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SubmitUpdateProperties(IntPtr ISteamInventory, ulong handle, ref int pResultHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TradeItems(IntPtr ISteamInventory, ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(IntPtr ISteamInventory, ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(IntPtr ISteamInventory, ref int pResultHandle, int dropListDefinition);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(IntPtr ISteamMatchmaking, LobbyDistanceFilter eLobbyDistanceFilter);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(IntPtr ISteamMatchmaking, int nSlotsAvailable);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToBeCloseTo);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(IntPtr ISteamMatchmaking, int cMaxResults);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(IntPtr ISteamMatchmaking, LobbyType eLobbyType, int cMaxMembers);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(IntPtr ISteamMatchmaking, int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(IntPtr ISteamMatchmaking);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(IntPtr ISteamMatchmaking, int iLobby);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iMember);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDUser, string pchKey);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDInvitee);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(IntPtr ISteamMatchmaking);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(IntPtr ISteamMatchmaking, ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDLobbyDependent);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(IntPtr ISteamMatchmaking, ulong steamIDLobby, bool bLobbyJoinable);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby, int cMaxMembers);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDNewOwner);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(IntPtr ISteamMatchmaking, ulong steamIDLobby, LobbyType eLobbyType);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(IntPtr ISteamMatchmakingServers, int hServerQuery);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(IntPtr ISteamMatchmakingServers, IntPtr hServerListRequest);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(IntPtr ISteamMusic);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_SetVolume(IntPtr ISteamMusic, float flVolume);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(IntPtr ISteamMusicRemote, bool bAvailable);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(IntPtr ISteamMusicRemote, string pchName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(IntPtr ISteamMusicRemote, int nID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(IntPtr ISteamMusicRemote, int nID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(IntPtr ISteamMusicRemote, string pchDisplayName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(IntPtr ISteamMusicRemote, int nValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(IntPtr ISteamMusicRemote, string pchText);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(IntPtr ISteamMusicRemote, AudioPlayback_Status nStatus);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(IntPtr ISteamMusicRemote, float flValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(IntPtr ISteamNetworking, bool bAllow);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(IntPtr ISteamNetworking, ulong steamIDRemote, int nChannel);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(IntPtr ISteamNetworking, uint nIP, ushort nPort, int nTimeoutSec);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(IntPtr ISteamNetworking, int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(IntPtr ISteamNetworking, ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(IntPtr ISteamNetworking, uint hSocket, bool bNotifyRemoteEnd);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(IntPtr ISteamNetworking, uint hSocket, bool bNotifyRemoteEnd);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(IntPtr ISteamNetworking, uint hListenSocket, out uint pnIP, out ushort pnPort);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(IntPtr ISteamNetworking, uint hSocket);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(IntPtr ISteamNetworking, ulong steamIDRemote, ref P2PSessionState_t.PackSmall pConnectionState);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(IntPtr ISteamNetworking, uint hSocket);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(IntPtr ISteamNetworking, uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(IntPtr ISteamNetworking, uint hListenSocket, out uint pcubMsgSize, ref uint phSocket);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(IntPtr ISteamNetworking, uint hSocket, out uint pcubMsgSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(IntPtr ISteamNetworking, out uint pcubMsgSize, int nChannel);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(IntPtr ISteamNetworking, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(IntPtr ISteamNetworking, uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubData, uint cubData, bool bReliable);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(IntPtr ISteamNetworking, ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(IntPtr ISteamParentalSettings, uint nAppID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(IntPtr ISteamParentalSettings, uint nAppID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(IntPtr ISteamParentalSettings);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(IntPtr ISteamParentalSettings);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(IntPtr ISteamRemoteStorage, ulong updateHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(IntPtr ISteamRemoteStorage, WorkshopFileAction eAction, uint unStartIndex);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(IntPtr ISteamRemoteStorage, WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t.PackSmall pTags, ref SteamParamStringArray_t.PackSmall pUserTags);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(IntPtr ISteamRemoteStorage, ulong steamId, uint unStartIndex, ref SteamParamStringArray_t.PackSmall pRequiredTags, ref SteamParamStringArray_t.PackSmall pExcludedTags);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubDataToRead);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(IntPtr ISteamRemoteStorage, string pchFile, uint nOffset, uint cubToRead);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(IntPtr ISteamRemoteStorage, ulong hReadCall, IntPtr pvBuffer, uint cubToRead);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, uint cubData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(IntPtr ISteamRemoteStorage, ulong writeHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(IntPtr ISteamRemoteStorage, ulong writeHandle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(IntPtr ISteamRemoteStorage, ulong writeHandle, IntPtr pvData, int cubData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(IntPtr ISteamRemoteStorage);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(IntPtr ISteamRemoteStorage, int iCachedContent);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(IntPtr ISteamRemoteStorage);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(IntPtr ISteamRemoteStorage, int iFile, out int pnFileSizeInBytes);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, uint unMaxSecondsOld);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(IntPtr ISteamRemoteStorage, out ulong pnTotalBytes, out ulong puAvailableBytes);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(IntPtr ISteamRemoteStorage, ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(IntPtr ISteamRemoteStorage, ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(IntPtr ISteamRemoteStorage);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(IntPtr ISteamRemoteStorage);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(IntPtr ISteamRemoteStorage, WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t.PackSmall pTags);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(IntPtr ISteamRemoteStorage, string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t.PackSmall pTags, WorkshopFileType eWorkshopFileType);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(IntPtr ISteamRemoteStorage, bool bEnabled);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, WorkshopFileAction eAction);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(IntPtr ISteamRemoteStorage, ulong hContent, uint unPriority);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(IntPtr ISteamRemoteStorage, ulong hContent, string pchLocation, uint unPriority);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(IntPtr ISteamRemoteStorage, ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchDescription);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchFile);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchPreviewFile);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchChangeDescription);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(IntPtr ISteamRemoteStorage, ulong updateHandle, ref SteamParamStringArray_t.PackSmall pTags);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchTitle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(IntPtr ISteamRemoteStorage, ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, bool bVoteUp);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(IntPtr ISteamScreenshots, string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(IntPtr ISteamScreenshots, VRScreenshotType eType, string pchFilename, string pchVRFilename);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(IntPtr ISteamScreenshots, bool bHook);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(IntPtr ISteamScreenshots);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(IntPtr ISteamScreenshots, uint hScreenshot, string pchLocation);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(IntPtr ISteamScreenshots, uint hScreenshot, ulong unPublishedFileID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_TagUser(IntPtr ISteamScreenshots, uint hScreenshot, ulong steamID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(IntPtr ISteamScreenshots);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(IntPtr ISteamScreenshots, IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(IntPtr ISteamUGC, ulong handle, string pchKey, string pchValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(IntPtr ISteamUGC, ulong handle, string pszPreviewFile, ItemPreviewType type);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(IntPtr ISteamUGC, ulong handle, string pszVideoID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(IntPtr ISteamUGC, ulong handle, string pKey, string pValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(IntPtr ISteamUGC, uint unWorkshopDepotID, string pszFolder);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(IntPtr ISteamUGC, uint nConsumerAppId, WorkshopFileType eFileType);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(IntPtr ISteamUGC, UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(IntPtr ISteamUGC, uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_DownloadItem(IntPtr ISteamUGC, ulong nPublishedFileID, bool bHighPriority);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetItemState(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(IntPtr ISteamUGC, ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(IntPtr ISteamUGC, ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(IntPtr ISteamUGC, ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(IntPtr ISteamUGC, ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchURL, uint cchURLSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(IntPtr ISteamUGC, ulong handle, uint index, ref SteamUGCDetails_t.PackSmall pDetails);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(IntPtr ISteamUGC, ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint cMaxEntries);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(IntPtr ISteamUGC, ulong handle, string pchKey);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(IntPtr ISteamUGC, ulong nPublishedFileID, uint unMaxAgeSeconds);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(IntPtr ISteamUGC, ulong handle, uint unMaxAgeSeconds);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(IntPtr ISteamUGC, ulong handle, string pMatchCloudFileName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemContent(IntPtr ISteamUGC, ulong handle, string pszContentFolder);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(IntPtr ISteamUGC, ulong handle, string pchDescription);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(IntPtr ISteamUGC, ulong handle, string pchMetaData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(IntPtr ISteamUGC, ulong handle, string pszPreviewFile);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTags(IntPtr ISteamUGC, ulong updateHandle, ref SteamParamStringArray_t.PackSmall pTags);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(IntPtr ISteamUGC, ulong handle, string pchTitle);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(IntPtr ISteamUGC, ulong handle, RemoteStoragePublishedFileVisibility eVisibility);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(IntPtr ISteamUGC, ulong handle, bool bMatchAnyTag);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(IntPtr ISteamUGC, ulong handle, uint unDays);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(IntPtr ISteamUGC, ulong handle, bool bReturnAdditionalPreviews);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(IntPtr ISteamUGC, ulong handle, bool bReturnChildren);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(IntPtr ISteamUGC, ulong handle, bool bReturnKeyValueTags);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(IntPtr ISteamUGC, ulong handle, bool bReturnLongDescription);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(IntPtr ISteamUGC, ulong handle, bool bReturnMetadata);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(IntPtr ISteamUGC, ulong handle, bool bReturnOnlyIDs);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(IntPtr ISteamUGC, ulong handle, uint unDays);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(IntPtr ISteamUGC, ulong handle, bool bReturnTotalOnly);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetSearchText(IntPtr ISteamUGC, ulong handle, string pSearchText);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID, bool bVoteUp);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(IntPtr ISteamUGC, uint nConsumerAppId, ulong nPublishedFileID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(IntPtr ISteamUGC);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(IntPtr ISteamUGC, ulong handle, string pchChangeNote);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(IntPtr ISteamUGC, bool bSuspend);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(IntPtr ISteamUGC, ulong handle, uint index, string pszPreviewFile);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(IntPtr ISteamUGC, ulong handle, uint index, string pszVideoID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_AdvertiseGame(IntPtr ISteamUser, ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(IntPtr ISteamUser, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(IntPtr ISteamUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(IntPtr ISteamUser, uint hAuthTicket);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(IntPtr ISteamUser, IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_EndAuthSession(IntPtr ISteamUser, ulong steamID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(IntPtr ISteamUser, out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(IntPtr ISteamUser, int nSeries, bool bFoil);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(IntPtr ISteamUser, StringBuilder pchBuffer, int cubBuffer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(IntPtr ISteamUser, bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(IntPtr ISteamUser, IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(IntPtr ISteamUser, IntPtr pDataToInclude, int cbDataToInclude);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(IntPtr ISteamUser, string pchRedirectURL);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(IntPtr ISteamUser, uint unIPServer, ushort usPortServer);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(IntPtr ISteamUser, ulong gameID, int eAppUsageEvent, string pchExtraInfo);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(IntPtr ISteamUser, ulong steamID, uint appID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(IntPtr ISteamUserStats, ulong hSteamLeaderboard, ulong hUGC);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(IntPtr ISteamUserStats, string pchName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(IntPtr ISteamUserStats, ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(IntPtr ISteamUserStats, string pchName, ref bool pbAchieved);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(IntPtr ISteamUserStats, string pchName, out float pflPercent);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(IntPtr ISteamUserStats, string pchName, ref bool pbAchieved, out uint punUnlockTime);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(IntPtr ISteamUserStats, string pchName, string pchKey);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(IntPtr ISteamUserStats, string pchName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(IntPtr ISteamUserStats, uint iAchievement);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(IntPtr ISteamUserStats, ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t.PackSmall pLeaderboardEntry, IntPtr pDetails, int cDetailsMax);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(IntPtr ISteamUserStats, string pchStatName, out long pData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(IntPtr ISteamUserStats, string pchStatName, out double pData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(IntPtr ISteamUserStats, string pchStatName, out long pData, uint cubData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(IntPtr ISteamUserStats, string pchStatName, out double pData, uint cubData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr ISteamUserStats, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(IntPtr ISteamUserStats, int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(IntPtr ISteamUserStats);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(IntPtr ISteamUserStats);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat(IntPtr ISteamUserStats, string pchName, out int pData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat0(IntPtr ISteamUserStats, string pchName, out float pData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, ref bool pbAchieved);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, ref bool pbAchieved, out uint punUnlockTime);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out int pData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out float pData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(IntPtr ISteamUserStats, string pchName, uint nCurProgress, uint nMaxProgress);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(IntPtr ISteamUserStats);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(IntPtr ISteamUserStats);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(IntPtr ISteamUserStats, int nHistoryDays);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(IntPtr ISteamUserStats, ulong steamIDUser);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(IntPtr ISteamUserStats, bool bAchievementsToo);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(IntPtr ISteamUserStats, string pchName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat(IntPtr ISteamUserStats, string pchName, int nData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat0(IntPtr ISteamUserStats, string pchName, float fData);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(IntPtr ISteamUserStats, string pchName, float flCountThisSession, double dSessionLength);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(IntPtr ISteamUtils, string szFileName);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(IntPtr ISteamUtils, ulong hSteamAPICall);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(IntPtr ISteamUtils, ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, ref bool pbFailed);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(IntPtr ISteamUtils, out uint unIP, out ushort usPort);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(IntPtr ISteamUtils, StringBuilder pchText, uint cchText);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(IntPtr ISteamUtils, int iImage, IntPtr pubDest, int nDestBufferSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetImageSize(IntPtr ISteamUtils, int iImage, out uint pnWidth, out uint pnHeight);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(IntPtr ISteamUtils, ulong hSteamAPICall, ref bool pbFailed);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(IntPtr ISteamUtils, int nHorizontalInset, int nVerticalInset);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(IntPtr ISteamUtils, NotificationPosition eNotificationPosition);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(IntPtr ISteamUtils, bool bEnabled);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(IntPtr ISteamUtils, IntPtr pFunction);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(IntPtr ISteamUtils, GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(IntPtr ISteamVideo, uint unVideoAppID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(IntPtr ISteamVideo, uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamVideo_GetVideoURL(IntPtr ISteamVideo, uint unVideoAppID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(IntPtr ISteamVideo, IntPtr pnNumViewers);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RunCallbacks();

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_Shutdown();

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamGameServer_GetHSteamUser();

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamGameServer_RunCallbacks();

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamGameServer_Shutdown();

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamInternal_CreateInterface(string version);

				[DllImport("libsteam_api.so", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString);
			}
		}

		internal class Linux64 : Platform.Interface, IDisposable
		{
			internal IntPtr _ptr;

			public bool IsValid
			{
				get
				{
					return this._ptr != IntPtr.Zero;
				}
			}

			internal Linux64(IntPtr pointer)
			{
				this._ptr = pointer;
			}

			public virtual void Dispose()
			{
				this._ptr = IntPtr.Zero;
			}

			public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID);
			}

			public virtual int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
			}

			public virtual int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
			}

			public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
			}

			public virtual uint ISteamAppList_GetNumInstalledApps()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr);
			}

			public virtual bool ISteamApps_BGetDLCDataByIndex(int iDLC, ref uint pAppID, ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
			}

			public virtual bool ISteamApps_BIsAppInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsCybercafe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr);
			}

			public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsLowViolence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr);
			}

			public virtual bool ISteamApps_BIsSubscribed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr);
			}

			public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr);
			}

			public virtual bool ISteamApps_BIsVACBanned()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr);
			}

			public virtual int ISteamApps_GetAppBuildId()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr);
			}

			public virtual uint ISteamApps_GetAppInstallDir(uint appID, StringBuilder pchFolder, uint cchFolderBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
			}

			public virtual CSteamID ISteamApps_GetAppOwner()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr);
			}

			public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr);
			}

			public virtual bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
			}

			public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr);
			}

			public virtual int ISteamApps_GetDLCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr);
			}

			public virtual bool ISteamApps_GetDlcDownloadProgress(uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal);
			}

			public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID);
			}

			public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName);
			}

			public virtual uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
			}

			public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey);
			}

			public virtual void ISteamApps_InstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
			}

			public virtual bool ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly);
			}

			public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
			}

			public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
			}

			public virtual void ISteamApps_UninstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
			}

			public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe);
			}

			public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr);
			}

			public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe);
			}

			public virtual HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType);
			}

			public virtual HSteamPipe ISteamClient_CreateSteamPipe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr);
			}

			public virtual uint ISteamClient_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr);
			}

			public virtual IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGameServerStats(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGenericInterface(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamParentalSettings(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamParentalSettings(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
			}

			public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
			}

			public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
			}

			public virtual void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
			}

			public virtual void ISteamController_ActivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_ActivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			public virtual void ISteamController_DeactivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_DeactivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			public virtual void ISteamController_DeactivateAllActionSetLayers(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_DeactivateAllActionSetLayers(this._ptr, controllerHandle);
			}

			public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName);
			}

			public virtual int ISteamController_GetActiveActionSetLayers(ulong controllerHandle, IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetActiveActionSetLayers(this._ptr, controllerHandle, handlesOut);
			}

			public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ulong controllerHandle, ulong analogActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
			}

			public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName);
			}

			public virtual int ISteamController_GetAnalogActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
			}

			public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut);
			}

			public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex);
			}

			public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle);
			}

			public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ulong controllerHandle, ulong digitalActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
			}

			public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName);
			}

			public virtual int ISteamController_GetDigitalActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
			}

			public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle);
			}

			public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin);
			}

			public virtual SteamInputType ISteamController_GetInputTypeForHandle(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetInputTypeForHandle(this._ptr, controllerHandle);
			}

			public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle);
			}

			public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin);
			}

			public virtual bool ISteamController_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_Init(this._ptr);
			}

			public virtual void ISteamController_RunFrame()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
			}

			public virtual void ISteamController_SetLEDColor(ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
			}

			public virtual bool ISteamController_ShowAnalogActionOrigins(ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
			}

			public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle);
			}

			public virtual bool ISteamController_ShowDigitalActionOrigins(ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
			}

			public virtual bool ISteamController_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_Shutdown(this._ptr);
			}

			public virtual void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
			}

			public virtual void ISteamController_TriggerHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
			}

			public virtual void ISteamController_TriggerRepeatedHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
			}

			public virtual void ISteamController_TriggerVibration(ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
			}

			public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
			}

			public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
			}

			public virtual void ISteamFriends_ClearRichPresence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
			}

			public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(IntPtr psteamIDClans, int cClansToRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
			}

			public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex);
			}

			public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
			}

			public virtual bool ISteamFriends_GetClanActivityCounts(ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting);
			}

			public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan);
			}

			public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan);
			}

			public virtual int ISteamFriends_GetClanChatMessage(ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
			}

			public virtual int ISteamFriends_GetClanCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr);
			}

			public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
			}

			public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan);
			}

			public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend);
			}

			public virtual int ISteamFriends_GetCoplayFriendCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr);
			}

			public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID);
			}

			public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
			}

			public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags);
			}

			public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource);
			}

			public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
			}

			public virtual bool ISteamFriends_GetFriendGamePlayed(ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				FriendGameInfo_t.PackSmall packSmall = new FriendGameInfo_t.PackSmall();
				bool flag = Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref packSmall);
				pFriendGameInfo = packSmall;
				return flag;
			}

			public virtual int ISteamFriends_GetFriendMessage(ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
			}

			public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
			}

			public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend);
			}

			public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
			}

			public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
			}

			public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendsGroupCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr);
			}

			public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG);
			}

			public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID);
			}

			public virtual void ISteamFriends_GetFriendsGroupMembersList(short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
			}

			public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID);
			}

			public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetPersonaName()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr);
			}

			public virtual PersonaState ISteamFriends_GetPersonaState()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr);
			}

			public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer);
			}

			public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual uint ISteamFriends_GetUserRestrictions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr);
			}

			public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
			}

			public virtual bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
			}

			public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
			}

			public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat);
			}

			public virtual bool ISteamFriends_IsClanOfficialGameGroup(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_IsClanOfficialGameGroup(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_IsClanPublic(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_IsClanPublic(this._ptr, steamIDClan);
			}

			public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID);
			}

			public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
			}

			public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			public virtual bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
			}

			public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan);
			}

			public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
			}

			public virtual bool ISteamFriends_RequestUserInformation(ulong steamIDUser, bool bRequireNameOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
			}

			public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
			}

			public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, bool bSpeaking)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
			}

			public virtual bool ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled);
			}

			public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName);
			}

			public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
			}

			public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
			}

			public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan);
			}

			public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			public virtual bool ISteamGameServer_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr);
			}

			public virtual bool ISteamGameServer_BSecure()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr);
			}

			public virtual bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
			}

			public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			public virtual void ISteamGameServer_ClearAllKeyValues()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
			}

			public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer);
			}

			public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr);
			}

			public virtual void ISteamGameServer_EnableHeartbeats(bool bActive)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
			}

			public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
			}

			public virtual void ISteamGameServer_ForceHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
			}

			public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual void ISteamGameServer_GetGameplayStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
			}

			public virtual int ISteamGameServer_GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
			}

			public virtual uint ISteamGameServer_GetPublicIP()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr);
			}

			public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr);
			}

			public virtual CSteamID ISteamGameServer_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr);
			}

			public virtual bool ISteamGameServer_HandleIncomingPacket(IntPtr pData, int cbData, uint srcIP, ushort srcPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
			}

			public virtual bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
			}

			public virtual void ISteamGameServer_LogOff()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
			}

			public virtual void ISteamGameServer_LogOn(string pszToken)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
			}

			public virtual void ISteamGameServer_LogOnAnonymous()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
			}

			public virtual bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
			}

			public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
			}

			public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
			}

			public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
			}

			public virtual void ISteamGameServer_SetDedicatedServer(bool bDedicated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
			}

			public virtual void ISteamGameServer_SetGameData(string pchGameData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
			}

			public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
			}

			public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
			}

			public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
			}

			public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
			}

			public virtual void ISteamGameServer_SetMapName(string pszMapName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
			}

			public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
			}

			public virtual void ISteamGameServer_SetModDir(string pszModDir)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
			}

			public virtual void ISteamGameServer_SetPasswordProtected(bool bPasswordProtected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
			}

			public virtual void ISteamGameServer_SetProduct(string pszProduct)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
			}

			public virtual void ISteamGameServer_SetRegion(string pszRegion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
			}

			public virtual void ISteamGameServer_SetServerName(string pszServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
			}

			public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
			}

			public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
			}

			public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			public virtual bool ISteamGameServer_WasRestartRequested()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr);
			}

			public virtual bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
			}

			public virtual bool ISteamGameServerStats_GetUserAchievement(ulong steamIDUser, string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			public virtual bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
			}

			public virtual bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
			}

			public virtual bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
			}

			public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
			}

			public virtual void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
			}

			public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, bool bAllowed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
			}

			public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
			}

			public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
			}

			public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
			}

			public virtual void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
			}

			public virtual void ISteamHTMLSurface_Find(uint unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
			}

			public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
			}

			public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
			}

			public virtual bool ISteamHTMLSurface_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr);
			}

			public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, bool bResult)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
			}

			public virtual void ISteamHTMLSurface_KeyChar(uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_KeyDown(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_KeyUp(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
			}

			public virtual void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
			}

			public virtual void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
			}

			public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle, bool bBackgroundMode)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
			}

			public virtual void ISteamHTMLSurface_SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, bool bSecure, bool bHTTPOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
			}

			public virtual void ISteamHTMLSurface_SetDPIScalingFactor(uint unBrowserHandle, float flDPIScaling)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(this._ptr, unBrowserHandle, flDPIScaling);
			}

			public virtual void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, bool bHasKeyFocus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
			}

			public virtual void ISteamHTMLSurface_SetPageScaleFactor(uint unBrowserHandle, float flZoom, int nPointX, int nPointY)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
			}

			public virtual void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
			}

			public virtual void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			public virtual bool ISteamHTMLSurface_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr);
			}

			public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
			}

			public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify);
			}

			public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
			}

			public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut);
			}

			public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, ref bool pbWasTimedOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseBodyData(uint hRequest, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(uint hRequest, string pchHeaderName, out uint unResponseHeaderSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer);
			}

			public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
			}

			public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
			}

			public virtual bool ISteamHTTP_SetCookie(uint hCookieContainer, string pchHost, string pchUrl, string pchCookie)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(uint hRequest, string pchParamName, string pchParamValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(uint hRequest, string pchHeaderName, string pchHeaderValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(uint hRequest, bool bRequireVerifiedCertificate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
			}

			public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
			}

			public virtual bool ISteamInventory_AddPromoItems(ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
			}

			public virtual bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
			}

			public virtual bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
			}

			public virtual bool ISteamInventory_DeserializeResult(ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
			}

			public virtual void ISteamInventory_DestroyResult(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
			}

			public virtual bool ISteamInventory_ExchangeItems(ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
			}

			public virtual bool ISteamInventory_GenerateItems(ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle);
			}

			public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
			}

			public virtual bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize);
			}

			public virtual bool ISteamInventory_GetItemDefinitionProperty(int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			public virtual bool ISteamInventory_GetItemPrice(int iDefinition, out ulong pPrice)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetItemPrice(this._ptr, iDefinition, out pPrice);
			}

			public virtual bool ISteamInventory_GetItemsByID(ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
			}

			public virtual bool ISteamInventory_GetItemsWithPrices(IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetItemsWithPrices(this._ptr, pArrayItemDefs, pPrices, unArrayLength);
			}

			public virtual uint ISteamInventory_GetNumItemsWithPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetNumItemsWithPrices(this._ptr);
			}

			public virtual bool ISteamInventory_GetResultItemProperty(int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			public virtual bool ISteamInventory_GetResultItems(int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
			}

			public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle);
			}

			public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle);
			}

			public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle);
			}

			public virtual bool ISteamInventory_LoadItemDefinitions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr);
			}

			public virtual bool ISteamInventory_RemoveProperty(ulong handle, ulong nItemID, string pchPropertyName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_RemoveProperty(this._ptr, handle, nItemID, pchPropertyName);
			}

			public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID);
			}

			public virtual SteamAPICall_t ISteamInventory_RequestPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_RequestPrices(this._ptr);
			}

			public virtual void ISteamInventory_SendItemDropHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
			}

			public virtual bool ISteamInventory_SerializeResult(int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
			}

			public virtual bool ISteamInventory_SetProperty(ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_SetProperty(this._ptr, handle, nItemID, pchPropertyName, pchPropertyValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, bValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, long nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, nValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, flValue);
			}

			public virtual SteamAPICall_t ISteamInventory_StartPurchase(int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_StartPurchase(this._ptr, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			public virtual SteamInventoryUpdateHandle_t ISteamInventory_StartUpdateProperties()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_StartUpdateProperties(this._ptr);
			}

			public virtual bool ISteamInventory_SubmitUpdateProperties(ulong handle, ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_SubmitUpdateProperties(this._ptr, handle, ref pResultHandle);
			}

			public virtual bool ISteamInventory_TradeItems(ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
			}

			public virtual bool ISteamInventory_TransferItemQuantity(ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
			}

			public virtual bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
			}

			public virtual int ISteamMatchmaking_AddFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
			}

			public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			public virtual bool ISteamMatchmaking_GetFavoriteGame(int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
			}

			public virtual int ISteamMatchmaking_GetFavoriteGameCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby);
			}

			public virtual int ISteamMatchmaking_GetLobbyChatEntry(ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
			}

			public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
			}

			public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_GetLobbyGameServer(ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
			}

			public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(ulong steamIDLobby, ulong steamIDUser, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
			}

			public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby);
			}

			public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby);
			}

			public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_RemoveFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
			}

			public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr);
			}

			public virtual bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
			}

			public virtual bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
			}

			public virtual bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			public virtual void ISteamMatchmaking_SetLobbyGameServer(ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
			}

			public virtual bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, bool bLobbyJoinable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
			}

			public virtual void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
			}

			public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
			}

			public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
			}

			public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
			}

			public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
			}

			public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest);
			}

			public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
			}

			public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest);
			}

			public virtual HServerQuery ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
			}

			public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
			}

			public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(uint iApp, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerQuery ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual bool ISteamMusic_BIsEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr);
			}

			public virtual bool ISteamMusic_BIsPlaying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr);
			}

			public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr);
			}

			public virtual float ISteamMusic_GetVolume()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr);
			}

			public virtual void ISteamMusic_Pause()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
			}

			public virtual void ISteamMusic_Play()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMusic_Play(this._ptr);
			}

			public virtual void ISteamMusic_PlayNext()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
			}

			public virtual void ISteamMusic_PlayPrevious()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
			}

			public virtual void ISteamMusic_SetVolume(float flVolume)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
			}

			public virtual bool ISteamMusicRemote_BActivationSuccess(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr);
			}

			public virtual bool ISteamMusicRemote_EnableLooped(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlaylists(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlayNext(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlayPrevious(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnableQueue(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnableShuffled(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_PlaylistDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_PlaylistWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_QueueDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_QueueWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName);
			}

			public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr);
			}

			public virtual bool ISteamMusicRemote_ResetQueueEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr);
			}

			public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID);
			}

			public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID);
			}

			public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName);
			}

			public virtual bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
			}

			public virtual bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText);
			}

			public virtual bool ISteamMusicRemote_UpdateLooped(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus);
			}

			public virtual bool ISteamMusicRemote_UpdateShuffled(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue);
			}

			public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			public virtual bool ISteamNetworking_AllowP2PPacketRelay(bool bAllow)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow);
			}

			public virtual bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
			}

			public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
			}

			public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
			}

			public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
			}

			public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			public virtual bool ISteamNetworking_DestroySocket(uint hSocket, bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			public virtual bool ISteamNetworking_GetListenSocketInfo(uint hListenSocket, out uint pnIP, out ushort pnPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort);
			}

			public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket);
			}

			public virtual bool ISteamNetworking_GetP2PSessionState(ulong steamIDRemote, ref P2PSessionState_t pConnectionState)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				P2PSessionState_t.PackSmall packSmall = new P2PSessionState_t.PackSmall();
				bool flag = Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref packSmall);
				pConnectionState = packSmall;
				return flag;
			}

			public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket);
			}

			public virtual bool ISteamNetworking_GetSocketInfo(uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
			}

			public virtual bool ISteamNetworking_IsDataAvailable(uint hListenSocket, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
			}

			public virtual bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize);
			}

			public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel);
			}

			public virtual bool ISteamNetworking_ReadP2PPacket(IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
			}

			public virtual bool ISteamNetworking_RetrieveData(uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
			}

			public virtual bool ISteamNetworking_RetrieveDataFromSocket(uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
			}

			public virtual bool ISteamNetworking_SendDataOnSocket(uint hSocket, IntPtr pubData, uint cubData, bool bReliable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
			}

			public virtual bool ISteamNetworking_SendP2PPacket(ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
			}

			public virtual bool ISteamParentalSettings_BIsAppBlocked(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamParentalSettings_BIsAppBlocked(this._ptr, nAppID);
			}

			public virtual bool ISteamParentalSettings_BIsAppInBlockList(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamParentalSettings_BIsAppInBlockList(this._ptr, nAppID);
			}

			public virtual bool ISteamParentalSettings_BIsFeatureBlocked(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(this._ptr, eFeature);
			}

			public virtual bool ISteamParentalSettings_BIsFeatureInBlockList(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(this._ptr, eFeature);
			}

			public virtual bool ISteamParentalSettings_BIsParentalLockEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(this._ptr);
			}

			public virtual bool ISteamParentalSettings_BIsParentalLockLocked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(this._ptr);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle);
			}

			public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(WorkshopFileAction eAction, uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				SteamParamStringArray_t.PackSmall packSmall1 = new SteamParamStringArray_t.PackSmall();
				SteamAPICall_t steamAPICallT = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref packSmall, ref packSmall1);
				pTags = packSmall;
				pUserTags = packSmall1;
				return steamAPICallT;
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				SteamParamStringArray_t.PackSmall packSmall1 = new SteamParamStringArray_t.PackSmall();
				SteamAPICall_t steamAPICallT = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref packSmall, ref packSmall1);
				pRequiredTags = packSmall;
				pExcludedTags = packSmall1;
				return steamAPICallT;
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex);
			}

			public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile);
			}

			public virtual int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(string pchFile, uint nOffset, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
			}

			public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(ulong hReadCall, IntPtr pvBuffer, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(string pchFile, IntPtr pvData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle);
			}

			public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(ulong writeHandle, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
			}

			public virtual int ISteamRemoteStorage_GetCachedUGCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr);
			}

			public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent);
			}

			public virtual int ISteamRemoteStorage_GetFileCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr);
			}

			public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes);
			}

			public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile);
			}

			public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(ulong unPublishedFileId, uint unMaxSecondsOld)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes);
			}

			public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_GetUGCDetails(ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
			}

			public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr);
			}

			public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				SteamAPICall_t steamAPICallT = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref packSmall);
				pTags = packSmall;
				return steamAPICallT;
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				SteamAPICall_t steamAPICallT = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref packSmall, eWorkshopFileType);
				pTags = packSmall;
				return steamAPICallT;
			}

			public virtual void ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
			}

			public virtual bool ISteamRemoteStorage_SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(ulong unPublishedFileId, WorkshopFileAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(ulong hContent, string pchLocation, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
			}

			public virtual int ISteamRemoteStorage_UGCRead(ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(ulong updateHandle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ulong updateHandle, string pchPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ulong updateHandle, string pchChangeDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				bool flag = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref packSmall);
				pTags = packSmall;
				return flag;
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(ulong unPublishedFileId, bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
			}

			public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
			}

			public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
			}

			public virtual void ISteamScreenshots_HookScreenshots(bool bHook)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
			}

			public virtual bool ISteamScreenshots_IsScreenshotsHooked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr);
			}

			public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
			}

			public virtual bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
			}

			public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
			}

			public virtual void ISteamScreenshots_TriggerScreenshot()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
			}

			public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
			}

			public virtual SteamAPICall_t ISteamUGC_AddAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			public virtual SteamAPICall_t ISteamUGC_AddDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
			}

			public virtual bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
			}

			public virtual bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
			}

			public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
			}

			public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			public virtual bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
			}

			public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
			}

			public virtual bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
			}

			public virtual SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
			}

			public virtual SteamAPICall_t ISteamUGC_DeleteItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_DeleteItem(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, bool bHighPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
			}

			public virtual SteamAPICall_t ISteamUGC_GetAppDependencies(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetAppDependencies(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_GetItemDownloadInfo(ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal);
			}

			public virtual bool ISteamUGC_GetItemInstallInfo(ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
			}

			public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID);
			}

			public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal);
			}

			public virtual uint ISteamUGC_GetNumSubscribedItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr);
			}

			public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
			}

			public virtual bool ISteamUGC_GetQueryUGCChildren(ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
			}

			public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
			}

			public virtual bool ISteamUGC_GetQueryUGCMetadata(ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
			}

			public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
			}

			public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
			}

			public virtual bool ISteamUGC_GetQueryUGCPreviewURL(ulong handle, uint index, StringBuilder pchURL, uint cchURLSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
			}

			public virtual bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				SteamUGCDetails_t.PackSmall packSmall = new SteamUGCDetails_t.PackSmall();
				bool flag = Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref packSmall);
				pDetails = packSmall;
				return flag;
			}

			public virtual bool ISteamUGC_GetQueryUGCStatistic(ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
			}

			public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
			}

			public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_RemoveAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
			}

			public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
			}

			public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
			}

			public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle);
			}

			public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
			}

			public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
			}

			public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
			}

			public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
			}

			public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
			}

			public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
			}

			public virtual bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				bool flag = Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref packSmall);
				pTags = packSmall;
				return flag;
			}

			public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
			}

			public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
			}

			public virtual bool ISteamUGC_SetItemVisibility(ulong handle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
			}

			public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
			}

			public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, bool bMatchAnyTag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
			}

			public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
			}

			public virtual bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle, bool bReturnAdditionalPreviews)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
			}

			public virtual bool ISteamUGC_SetReturnChildren(ulong handle, bool bReturnChildren)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
			}

			public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, bool bReturnKeyValueTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
			}

			public virtual bool ISteamUGC_SetReturnLongDescription(ulong handle, bool bReturnLongDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
			}

			public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, bool bReturnMetadata)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
			}

			public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, bool bReturnOnlyIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
			}

			public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
			}

			public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, bool bReturnTotalOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
			}

			public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
			}

			public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
			}

			public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
			}

			public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
			}

			public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID);
			}

			public virtual void ISteamUGC_SuspendDownloads(bool bSuspend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
			}

			public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
			}

			public virtual bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
			}

			public virtual void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
			}

			public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			public virtual bool ISteamUser_BIsBehindNAT()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneIdentifying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneRequiringVerification()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneVerified()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr);
			}

			public virtual bool ISteamUser_BIsTwoFactorEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr);
			}

			public virtual bool ISteamUser_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr);
			}

			public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			public virtual VoiceResult ISteamUser_DecompressVoice(IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
			}

			public virtual void ISteamUser_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
			}

			public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual VoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			public virtual bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
			}

			public virtual HSteamUser ISteamUser_GetHSteamUser()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr);
			}

			public virtual int ISteamUser_GetPlayerSteamLevel()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr);
			}

			public virtual CSteamID ISteamUser_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr);
			}

			public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
			}

			public virtual VoiceResult ISteamUser_GetVoice(bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr);
			}

			public virtual int ISteamUser_InitiateGameConnection(IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
			}

			public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
			}

			public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL);
			}

			public virtual void ISteamUser_StartVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
			}

			public virtual void ISteamUser_StopVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
			}

			public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
			}

			public virtual void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
			}

			public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
			}

			public virtual bool ISteamUserStats_ClearAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName);
			}

			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
			}

			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
			}

			public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName);
			}

			public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
			}

			public virtual bool ISteamUserStats_GetAchievement(string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
			}

			public virtual bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent);
			}

			public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(string pchName, ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
			}

			public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
			}

			public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName);
			}

			public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement);
			}

			public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				LeaderboardEntry_t.PackSmall packSmall = new LeaderboardEntry_t.PackSmall();
				bool flag = Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref packSmall, pDetails, cDetailsMax);
				pLeaderboardEntry = packSmall;
				return flag;
			}

			public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData);
			}

			public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData);
			}

			public virtual int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
			}

			public virtual int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
			}

			public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard);
			}

			public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard);
			}

			public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard);
			}

			public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard);
			}

			public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			public virtual uint ISteamUserStats_GetNumAchievements()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr);
			}

			public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetUserAchievement(ulong steamIDUser, string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(ulong steamIDUser, string pchName, ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
			}

			public virtual bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamUserStats_IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
			}

			public virtual bool ISteamUserStats_RequestCurrentStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamUserStats_ResetAllStats(bool bAchievementsToo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo);
			}

			public virtual bool ISteamUserStats_SetAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName);
			}

			public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
			}

			public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
			}

			public virtual bool ISteamUserStats_StoreStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr);
			}

			public virtual bool ISteamUserStats_UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
			}

			public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
			}

			public virtual bool ISteamUtils_BOverlayNeedsPresent()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName);
			}

			public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall);
			}

			public virtual bool ISteamUtils_GetAPICallResult(ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
			}

			public virtual uint ISteamUtils_GetAppID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr);
			}

			public virtual Universe ISteamUtils_GetConnectedUniverse()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr);
			}

			public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort);
			}

			public virtual byte ISteamUtils_GetCurrentBatteryPower()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr);
			}

			public virtual bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
			}

			public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr);
			}

			public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
			}

			public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight);
			}

			public virtual uint ISteamUtils_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr);
			}

			public virtual IntPtr ISteamUtils_GetIPCountry()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr);
			}

			public virtual uint ISteamUtils_GetSecondsSinceAppActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr);
			}

			public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr);
			}

			public virtual uint ISteamUtils_GetServerRealTime()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr);
			}

			public virtual IntPtr ISteamUtils_GetSteamUILanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr);
			}

			public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
			}

			public virtual bool ISteamUtils_IsOverlayEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr);
			}

			public virtual bool ISteamUtils_IsSteamInBigPictureMode()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr);
			}

			public virtual bool ISteamUtils_IsSteamRunningInVR()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr);
			}

			public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr);
			}

			public virtual void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
			}

			public virtual void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
			}

			public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled(bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
			}

			public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
			}

			public virtual bool ISteamUtils_ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
			}

			public virtual void ISteamUtils_StartVRDashboard()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
			}

			public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
			}

			public virtual bool ISteamVideo_GetOPFStringForApp(uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
			}

			public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
			}

			public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers);
			}

			public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
			{
				return Platform.Linux64.Native.SteamAPI_GetHSteamPipe();
			}

			public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
			{
				return Platform.Linux64.Native.SteamAPI_GetHSteamUser();
			}

			public virtual bool SteamApi_SteamAPI_Init()
			{
				return Platform.Linux64.Native.SteamAPI_Init();
			}

			public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
			{
				Platform.Linux64.Native.SteamAPI_RegisterCallback(pCallback, callback);
			}

			public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Linux64.Native.SteamAPI_RegisterCallResult(pCallback, callback);
			}

			public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
			{
				return Platform.Linux64.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
			}

			public virtual void SteamApi_SteamAPI_RunCallbacks()
			{
				Platform.Linux64.Native.SteamAPI_RunCallbacks();
			}

			public virtual void SteamApi_SteamAPI_Shutdown()
			{
				Platform.Linux64.Native.SteamAPI_Shutdown();
			}

			public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
			{
				Platform.Linux64.Native.SteamAPI_UnregisterCallback(pCallback);
			}

			public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Linux64.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
			}

			public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
			{
				return Platform.Linux64.Native.SteamGameServer_GetHSteamPipe();
			}

			public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
			{
				return Platform.Linux64.Native.SteamGameServer_GetHSteamUser();
			}

			public virtual void SteamApi_SteamGameServer_RunCallbacks()
			{
				Platform.Linux64.Native.SteamGameServer_RunCallbacks();
			}

			public virtual void SteamApi_SteamGameServer_Shutdown()
			{
				Platform.Linux64.Native.SteamGameServer_Shutdown();
			}

			public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
			{
				return Platform.Linux64.Native.SteamInternal_CreateInterface(version);
			}

			public virtual bool SteamApi_SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString)
			{
				return Platform.Linux64.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
			}

			internal static class Native
			{
				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_GetHSteamUser();

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_Init();

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(IntPtr ISteamAppList, uint nAppID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(IntPtr ISteamAppList, uint nAppID, StringBuilder pchDirectory, int cchNameMax);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppName(IntPtr ISteamAppList, uint nAppID, StringBuilder pchName, int cchNameMax);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(IntPtr ISteamAppList, IntPtr pvecAppID, uint unMaxAppIDs);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(IntPtr ISteamApps, int iDLC, ref uint pAppID, ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(IntPtr ISteamApps, uint appID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(IntPtr ISteamApps, uint appID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(IntPtr ISteamApps, uint appID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(IntPtr ISteamApps);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(IntPtr ISteamApps, uint appID, StringBuilder pchFolder, uint cchFolderBufferSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(IntPtr ISteamApps);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(IntPtr ISteamApps, StringBuilder pchName, int cchNameBufferSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(IntPtr ISteamApps, uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(IntPtr ISteamApps, uint nAppID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(IntPtr ISteamApps, string pszFileName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(IntPtr ISteamApps, uint appID, IntPtr pvecDepots, uint cMaxDepots);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(IntPtr ISteamApps, string pchKey);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(IntPtr ISteamApps, bool bMissingFilesOnly);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(IntPtr ISteamApps);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(IntPtr ISteamApps, uint nAppID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(IntPtr ISteamClient, int hSteamPipe);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(IntPtr ISteamClient);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(IntPtr ISteamClient, int hSteamPipe);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(IntPtr ISteamClient, out int phSteamPipe, AccountType eAccountType);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamParentalSettings(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(IntPtr ISteamClient, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_ReleaseUser(IntPtr ISteamClient, int hSteamPipe, int hUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(IntPtr ISteamClient, uint unIP, ushort usPort);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(IntPtr ISteamClient, IntPtr pFunction);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_ActivateActionSet(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_ActivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_DeactivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_DeactivateAllActionSetLayers(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(IntPtr ISteamController, string pszActionSetName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetActiveActionSetLayers(IntPtr ISteamController, ulong controllerHandle, IntPtr handlesOut);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(IntPtr ISteamController, string pszActionName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetConnectedControllers(IntPtr ISteamController, IntPtr handlesOut);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(IntPtr ISteamController, int nIndex);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(IntPtr ISteamController, string pszActionName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(IntPtr ISteamController, ulong ulControllerHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_SetLEDColor(IntPtr ISteamController, ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(IntPtr ISteamController, ulong controllerHandle, ulong eAction);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerVibration(IntPtr ISteamController, ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(IntPtr ISteamFriends, string pchDialog);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(IntPtr ISteamFriends, ulong steamIDLobby);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(IntPtr ISteamFriends, uint nAppID, OverlayToStoreFlag eFlag);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(IntPtr ISteamFriends, string pchDialog, ulong steamID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(IntPtr ISteamFriends, string pchURL);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(IntPtr ISteamFriends, IntPtr psteamIDClans, int cClansToRequest);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(IntPtr ISteamFriends, uint unStartIndex);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(IntPtr ISteamFriends, ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(IntPtr ISteamFriends, int iClan);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iOfficer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(IntPtr ISteamFriends, int iCoplayFriend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(IntPtr ISteamFriends, ulong steamID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(IntPtr ISteamFriends, int iFriend, int iFriendFlags);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCount(IntPtr ISteamFriends, int iFriendFlags);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(IntPtr ISteamFriends, ulong steamIDSource);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(IntPtr ISteamFriends, ulong steamIDSource, int iFriend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(IntPtr ISteamFriends, ulong steamIDFriend, ref FriendGameInfo_t.PackSmall pFriendGameInfo);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(IntPtr ISteamFriends, ulong steamIDFriend, int iPersonaName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend, string pchKey);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(IntPtr ISteamFriends, ulong steamIDFriend, int iKey);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(IntPtr ISteamFriends, int iFG);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(IntPtr ISteamFriends, short friendsGroupID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(IntPtr ISteamFriends, short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(IntPtr ISteamFriends, short friendsGroupID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(IntPtr ISteamFriends);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(IntPtr ISteamFriends, ulong steamIDPlayer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_HasFriend(IntPtr ISteamFriends, ulong steamIDFriend, int iFriendFlags);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(IntPtr ISteamFriends, ulong steamIDFriend, string pchConnectString);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(IntPtr ISteamFriends, ulong steamIDClanChat, ulong steamIDUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanPublic(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(IntPtr ISteamFriends, ulong steamID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(IntPtr ISteamFriends, ulong steamIDUser, ulong steamIDSource);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, string pchMsgToSend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(IntPtr ISteamFriends, ulong steamIDUser, bool bRequireNameOnly);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, string pchText);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(IntPtr ISteamFriends, ulong steamIDUser, bool bSpeaking);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(IntPtr ISteamFriends, bool bInterceptEnabled);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(IntPtr ISteamFriends, string pchPersonaName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(IntPtr ISteamFriends, ulong steamIDUserPlayedWith);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(IntPtr ISteamFriends, string pchKey, string pchValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(IntPtr ISteamGameServer, ulong steamIDClan);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(IntPtr ISteamGameServer, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(IntPtr ISteamGameServer, ulong steamIDUser, string pchPlayerName, uint uScore);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(IntPtr ISteamGameServer, uint hAuthTicket);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(IntPtr ISteamGameServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(IntPtr ISteamGameServer, ulong steamIDNewPlayer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(IntPtr ISteamGameServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(IntPtr ISteamGameServer, bool bActive);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(IntPtr ISteamGameServer, ulong steamID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(IntPtr ISteamGameServer, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(IntPtr ISteamGameServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(IntPtr ISteamGameServer, IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(IntPtr ISteamGameServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(IntPtr ISteamGameServer, IntPtr pData, int cbData, uint srcIP, ushort srcPort);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(IntPtr ISteamGameServer, uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOn(IntPtr ISteamGameServer, string pszToken);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(IntPtr ISteamGameServer, ulong steamIDUser, ulong steamIDGroup);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(IntPtr ISteamGameServer, uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(IntPtr ISteamGameServer, ulong steamIDUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(IntPtr ISteamGameServer, int cBotplayers);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(IntPtr ISteamGameServer, bool bDedicated);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameData(IntPtr ISteamGameServer, string pchGameData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(IntPtr ISteamGameServer, string pszGameDescription);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameTags(IntPtr ISteamGameServer, string pchGameTags);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(IntPtr ISteamGameServer, int iHeartbeatInterval);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(IntPtr ISteamGameServer, string pKey, string pValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetMapName(IntPtr ISteamGameServer, string pszMapName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(IntPtr ISteamGameServer, int cPlayersMax);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetModDir(IntPtr ISteamGameServer, string pszModDir);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(IntPtr ISteamGameServer, bool bPasswordProtected);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetProduct(IntPtr ISteamGameServer, string pszProduct);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetRegion(IntPtr ISteamGameServer, string pszRegion);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetServerName(IntPtr ISteamGameServer, string pszServerName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(IntPtr ISteamGameServer, ushort unSpectatorPort);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(IntPtr ISteamGameServer, string pszSpectatorServerName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(IntPtr ISteamGameServer, ulong steamID, uint appID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(IntPtr ISteamGameServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, ref bool pbAchieved);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out int pData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out float pData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, int nData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float fData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchKey, string pchValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bAllowed);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(IntPtr ISteamHTMLSurface, string pchUserAgent, string pchUserCSS);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(IntPtr ISteamHTMLSurface);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchScript);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_Find(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bResult);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchURL, string pchPostData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int nDelta);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_Reload(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bBackgroundMode);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(IntPtr ISteamHTMLSurface, string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, bool bSecure, bool bHTTPOnly);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flDPIScaling);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bHasKeyFocus);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flZoom, int nPointX, int nPointY);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint unWidth, uint unHeight);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(IntPtr ISteamHTTP, bool bAllowResponsesToModify);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(IntPtr ISteamHTTP, HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(IntPtr ISteamHTTP, uint hRequest, out float pflPercentOut);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(IntPtr ISteamHTTP, uint hRequest, ref bool pbWasTimedOut);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(IntPtr ISteamHTTP, uint hRequest, out byte pBodyDataBuffer, uint unBufferSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(IntPtr ISteamHTTP, uint hRequest, out uint unBodySize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out uint unResponseHeaderSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(IntPtr ISteamHTTP, uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(IntPtr ISteamHTTP, uint hCookieContainer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetCookie(IntPtr ISteamHTTP, uint hCookieContainer, string pchHost, string pchUrl, string pchCookie);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(IntPtr ISteamHTTP, uint hRequest, uint unMilliseconds);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(IntPtr ISteamHTTP, uint hRequest, ulong ulContextValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(IntPtr ISteamHTTP, uint hRequest, uint hCookieContainer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(IntPtr ISteamHTTP, uint hRequest, string pchParamName, string pchParamValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, string pchHeaderValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(IntPtr ISteamHTTP, uint hRequest, uint unTimeoutSeconds);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(IntPtr ISteamHTTP, uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(IntPtr ISteamHTTP, uint hRequest, bool bRequireVerifiedCertificate);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(IntPtr ISteamHTTP, uint hRequest, string pchUserAgentInfo);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(IntPtr ISteamInventory, ref int pResultHandle, int itemDef);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(IntPtr ISteamInventory, int resultHandle, ulong steamIDExpected);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(IntPtr ISteamInventory, ref int pResultHandle, ulong itemConsume, uint unQuantity);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(IntPtr ISteamInventory, ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamInventory_DestroyResult(IntPtr ISteamInventory, int resultHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GenerateItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetAllItems(IntPtr ISteamInventory, ref int pResultHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(IntPtr ISteamInventory, ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(IntPtr ISteamInventory, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(IntPtr ISteamInventory, int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemPrice(IntPtr ISteamInventory, int iDefinition, out ulong pPrice);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(IntPtr ISteamInventory, ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsWithPrices(IntPtr ISteamInventory, IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamInventory_GetNumItemsWithPrices(IntPtr ISteamInventory);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(IntPtr ISteamInventory, int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItems(IntPtr ISteamInventory, int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(IntPtr ISteamInventory, int resultHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(IntPtr ISteamInventory, int resultHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(IntPtr ISteamInventory, ref int pResultHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(IntPtr ISteamInventory);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_RemoveProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(IntPtr ISteamInventory, ulong steamID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(IntPtr ISteamInventory);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(IntPtr ISteamInventory);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SerializeResult(IntPtr ISteamInventory, int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, bool bValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, long nValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, float flValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(IntPtr ISteamInventory, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(IntPtr ISteamInventory);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SubmitUpdateProperties(IntPtr ISteamInventory, ulong handle, ref int pResultHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TradeItems(IntPtr ISteamInventory, ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(IntPtr ISteamInventory, ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(IntPtr ISteamInventory, ref int pResultHandle, int dropListDefinition);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(IntPtr ISteamMatchmaking, LobbyDistanceFilter eLobbyDistanceFilter);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(IntPtr ISteamMatchmaking, int nSlotsAvailable);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToBeCloseTo);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(IntPtr ISteamMatchmaking, int cMaxResults);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(IntPtr ISteamMatchmaking, LobbyType eLobbyType, int cMaxMembers);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(IntPtr ISteamMatchmaking, int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(IntPtr ISteamMatchmaking);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(IntPtr ISteamMatchmaking, int iLobby);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iMember);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDUser, string pchKey);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDInvitee);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(IntPtr ISteamMatchmaking);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(IntPtr ISteamMatchmaking, ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDLobbyDependent);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(IntPtr ISteamMatchmaking, ulong steamIDLobby, bool bLobbyJoinable);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby, int cMaxMembers);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDNewOwner);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(IntPtr ISteamMatchmaking, ulong steamIDLobby, LobbyType eLobbyType);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(IntPtr ISteamMatchmakingServers, int hServerQuery);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(IntPtr ISteamMatchmakingServers, IntPtr hServerListRequest);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(IntPtr ISteamMusic);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_SetVolume(IntPtr ISteamMusic, float flVolume);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(IntPtr ISteamMusicRemote, bool bAvailable);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(IntPtr ISteamMusicRemote, string pchName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(IntPtr ISteamMusicRemote, int nID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(IntPtr ISteamMusicRemote, int nID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(IntPtr ISteamMusicRemote, string pchDisplayName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(IntPtr ISteamMusicRemote, int nValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(IntPtr ISteamMusicRemote, string pchText);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(IntPtr ISteamMusicRemote, AudioPlayback_Status nStatus);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(IntPtr ISteamMusicRemote, float flValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(IntPtr ISteamNetworking, bool bAllow);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(IntPtr ISteamNetworking, ulong steamIDRemote, int nChannel);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(IntPtr ISteamNetworking, uint nIP, ushort nPort, int nTimeoutSec);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(IntPtr ISteamNetworking, int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(IntPtr ISteamNetworking, ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(IntPtr ISteamNetworking, uint hSocket, bool bNotifyRemoteEnd);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(IntPtr ISteamNetworking, uint hSocket, bool bNotifyRemoteEnd);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(IntPtr ISteamNetworking, uint hListenSocket, out uint pnIP, out ushort pnPort);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(IntPtr ISteamNetworking, uint hSocket);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(IntPtr ISteamNetworking, ulong steamIDRemote, ref P2PSessionState_t.PackSmall pConnectionState);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(IntPtr ISteamNetworking, uint hSocket);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(IntPtr ISteamNetworking, uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(IntPtr ISteamNetworking, uint hListenSocket, out uint pcubMsgSize, ref uint phSocket);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(IntPtr ISteamNetworking, uint hSocket, out uint pcubMsgSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(IntPtr ISteamNetworking, out uint pcubMsgSize, int nChannel);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(IntPtr ISteamNetworking, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(IntPtr ISteamNetworking, uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubData, uint cubData, bool bReliable);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(IntPtr ISteamNetworking, ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(IntPtr ISteamParentalSettings, uint nAppID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(IntPtr ISteamParentalSettings, uint nAppID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(IntPtr ISteamParentalSettings);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(IntPtr ISteamParentalSettings);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(IntPtr ISteamRemoteStorage, ulong updateHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(IntPtr ISteamRemoteStorage, WorkshopFileAction eAction, uint unStartIndex);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(IntPtr ISteamRemoteStorage, WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t.PackSmall pTags, ref SteamParamStringArray_t.PackSmall pUserTags);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(IntPtr ISteamRemoteStorage, ulong steamId, uint unStartIndex, ref SteamParamStringArray_t.PackSmall pRequiredTags, ref SteamParamStringArray_t.PackSmall pExcludedTags);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubDataToRead);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(IntPtr ISteamRemoteStorage, string pchFile, uint nOffset, uint cubToRead);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(IntPtr ISteamRemoteStorage, ulong hReadCall, IntPtr pvBuffer, uint cubToRead);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, uint cubData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(IntPtr ISteamRemoteStorage, ulong writeHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(IntPtr ISteamRemoteStorage, ulong writeHandle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(IntPtr ISteamRemoteStorage, ulong writeHandle, IntPtr pvData, int cubData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(IntPtr ISteamRemoteStorage);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(IntPtr ISteamRemoteStorage, int iCachedContent);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(IntPtr ISteamRemoteStorage);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(IntPtr ISteamRemoteStorage, int iFile, out int pnFileSizeInBytes);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, uint unMaxSecondsOld);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(IntPtr ISteamRemoteStorage, out ulong pnTotalBytes, out ulong puAvailableBytes);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(IntPtr ISteamRemoteStorage, ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(IntPtr ISteamRemoteStorage, ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(IntPtr ISteamRemoteStorage);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(IntPtr ISteamRemoteStorage);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(IntPtr ISteamRemoteStorage, WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t.PackSmall pTags);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(IntPtr ISteamRemoteStorage, string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t.PackSmall pTags, WorkshopFileType eWorkshopFileType);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(IntPtr ISteamRemoteStorage, bool bEnabled);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, WorkshopFileAction eAction);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(IntPtr ISteamRemoteStorage, ulong hContent, uint unPriority);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(IntPtr ISteamRemoteStorage, ulong hContent, string pchLocation, uint unPriority);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(IntPtr ISteamRemoteStorage, ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchDescription);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchFile);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchPreviewFile);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchChangeDescription);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(IntPtr ISteamRemoteStorage, ulong updateHandle, ref SteamParamStringArray_t.PackSmall pTags);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchTitle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(IntPtr ISteamRemoteStorage, ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, bool bVoteUp);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(IntPtr ISteamScreenshots, string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(IntPtr ISteamScreenshots, VRScreenshotType eType, string pchFilename, string pchVRFilename);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(IntPtr ISteamScreenshots, bool bHook);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(IntPtr ISteamScreenshots);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(IntPtr ISteamScreenshots, uint hScreenshot, string pchLocation);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(IntPtr ISteamScreenshots, uint hScreenshot, ulong unPublishedFileID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_TagUser(IntPtr ISteamScreenshots, uint hScreenshot, ulong steamID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(IntPtr ISteamScreenshots);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(IntPtr ISteamScreenshots, IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(IntPtr ISteamUGC, ulong handle, string pchKey, string pchValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(IntPtr ISteamUGC, ulong handle, string pszPreviewFile, ItemPreviewType type);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(IntPtr ISteamUGC, ulong handle, string pszVideoID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(IntPtr ISteamUGC, ulong handle, string pKey, string pValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(IntPtr ISteamUGC, uint unWorkshopDepotID, string pszFolder);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(IntPtr ISteamUGC, uint nConsumerAppId, WorkshopFileType eFileType);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(IntPtr ISteamUGC, UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(IntPtr ISteamUGC, uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_DownloadItem(IntPtr ISteamUGC, ulong nPublishedFileID, bool bHighPriority);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetItemState(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(IntPtr ISteamUGC, ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(IntPtr ISteamUGC, ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(IntPtr ISteamUGC, ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(IntPtr ISteamUGC, ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchURL, uint cchURLSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(IntPtr ISteamUGC, ulong handle, uint index, ref SteamUGCDetails_t.PackSmall pDetails);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(IntPtr ISteamUGC, ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint cMaxEntries);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(IntPtr ISteamUGC, ulong handle, string pchKey);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(IntPtr ISteamUGC, ulong nPublishedFileID, uint unMaxAgeSeconds);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(IntPtr ISteamUGC, ulong handle, uint unMaxAgeSeconds);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(IntPtr ISteamUGC, ulong handle, string pMatchCloudFileName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemContent(IntPtr ISteamUGC, ulong handle, string pszContentFolder);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(IntPtr ISteamUGC, ulong handle, string pchDescription);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(IntPtr ISteamUGC, ulong handle, string pchMetaData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(IntPtr ISteamUGC, ulong handle, string pszPreviewFile);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTags(IntPtr ISteamUGC, ulong updateHandle, ref SteamParamStringArray_t.PackSmall pTags);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(IntPtr ISteamUGC, ulong handle, string pchTitle);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(IntPtr ISteamUGC, ulong handle, RemoteStoragePublishedFileVisibility eVisibility);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(IntPtr ISteamUGC, ulong handle, bool bMatchAnyTag);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(IntPtr ISteamUGC, ulong handle, uint unDays);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(IntPtr ISteamUGC, ulong handle, bool bReturnAdditionalPreviews);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(IntPtr ISteamUGC, ulong handle, bool bReturnChildren);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(IntPtr ISteamUGC, ulong handle, bool bReturnKeyValueTags);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(IntPtr ISteamUGC, ulong handle, bool bReturnLongDescription);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(IntPtr ISteamUGC, ulong handle, bool bReturnMetadata);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(IntPtr ISteamUGC, ulong handle, bool bReturnOnlyIDs);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(IntPtr ISteamUGC, ulong handle, uint unDays);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(IntPtr ISteamUGC, ulong handle, bool bReturnTotalOnly);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetSearchText(IntPtr ISteamUGC, ulong handle, string pSearchText);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID, bool bVoteUp);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(IntPtr ISteamUGC, uint nConsumerAppId, ulong nPublishedFileID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(IntPtr ISteamUGC);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(IntPtr ISteamUGC, ulong handle, string pchChangeNote);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(IntPtr ISteamUGC, bool bSuspend);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(IntPtr ISteamUGC, ulong handle, uint index, string pszPreviewFile);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(IntPtr ISteamUGC, ulong handle, uint index, string pszVideoID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_AdvertiseGame(IntPtr ISteamUser, ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(IntPtr ISteamUser, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(IntPtr ISteamUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(IntPtr ISteamUser, uint hAuthTicket);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(IntPtr ISteamUser, IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_EndAuthSession(IntPtr ISteamUser, ulong steamID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(IntPtr ISteamUser, out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(IntPtr ISteamUser, int nSeries, bool bFoil);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(IntPtr ISteamUser, StringBuilder pchBuffer, int cubBuffer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(IntPtr ISteamUser, bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(IntPtr ISteamUser, IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(IntPtr ISteamUser, IntPtr pDataToInclude, int cbDataToInclude);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(IntPtr ISteamUser, string pchRedirectURL);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(IntPtr ISteamUser, uint unIPServer, ushort usPortServer);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(IntPtr ISteamUser, ulong gameID, int eAppUsageEvent, string pchExtraInfo);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(IntPtr ISteamUser, ulong steamID, uint appID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(IntPtr ISteamUserStats, ulong hSteamLeaderboard, ulong hUGC);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(IntPtr ISteamUserStats, string pchName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(IntPtr ISteamUserStats, ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(IntPtr ISteamUserStats, string pchName, ref bool pbAchieved);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(IntPtr ISteamUserStats, string pchName, out float pflPercent);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(IntPtr ISteamUserStats, string pchName, ref bool pbAchieved, out uint punUnlockTime);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(IntPtr ISteamUserStats, string pchName, string pchKey);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(IntPtr ISteamUserStats, string pchName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(IntPtr ISteamUserStats, uint iAchievement);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(IntPtr ISteamUserStats, ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t.PackSmall pLeaderboardEntry, IntPtr pDetails, int cDetailsMax);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(IntPtr ISteamUserStats, string pchStatName, out long pData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(IntPtr ISteamUserStats, string pchStatName, out double pData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(IntPtr ISteamUserStats, string pchStatName, out long pData, uint cubData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(IntPtr ISteamUserStats, string pchStatName, out double pData, uint cubData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr ISteamUserStats, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(IntPtr ISteamUserStats, int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(IntPtr ISteamUserStats);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(IntPtr ISteamUserStats);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat(IntPtr ISteamUserStats, string pchName, out int pData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat0(IntPtr ISteamUserStats, string pchName, out float pData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, ref bool pbAchieved);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, ref bool pbAchieved, out uint punUnlockTime);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out int pData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out float pData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(IntPtr ISteamUserStats, string pchName, uint nCurProgress, uint nMaxProgress);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(IntPtr ISteamUserStats);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(IntPtr ISteamUserStats);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(IntPtr ISteamUserStats, int nHistoryDays);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(IntPtr ISteamUserStats, ulong steamIDUser);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(IntPtr ISteamUserStats, bool bAchievementsToo);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(IntPtr ISteamUserStats, string pchName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat(IntPtr ISteamUserStats, string pchName, int nData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat0(IntPtr ISteamUserStats, string pchName, float fData);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(IntPtr ISteamUserStats, string pchName, float flCountThisSession, double dSessionLength);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(IntPtr ISteamUtils, string szFileName);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(IntPtr ISteamUtils, ulong hSteamAPICall);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(IntPtr ISteamUtils, ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, ref bool pbFailed);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(IntPtr ISteamUtils, out uint unIP, out ushort usPort);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(IntPtr ISteamUtils, StringBuilder pchText, uint cchText);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(IntPtr ISteamUtils, int iImage, IntPtr pubDest, int nDestBufferSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetImageSize(IntPtr ISteamUtils, int iImage, out uint pnWidth, out uint pnHeight);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(IntPtr ISteamUtils, ulong hSteamAPICall, ref bool pbFailed);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(IntPtr ISteamUtils, int nHorizontalInset, int nVerticalInset);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(IntPtr ISteamUtils, NotificationPosition eNotificationPosition);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(IntPtr ISteamUtils, bool bEnabled);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(IntPtr ISteamUtils, IntPtr pFunction);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(IntPtr ISteamUtils, GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(IntPtr ISteamVideo, uint unVideoAppID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(IntPtr ISteamVideo, uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamVideo_GetVideoURL(IntPtr ISteamVideo, uint unVideoAppID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(IntPtr ISteamVideo, IntPtr pnNumViewers);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RunCallbacks();

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_Shutdown();

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamGameServer_GetHSteamUser();

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamGameServer_RunCallbacks();

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamGameServer_Shutdown();

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamInternal_CreateInterface(string version);

				[DllImport("libsteam_api64.so", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString);
			}
		}

		internal class Mac : Platform.Interface, IDisposable
		{
			internal IntPtr _ptr;

			public bool IsValid
			{
				get
				{
					return this._ptr != IntPtr.Zero;
				}
			}

			internal Mac(IntPtr pointer)
			{
				this._ptr = pointer;
			}

			public virtual void Dispose()
			{
				this._ptr = IntPtr.Zero;
			}

			public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID);
			}

			public virtual int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
			}

			public virtual int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
			}

			public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
			}

			public virtual uint ISteamAppList_GetNumInstalledApps()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr);
			}

			public virtual bool ISteamApps_BGetDLCDataByIndex(int iDLC, ref uint pAppID, ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
			}

			public virtual bool ISteamApps_BIsAppInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsCybercafe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr);
			}

			public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsLowViolence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr);
			}

			public virtual bool ISteamApps_BIsSubscribed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr);
			}

			public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr);
			}

			public virtual bool ISteamApps_BIsVACBanned()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr);
			}

			public virtual int ISteamApps_GetAppBuildId()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr);
			}

			public virtual uint ISteamApps_GetAppInstallDir(uint appID, StringBuilder pchFolder, uint cchFolderBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
			}

			public virtual CSteamID ISteamApps_GetAppOwner()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr);
			}

			public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr);
			}

			public virtual bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
			}

			public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr);
			}

			public virtual int ISteamApps_GetDLCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr);
			}

			public virtual bool ISteamApps_GetDlcDownloadProgress(uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal);
			}

			public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID);
			}

			public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName);
			}

			public virtual uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
			}

			public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey);
			}

			public virtual void ISteamApps_InstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
			}

			public virtual bool ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly);
			}

			public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
			}

			public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
			}

			public virtual void ISteamApps_UninstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
			}

			public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe);
			}

			public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr);
			}

			public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe);
			}

			public virtual HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType);
			}

			public virtual HSteamPipe ISteamClient_CreateSteamPipe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr);
			}

			public virtual uint ISteamClient_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr);
			}

			public virtual IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGameServerStats(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGenericInterface(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamParentalSettings(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamParentalSettings(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
			}

			public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
			}

			public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
			}

			public virtual void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
			}

			public virtual void ISteamController_ActivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_ActivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			public virtual void ISteamController_DeactivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_DeactivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			public virtual void ISteamController_DeactivateAllActionSetLayers(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_DeactivateAllActionSetLayers(this._ptr, controllerHandle);
			}

			public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName);
			}

			public virtual int ISteamController_GetActiveActionSetLayers(ulong controllerHandle, IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetActiveActionSetLayers(this._ptr, controllerHandle, handlesOut);
			}

			public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ulong controllerHandle, ulong analogActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
			}

			public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName);
			}

			public virtual int ISteamController_GetAnalogActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
			}

			public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut);
			}

			public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex);
			}

			public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle);
			}

			public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ulong controllerHandle, ulong digitalActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
			}

			public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName);
			}

			public virtual int ISteamController_GetDigitalActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
			}

			public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle);
			}

			public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin);
			}

			public virtual SteamInputType ISteamController_GetInputTypeForHandle(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetInputTypeForHandle(this._ptr, controllerHandle);
			}

			public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle);
			}

			public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin);
			}

			public virtual bool ISteamController_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_Init(this._ptr);
			}

			public virtual void ISteamController_RunFrame()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
			}

			public virtual void ISteamController_SetLEDColor(ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
			}

			public virtual bool ISteamController_ShowAnalogActionOrigins(ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
			}

			public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle);
			}

			public virtual bool ISteamController_ShowDigitalActionOrigins(ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
			}

			public virtual bool ISteamController_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_Shutdown(this._ptr);
			}

			public virtual void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
			}

			public virtual void ISteamController_TriggerHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
			}

			public virtual void ISteamController_TriggerRepeatedHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
			}

			public virtual void ISteamController_TriggerVibration(ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
			}

			public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
			}

			public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
			}

			public virtual void ISteamFriends_ClearRichPresence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
			}

			public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(IntPtr psteamIDClans, int cClansToRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
			}

			public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex);
			}

			public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
			}

			public virtual bool ISteamFriends_GetClanActivityCounts(ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting);
			}

			public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan);
			}

			public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan);
			}

			public virtual int ISteamFriends_GetClanChatMessage(ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
			}

			public virtual int ISteamFriends_GetClanCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr);
			}

			public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
			}

			public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan);
			}

			public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend);
			}

			public virtual int ISteamFriends_GetCoplayFriendCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr);
			}

			public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID);
			}

			public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
			}

			public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags);
			}

			public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource);
			}

			public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
			}

			public virtual bool ISteamFriends_GetFriendGamePlayed(ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				FriendGameInfo_t.PackSmall packSmall = new FriendGameInfo_t.PackSmall();
				bool flag = Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref packSmall);
				pFriendGameInfo = packSmall;
				return flag;
			}

			public virtual int ISteamFriends_GetFriendMessage(ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
			}

			public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
			}

			public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend);
			}

			public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
			}

			public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
			}

			public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendsGroupCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr);
			}

			public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG);
			}

			public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID);
			}

			public virtual void ISteamFriends_GetFriendsGroupMembersList(short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
			}

			public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID);
			}

			public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetPersonaName()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr);
			}

			public virtual PersonaState ISteamFriends_GetPersonaState()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr);
			}

			public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer);
			}

			public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual uint ISteamFriends_GetUserRestrictions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr);
			}

			public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
			}

			public virtual bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
			}

			public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
			}

			public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat);
			}

			public virtual bool ISteamFriends_IsClanOfficialGameGroup(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_IsClanOfficialGameGroup(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_IsClanPublic(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_IsClanPublic(this._ptr, steamIDClan);
			}

			public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID);
			}

			public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
			}

			public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			public virtual bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
			}

			public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan);
			}

			public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
			}

			public virtual bool ISteamFriends_RequestUserInformation(ulong steamIDUser, bool bRequireNameOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
			}

			public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
			}

			public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, bool bSpeaking)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
			}

			public virtual bool ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled);
			}

			public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName);
			}

			public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
			}

			public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
			}

			public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan);
			}

			public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			public virtual bool ISteamGameServer_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr);
			}

			public virtual bool ISteamGameServer_BSecure()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr);
			}

			public virtual bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
			}

			public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			public virtual void ISteamGameServer_ClearAllKeyValues()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
			}

			public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer);
			}

			public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr);
			}

			public virtual void ISteamGameServer_EnableHeartbeats(bool bActive)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
			}

			public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
			}

			public virtual void ISteamGameServer_ForceHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
			}

			public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual void ISteamGameServer_GetGameplayStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
			}

			public virtual int ISteamGameServer_GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
			}

			public virtual uint ISteamGameServer_GetPublicIP()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr);
			}

			public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr);
			}

			public virtual CSteamID ISteamGameServer_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr);
			}

			public virtual bool ISteamGameServer_HandleIncomingPacket(IntPtr pData, int cbData, uint srcIP, ushort srcPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
			}

			public virtual bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
			}

			public virtual void ISteamGameServer_LogOff()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
			}

			public virtual void ISteamGameServer_LogOn(string pszToken)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
			}

			public virtual void ISteamGameServer_LogOnAnonymous()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
			}

			public virtual bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
			}

			public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
			}

			public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
			}

			public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
			}

			public virtual void ISteamGameServer_SetDedicatedServer(bool bDedicated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
			}

			public virtual void ISteamGameServer_SetGameData(string pchGameData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
			}

			public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
			}

			public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
			}

			public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
			}

			public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
			}

			public virtual void ISteamGameServer_SetMapName(string pszMapName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
			}

			public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
			}

			public virtual void ISteamGameServer_SetModDir(string pszModDir)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
			}

			public virtual void ISteamGameServer_SetPasswordProtected(bool bPasswordProtected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
			}

			public virtual void ISteamGameServer_SetProduct(string pszProduct)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
			}

			public virtual void ISteamGameServer_SetRegion(string pszRegion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
			}

			public virtual void ISteamGameServer_SetServerName(string pszServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
			}

			public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
			}

			public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
			}

			public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			public virtual bool ISteamGameServer_WasRestartRequested()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr);
			}

			public virtual bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
			}

			public virtual bool ISteamGameServerStats_GetUserAchievement(ulong steamIDUser, string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			public virtual bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
			}

			public virtual bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
			}

			public virtual bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
			}

			public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
			}

			public virtual void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
			}

			public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, bool bAllowed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
			}

			public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
			}

			public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
			}

			public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
			}

			public virtual void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
			}

			public virtual void ISteamHTMLSurface_Find(uint unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
			}

			public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
			}

			public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
			}

			public virtual bool ISteamHTMLSurface_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr);
			}

			public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, bool bResult)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
			}

			public virtual void ISteamHTMLSurface_KeyChar(uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_KeyDown(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_KeyUp(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
			}

			public virtual void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
			}

			public virtual void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
			}

			public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle, bool bBackgroundMode)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
			}

			public virtual void ISteamHTMLSurface_SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, bool bSecure, bool bHTTPOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
			}

			public virtual void ISteamHTMLSurface_SetDPIScalingFactor(uint unBrowserHandle, float flDPIScaling)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(this._ptr, unBrowserHandle, flDPIScaling);
			}

			public virtual void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, bool bHasKeyFocus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
			}

			public virtual void ISteamHTMLSurface_SetPageScaleFactor(uint unBrowserHandle, float flZoom, int nPointX, int nPointY)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
			}

			public virtual void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
			}

			public virtual void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			public virtual bool ISteamHTMLSurface_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr);
			}

			public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
			}

			public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify);
			}

			public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
			}

			public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut);
			}

			public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, ref bool pbWasTimedOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseBodyData(uint hRequest, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(uint hRequest, string pchHeaderName, out uint unResponseHeaderSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer);
			}

			public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
			}

			public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
			}

			public virtual bool ISteamHTTP_SetCookie(uint hCookieContainer, string pchHost, string pchUrl, string pchCookie)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(uint hRequest, string pchParamName, string pchParamValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(uint hRequest, string pchHeaderName, string pchHeaderValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(uint hRequest, bool bRequireVerifiedCertificate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
			}

			public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
			}

			public virtual bool ISteamInventory_AddPromoItems(ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
			}

			public virtual bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
			}

			public virtual bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
			}

			public virtual bool ISteamInventory_DeserializeResult(ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
			}

			public virtual void ISteamInventory_DestroyResult(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
			}

			public virtual bool ISteamInventory_ExchangeItems(ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
			}

			public virtual bool ISteamInventory_GenerateItems(ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle);
			}

			public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
			}

			public virtual bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize);
			}

			public virtual bool ISteamInventory_GetItemDefinitionProperty(int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			public virtual bool ISteamInventory_GetItemPrice(int iDefinition, out ulong pPrice)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetItemPrice(this._ptr, iDefinition, out pPrice);
			}

			public virtual bool ISteamInventory_GetItemsByID(ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
			}

			public virtual bool ISteamInventory_GetItemsWithPrices(IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetItemsWithPrices(this._ptr, pArrayItemDefs, pPrices, unArrayLength);
			}

			public virtual uint ISteamInventory_GetNumItemsWithPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetNumItemsWithPrices(this._ptr);
			}

			public virtual bool ISteamInventory_GetResultItemProperty(int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			public virtual bool ISteamInventory_GetResultItems(int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
			}

			public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle);
			}

			public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle);
			}

			public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle);
			}

			public virtual bool ISteamInventory_LoadItemDefinitions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr);
			}

			public virtual bool ISteamInventory_RemoveProperty(ulong handle, ulong nItemID, string pchPropertyName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_RemoveProperty(this._ptr, handle, nItemID, pchPropertyName);
			}

			public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID);
			}

			public virtual SteamAPICall_t ISteamInventory_RequestPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_RequestPrices(this._ptr);
			}

			public virtual void ISteamInventory_SendItemDropHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
			}

			public virtual bool ISteamInventory_SerializeResult(int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
			}

			public virtual bool ISteamInventory_SetProperty(ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_SetProperty(this._ptr, handle, nItemID, pchPropertyName, pchPropertyValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, bValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, long nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, nValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, flValue);
			}

			public virtual SteamAPICall_t ISteamInventory_StartPurchase(int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_StartPurchase(this._ptr, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			public virtual SteamInventoryUpdateHandle_t ISteamInventory_StartUpdateProperties()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_StartUpdateProperties(this._ptr);
			}

			public virtual bool ISteamInventory_SubmitUpdateProperties(ulong handle, ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_SubmitUpdateProperties(this._ptr, handle, ref pResultHandle);
			}

			public virtual bool ISteamInventory_TradeItems(ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
			}

			public virtual bool ISteamInventory_TransferItemQuantity(ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
			}

			public virtual bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
			}

			public virtual int ISteamMatchmaking_AddFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
			}

			public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			public virtual bool ISteamMatchmaking_GetFavoriteGame(int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
			}

			public virtual int ISteamMatchmaking_GetFavoriteGameCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby);
			}

			public virtual int ISteamMatchmaking_GetLobbyChatEntry(ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
			}

			public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
			}

			public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_GetLobbyGameServer(ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
			}

			public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(ulong steamIDLobby, ulong steamIDUser, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
			}

			public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby);
			}

			public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby);
			}

			public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_RemoveFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
			}

			public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr);
			}

			public virtual bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
			}

			public virtual bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
			}

			public virtual bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			public virtual void ISteamMatchmaking_SetLobbyGameServer(ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
			}

			public virtual bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, bool bLobbyJoinable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
			}

			public virtual void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
			}

			public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
			}

			public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
			}

			public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
			}

			public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
			}

			public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest);
			}

			public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
			}

			public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest);
			}

			public virtual HServerQuery ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
			}

			public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
			}

			public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(uint iApp, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerQuery ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual bool ISteamMusic_BIsEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr);
			}

			public virtual bool ISteamMusic_BIsPlaying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr);
			}

			public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr);
			}

			public virtual float ISteamMusic_GetVolume()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr);
			}

			public virtual void ISteamMusic_Pause()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
			}

			public virtual void ISteamMusic_Play()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMusic_Play(this._ptr);
			}

			public virtual void ISteamMusic_PlayNext()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
			}

			public virtual void ISteamMusic_PlayPrevious()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
			}

			public virtual void ISteamMusic_SetVolume(float flVolume)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
			}

			public virtual bool ISteamMusicRemote_BActivationSuccess(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr);
			}

			public virtual bool ISteamMusicRemote_EnableLooped(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlaylists(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlayNext(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlayPrevious(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnableQueue(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnableShuffled(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_PlaylistDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_PlaylistWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_QueueDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_QueueWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName);
			}

			public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr);
			}

			public virtual bool ISteamMusicRemote_ResetQueueEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr);
			}

			public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID);
			}

			public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID);
			}

			public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName);
			}

			public virtual bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
			}

			public virtual bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText);
			}

			public virtual bool ISteamMusicRemote_UpdateLooped(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus);
			}

			public virtual bool ISteamMusicRemote_UpdateShuffled(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue);
			}

			public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			public virtual bool ISteamNetworking_AllowP2PPacketRelay(bool bAllow)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow);
			}

			public virtual bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
			}

			public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
			}

			public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
			}

			public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
			}

			public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			public virtual bool ISteamNetworking_DestroySocket(uint hSocket, bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			public virtual bool ISteamNetworking_GetListenSocketInfo(uint hListenSocket, out uint pnIP, out ushort pnPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort);
			}

			public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket);
			}

			public virtual bool ISteamNetworking_GetP2PSessionState(ulong steamIDRemote, ref P2PSessionState_t pConnectionState)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				P2PSessionState_t.PackSmall packSmall = new P2PSessionState_t.PackSmall();
				bool flag = Platform.Mac.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref packSmall);
				pConnectionState = packSmall;
				return flag;
			}

			public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket);
			}

			public virtual bool ISteamNetworking_GetSocketInfo(uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
			}

			public virtual bool ISteamNetworking_IsDataAvailable(uint hListenSocket, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
			}

			public virtual bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize);
			}

			public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel);
			}

			public virtual bool ISteamNetworking_ReadP2PPacket(IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
			}

			public virtual bool ISteamNetworking_RetrieveData(uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
			}

			public virtual bool ISteamNetworking_RetrieveDataFromSocket(uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
			}

			public virtual bool ISteamNetworking_SendDataOnSocket(uint hSocket, IntPtr pubData, uint cubData, bool bReliable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
			}

			public virtual bool ISteamNetworking_SendP2PPacket(ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
			}

			public virtual bool ISteamParentalSettings_BIsAppBlocked(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamParentalSettings_BIsAppBlocked(this._ptr, nAppID);
			}

			public virtual bool ISteamParentalSettings_BIsAppInBlockList(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamParentalSettings_BIsAppInBlockList(this._ptr, nAppID);
			}

			public virtual bool ISteamParentalSettings_BIsFeatureBlocked(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(this._ptr, eFeature);
			}

			public virtual bool ISteamParentalSettings_BIsFeatureInBlockList(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(this._ptr, eFeature);
			}

			public virtual bool ISteamParentalSettings_BIsParentalLockEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(this._ptr);
			}

			public virtual bool ISteamParentalSettings_BIsParentalLockLocked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(this._ptr);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle);
			}

			public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(WorkshopFileAction eAction, uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				SteamParamStringArray_t.PackSmall packSmall1 = new SteamParamStringArray_t.PackSmall();
				SteamAPICall_t steamAPICallT = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref packSmall, ref packSmall1);
				pTags = packSmall;
				pUserTags = packSmall1;
				return steamAPICallT;
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				SteamParamStringArray_t.PackSmall packSmall1 = new SteamParamStringArray_t.PackSmall();
				SteamAPICall_t steamAPICallT = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref packSmall, ref packSmall1);
				pRequiredTags = packSmall;
				pExcludedTags = packSmall1;
				return steamAPICallT;
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex);
			}

			public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile);
			}

			public virtual int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(string pchFile, uint nOffset, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
			}

			public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(ulong hReadCall, IntPtr pvBuffer, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(string pchFile, IntPtr pvData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle);
			}

			public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(ulong writeHandle, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
			}

			public virtual int ISteamRemoteStorage_GetCachedUGCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr);
			}

			public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent);
			}

			public virtual int ISteamRemoteStorage_GetFileCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr);
			}

			public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes);
			}

			public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile);
			}

			public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(ulong unPublishedFileId, uint unMaxSecondsOld)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes);
			}

			public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_GetUGCDetails(ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
			}

			public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr);
			}

			public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				SteamAPICall_t steamAPICallT = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref packSmall);
				pTags = packSmall;
				return steamAPICallT;
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				SteamAPICall_t steamAPICallT = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref packSmall, eWorkshopFileType);
				pTags = packSmall;
				return steamAPICallT;
			}

			public virtual void ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
			}

			public virtual bool ISteamRemoteStorage_SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(ulong unPublishedFileId, WorkshopFileAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(ulong hContent, string pchLocation, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
			}

			public virtual int ISteamRemoteStorage_UGCRead(ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(ulong updateHandle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ulong updateHandle, string pchPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ulong updateHandle, string pchChangeDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				bool flag = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref packSmall);
				pTags = packSmall;
				return flag;
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(ulong unPublishedFileId, bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
			}

			public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
			}

			public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
			}

			public virtual void ISteamScreenshots_HookScreenshots(bool bHook)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
			}

			public virtual bool ISteamScreenshots_IsScreenshotsHooked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr);
			}

			public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
			}

			public virtual bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
			}

			public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
			}

			public virtual void ISteamScreenshots_TriggerScreenshot()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
			}

			public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
			}

			public virtual SteamAPICall_t ISteamUGC_AddAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			public virtual SteamAPICall_t ISteamUGC_AddDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
			}

			public virtual bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
			}

			public virtual bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
			}

			public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
			}

			public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			public virtual bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
			}

			public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
			}

			public virtual bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
			}

			public virtual SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
			}

			public virtual SteamAPICall_t ISteamUGC_DeleteItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_DeleteItem(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, bool bHighPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
			}

			public virtual SteamAPICall_t ISteamUGC_GetAppDependencies(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetAppDependencies(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_GetItemDownloadInfo(ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal);
			}

			public virtual bool ISteamUGC_GetItemInstallInfo(ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
			}

			public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID);
			}

			public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal);
			}

			public virtual uint ISteamUGC_GetNumSubscribedItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr);
			}

			public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
			}

			public virtual bool ISteamUGC_GetQueryUGCChildren(ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
			}

			public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
			}

			public virtual bool ISteamUGC_GetQueryUGCMetadata(ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
			}

			public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
			}

			public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
			}

			public virtual bool ISteamUGC_GetQueryUGCPreviewURL(ulong handle, uint index, StringBuilder pchURL, uint cchURLSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
			}

			public virtual bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				SteamUGCDetails_t.PackSmall packSmall = new SteamUGCDetails_t.PackSmall();
				bool flag = Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref packSmall);
				pDetails = packSmall;
				return flag;
			}

			public virtual bool ISteamUGC_GetQueryUGCStatistic(ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
			}

			public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
			}

			public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_RemoveAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
			}

			public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
			}

			public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
			}

			public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle);
			}

			public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
			}

			public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
			}

			public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
			}

			public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
			}

			public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
			}

			public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
			}

			public virtual bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall packSmall = new SteamParamStringArray_t.PackSmall();
				bool flag = Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref packSmall);
				pTags = packSmall;
				return flag;
			}

			public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
			}

			public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
			}

			public virtual bool ISteamUGC_SetItemVisibility(ulong handle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
			}

			public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
			}

			public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, bool bMatchAnyTag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
			}

			public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
			}

			public virtual bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle, bool bReturnAdditionalPreviews)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
			}

			public virtual bool ISteamUGC_SetReturnChildren(ulong handle, bool bReturnChildren)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
			}

			public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, bool bReturnKeyValueTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
			}

			public virtual bool ISteamUGC_SetReturnLongDescription(ulong handle, bool bReturnLongDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
			}

			public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, bool bReturnMetadata)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
			}

			public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, bool bReturnOnlyIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
			}

			public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
			}

			public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, bool bReturnTotalOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
			}

			public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
			}

			public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
			}

			public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
			}

			public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
			}

			public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID);
			}

			public virtual void ISteamUGC_SuspendDownloads(bool bSuspend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
			}

			public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
			}

			public virtual bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
			}

			public virtual void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
			}

			public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			public virtual bool ISteamUser_BIsBehindNAT()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneIdentifying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneRequiringVerification()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneVerified()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr);
			}

			public virtual bool ISteamUser_BIsTwoFactorEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr);
			}

			public virtual bool ISteamUser_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr);
			}

			public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			public virtual VoiceResult ISteamUser_DecompressVoice(IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
			}

			public virtual void ISteamUser_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
			}

			public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual VoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			public virtual bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
			}

			public virtual HSteamUser ISteamUser_GetHSteamUser()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr);
			}

			public virtual int ISteamUser_GetPlayerSteamLevel()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr);
			}

			public virtual CSteamID ISteamUser_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr);
			}

			public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
			}

			public virtual VoiceResult ISteamUser_GetVoice(bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr);
			}

			public virtual int ISteamUser_InitiateGameConnection(IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
			}

			public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
			}

			public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL);
			}

			public virtual void ISteamUser_StartVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
			}

			public virtual void ISteamUser_StopVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
			}

			public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
			}

			public virtual void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
			}

			public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
			}

			public virtual bool ISteamUserStats_ClearAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName);
			}

			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
			}

			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
			}

			public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName);
			}

			public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
			}

			public virtual bool ISteamUserStats_GetAchievement(string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
			}

			public virtual bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent);
			}

			public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(string pchName, ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
			}

			public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
			}

			public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName);
			}

			public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement);
			}

			public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				LeaderboardEntry_t.PackSmall packSmall = new LeaderboardEntry_t.PackSmall();
				bool flag = Platform.Mac.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref packSmall, pDetails, cDetailsMax);
				pLeaderboardEntry = packSmall;
				return flag;
			}

			public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData);
			}

			public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData);
			}

			public virtual int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
			}

			public virtual int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
			}

			public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard);
			}

			public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard);
			}

			public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard);
			}

			public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard);
			}

			public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			public virtual uint ISteamUserStats_GetNumAchievements()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr);
			}

			public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetUserAchievement(ulong steamIDUser, string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(ulong steamIDUser, string pchName, ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
			}

			public virtual bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamUserStats_IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
			}

			public virtual bool ISteamUserStats_RequestCurrentStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamUserStats_ResetAllStats(bool bAchievementsToo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo);
			}

			public virtual bool ISteamUserStats_SetAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName);
			}

			public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
			}

			public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
			}

			public virtual bool ISteamUserStats_StoreStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr);
			}

			public virtual bool ISteamUserStats_UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
			}

			public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
			}

			public virtual bool ISteamUtils_BOverlayNeedsPresent()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName);
			}

			public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall);
			}

			public virtual bool ISteamUtils_GetAPICallResult(ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
			}

			public virtual uint ISteamUtils_GetAppID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr);
			}

			public virtual Universe ISteamUtils_GetConnectedUniverse()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr);
			}

			public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort);
			}

			public virtual byte ISteamUtils_GetCurrentBatteryPower()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr);
			}

			public virtual bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
			}

			public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr);
			}

			public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
			}

			public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight);
			}

			public virtual uint ISteamUtils_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr);
			}

			public virtual IntPtr ISteamUtils_GetIPCountry()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr);
			}

			public virtual uint ISteamUtils_GetSecondsSinceAppActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr);
			}

			public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr);
			}

			public virtual uint ISteamUtils_GetServerRealTime()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr);
			}

			public virtual IntPtr ISteamUtils_GetSteamUILanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr);
			}

			public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
			}

			public virtual bool ISteamUtils_IsOverlayEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr);
			}

			public virtual bool ISteamUtils_IsSteamInBigPictureMode()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr);
			}

			public virtual bool ISteamUtils_IsSteamRunningInVR()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr);
			}

			public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr);
			}

			public virtual void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
			}

			public virtual void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
			}

			public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled(bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
			}

			public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
			}

			public virtual bool ISteamUtils_ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
			}

			public virtual void ISteamUtils_StartVRDashboard()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
			}

			public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
			}

			public virtual bool ISteamVideo_GetOPFStringForApp(uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
			}

			public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
			}

			public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers);
			}

			public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
			{
				return Platform.Mac.Native.SteamAPI_GetHSteamPipe();
			}

			public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
			{
				return Platform.Mac.Native.SteamAPI_GetHSteamUser();
			}

			public virtual bool SteamApi_SteamAPI_Init()
			{
				return Platform.Mac.Native.SteamAPI_Init();
			}

			public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
			{
				Platform.Mac.Native.SteamAPI_RegisterCallback(pCallback, callback);
			}

			public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Mac.Native.SteamAPI_RegisterCallResult(pCallback, callback);
			}

			public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
			{
				return Platform.Mac.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
			}

			public virtual void SteamApi_SteamAPI_RunCallbacks()
			{
				Platform.Mac.Native.SteamAPI_RunCallbacks();
			}

			public virtual void SteamApi_SteamAPI_Shutdown()
			{
				Platform.Mac.Native.SteamAPI_Shutdown();
			}

			public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
			{
				Platform.Mac.Native.SteamAPI_UnregisterCallback(pCallback);
			}

			public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Mac.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
			}

			public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
			{
				return Platform.Mac.Native.SteamGameServer_GetHSteamPipe();
			}

			public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
			{
				return Platform.Mac.Native.SteamGameServer_GetHSteamUser();
			}

			public virtual void SteamApi_SteamGameServer_RunCallbacks()
			{
				Platform.Mac.Native.SteamGameServer_RunCallbacks();
			}

			public virtual void SteamApi_SteamGameServer_Shutdown()
			{
				Platform.Mac.Native.SteamGameServer_Shutdown();
			}

			public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
			{
				return Platform.Mac.Native.SteamInternal_CreateInterface(version);
			}

			public virtual bool SteamApi_SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString)
			{
				return Platform.Mac.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
			}

			internal static class Native
			{
				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_GetHSteamUser();

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_Init();

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(IntPtr ISteamAppList, uint nAppID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(IntPtr ISteamAppList, uint nAppID, StringBuilder pchDirectory, int cchNameMax);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppName(IntPtr ISteamAppList, uint nAppID, StringBuilder pchName, int cchNameMax);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(IntPtr ISteamAppList, IntPtr pvecAppID, uint unMaxAppIDs);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(IntPtr ISteamApps, int iDLC, ref uint pAppID, ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(IntPtr ISteamApps, uint appID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(IntPtr ISteamApps, uint appID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(IntPtr ISteamApps, uint appID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(IntPtr ISteamApps);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(IntPtr ISteamApps, uint appID, StringBuilder pchFolder, uint cchFolderBufferSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(IntPtr ISteamApps);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(IntPtr ISteamApps, StringBuilder pchName, int cchNameBufferSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(IntPtr ISteamApps, uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(IntPtr ISteamApps, uint nAppID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(IntPtr ISteamApps, string pszFileName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(IntPtr ISteamApps, uint appID, IntPtr pvecDepots, uint cMaxDepots);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(IntPtr ISteamApps, string pchKey);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(IntPtr ISteamApps, bool bMissingFilesOnly);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(IntPtr ISteamApps);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(IntPtr ISteamApps, uint nAppID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(IntPtr ISteamClient, int hSteamPipe);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(IntPtr ISteamClient);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(IntPtr ISteamClient, int hSteamPipe);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(IntPtr ISteamClient, out int phSteamPipe, AccountType eAccountType);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamParentalSettings(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(IntPtr ISteamClient, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_ReleaseUser(IntPtr ISteamClient, int hSteamPipe, int hUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(IntPtr ISteamClient, uint unIP, ushort usPort);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(IntPtr ISteamClient, IntPtr pFunction);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_ActivateActionSet(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_ActivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_DeactivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_DeactivateAllActionSetLayers(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(IntPtr ISteamController, string pszActionSetName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetActiveActionSetLayers(IntPtr ISteamController, ulong controllerHandle, IntPtr handlesOut);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(IntPtr ISteamController, string pszActionName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetConnectedControllers(IntPtr ISteamController, IntPtr handlesOut);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(IntPtr ISteamController, int nIndex);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(IntPtr ISteamController, string pszActionName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(IntPtr ISteamController, ulong ulControllerHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_SetLEDColor(IntPtr ISteamController, ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(IntPtr ISteamController, ulong controllerHandle, ulong eAction);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerVibration(IntPtr ISteamController, ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(IntPtr ISteamFriends, string pchDialog);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(IntPtr ISteamFriends, ulong steamIDLobby);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(IntPtr ISteamFriends, uint nAppID, OverlayToStoreFlag eFlag);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(IntPtr ISteamFriends, string pchDialog, ulong steamID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(IntPtr ISteamFriends, string pchURL);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(IntPtr ISteamFriends, IntPtr psteamIDClans, int cClansToRequest);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(IntPtr ISteamFriends, uint unStartIndex);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(IntPtr ISteamFriends, ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(IntPtr ISteamFriends, int iClan);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iOfficer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(IntPtr ISteamFriends, int iCoplayFriend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(IntPtr ISteamFriends, ulong steamID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(IntPtr ISteamFriends, int iFriend, int iFriendFlags);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCount(IntPtr ISteamFriends, int iFriendFlags);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(IntPtr ISteamFriends, ulong steamIDSource);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(IntPtr ISteamFriends, ulong steamIDSource, int iFriend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(IntPtr ISteamFriends, ulong steamIDFriend, ref FriendGameInfo_t.PackSmall pFriendGameInfo);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(IntPtr ISteamFriends, ulong steamIDFriend, int iPersonaName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend, string pchKey);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(IntPtr ISteamFriends, ulong steamIDFriend, int iKey);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(IntPtr ISteamFriends, int iFG);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(IntPtr ISteamFriends, short friendsGroupID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(IntPtr ISteamFriends, short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(IntPtr ISteamFriends, short friendsGroupID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(IntPtr ISteamFriends);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(IntPtr ISteamFriends, ulong steamIDPlayer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_HasFriend(IntPtr ISteamFriends, ulong steamIDFriend, int iFriendFlags);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(IntPtr ISteamFriends, ulong steamIDFriend, string pchConnectString);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(IntPtr ISteamFriends, ulong steamIDClanChat, ulong steamIDUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanPublic(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(IntPtr ISteamFriends, ulong steamID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(IntPtr ISteamFriends, ulong steamIDUser, ulong steamIDSource);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, string pchMsgToSend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(IntPtr ISteamFriends, ulong steamIDUser, bool bRequireNameOnly);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, string pchText);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(IntPtr ISteamFriends, ulong steamIDUser, bool bSpeaking);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(IntPtr ISteamFriends, bool bInterceptEnabled);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(IntPtr ISteamFriends, string pchPersonaName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(IntPtr ISteamFriends, ulong steamIDUserPlayedWith);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(IntPtr ISteamFriends, string pchKey, string pchValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(IntPtr ISteamGameServer, ulong steamIDClan);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(IntPtr ISteamGameServer, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(IntPtr ISteamGameServer, ulong steamIDUser, string pchPlayerName, uint uScore);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(IntPtr ISteamGameServer, uint hAuthTicket);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(IntPtr ISteamGameServer, ulong steamIDNewPlayer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(IntPtr ISteamGameServer, bool bActive);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(IntPtr ISteamGameServer, ulong steamID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(IntPtr ISteamGameServer, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(IntPtr ISteamGameServer, IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(IntPtr ISteamGameServer, IntPtr pData, int cbData, uint srcIP, ushort srcPort);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(IntPtr ISteamGameServer, uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOn(IntPtr ISteamGameServer, string pszToken);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(IntPtr ISteamGameServer, ulong steamIDUser, ulong steamIDGroup);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(IntPtr ISteamGameServer, uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(IntPtr ISteamGameServer, ulong steamIDUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(IntPtr ISteamGameServer, int cBotplayers);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(IntPtr ISteamGameServer, bool bDedicated);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameData(IntPtr ISteamGameServer, string pchGameData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(IntPtr ISteamGameServer, string pszGameDescription);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameTags(IntPtr ISteamGameServer, string pchGameTags);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(IntPtr ISteamGameServer, int iHeartbeatInterval);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(IntPtr ISteamGameServer, string pKey, string pValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetMapName(IntPtr ISteamGameServer, string pszMapName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(IntPtr ISteamGameServer, int cPlayersMax);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetModDir(IntPtr ISteamGameServer, string pszModDir);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(IntPtr ISteamGameServer, bool bPasswordProtected);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetProduct(IntPtr ISteamGameServer, string pszProduct);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetRegion(IntPtr ISteamGameServer, string pszRegion);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetServerName(IntPtr ISteamGameServer, string pszServerName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(IntPtr ISteamGameServer, ushort unSpectatorPort);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(IntPtr ISteamGameServer, string pszSpectatorServerName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(IntPtr ISteamGameServer, ulong steamID, uint appID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(IntPtr ISteamGameServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, ref bool pbAchieved);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out int pData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out float pData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, int nData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float fData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchKey, string pchValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bAllowed);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(IntPtr ISteamHTMLSurface, string pchUserAgent, string pchUserCSS);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(IntPtr ISteamHTMLSurface);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchScript);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_Find(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bResult);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchURL, string pchPostData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int nDelta);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_Reload(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bBackgroundMode);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(IntPtr ISteamHTMLSurface, string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, bool bSecure, bool bHTTPOnly);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flDPIScaling);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bHasKeyFocus);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flZoom, int nPointX, int nPointY);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint unWidth, uint unHeight);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(IntPtr ISteamHTTP, bool bAllowResponsesToModify);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(IntPtr ISteamHTTP, HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(IntPtr ISteamHTTP, uint hRequest, out float pflPercentOut);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(IntPtr ISteamHTTP, uint hRequest, ref bool pbWasTimedOut);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(IntPtr ISteamHTTP, uint hRequest, out byte pBodyDataBuffer, uint unBufferSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(IntPtr ISteamHTTP, uint hRequest, out uint unBodySize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out uint unResponseHeaderSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(IntPtr ISteamHTTP, uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(IntPtr ISteamHTTP, uint hCookieContainer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetCookie(IntPtr ISteamHTTP, uint hCookieContainer, string pchHost, string pchUrl, string pchCookie);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(IntPtr ISteamHTTP, uint hRequest, uint unMilliseconds);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(IntPtr ISteamHTTP, uint hRequest, ulong ulContextValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(IntPtr ISteamHTTP, uint hRequest, uint hCookieContainer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(IntPtr ISteamHTTP, uint hRequest, string pchParamName, string pchParamValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, string pchHeaderValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(IntPtr ISteamHTTP, uint hRequest, uint unTimeoutSeconds);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(IntPtr ISteamHTTP, uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(IntPtr ISteamHTTP, uint hRequest, bool bRequireVerifiedCertificate);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(IntPtr ISteamHTTP, uint hRequest, string pchUserAgentInfo);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(IntPtr ISteamInventory, ref int pResultHandle, int itemDef);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(IntPtr ISteamInventory, int resultHandle, ulong steamIDExpected);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(IntPtr ISteamInventory, ref int pResultHandle, ulong itemConsume, uint unQuantity);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(IntPtr ISteamInventory, ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamInventory_DestroyResult(IntPtr ISteamInventory, int resultHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GenerateItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetAllItems(IntPtr ISteamInventory, ref int pResultHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(IntPtr ISteamInventory, ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(IntPtr ISteamInventory, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(IntPtr ISteamInventory, int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemPrice(IntPtr ISteamInventory, int iDefinition, out ulong pPrice);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(IntPtr ISteamInventory, ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsWithPrices(IntPtr ISteamInventory, IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamInventory_GetNumItemsWithPrices(IntPtr ISteamInventory);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(IntPtr ISteamInventory, int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItems(IntPtr ISteamInventory, int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(IntPtr ISteamInventory, int resultHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(IntPtr ISteamInventory, int resultHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(IntPtr ISteamInventory, ref int pResultHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(IntPtr ISteamInventory);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_RemoveProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(IntPtr ISteamInventory, ulong steamID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(IntPtr ISteamInventory);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(IntPtr ISteamInventory);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SerializeResult(IntPtr ISteamInventory, int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, bool bValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, long nValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, float flValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(IntPtr ISteamInventory, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(IntPtr ISteamInventory);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SubmitUpdateProperties(IntPtr ISteamInventory, ulong handle, ref int pResultHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TradeItems(IntPtr ISteamInventory, ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(IntPtr ISteamInventory, ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(IntPtr ISteamInventory, ref int pResultHandle, int dropListDefinition);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(IntPtr ISteamMatchmaking, LobbyDistanceFilter eLobbyDistanceFilter);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(IntPtr ISteamMatchmaking, int nSlotsAvailable);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToBeCloseTo);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(IntPtr ISteamMatchmaking, int cMaxResults);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(IntPtr ISteamMatchmaking, LobbyType eLobbyType, int cMaxMembers);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(IntPtr ISteamMatchmaking, int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(IntPtr ISteamMatchmaking);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(IntPtr ISteamMatchmaking, int iLobby);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iMember);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDUser, string pchKey);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDInvitee);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(IntPtr ISteamMatchmaking);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(IntPtr ISteamMatchmaking, ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDLobbyDependent);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(IntPtr ISteamMatchmaking, ulong steamIDLobby, bool bLobbyJoinable);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby, int cMaxMembers);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDNewOwner);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(IntPtr ISteamMatchmaking, ulong steamIDLobby, LobbyType eLobbyType);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(IntPtr ISteamMatchmakingServers, int hServerQuery);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(IntPtr ISteamMatchmakingServers, IntPtr hServerListRequest);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(IntPtr ISteamMusic);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_SetVolume(IntPtr ISteamMusic, float flVolume);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(IntPtr ISteamMusicRemote, bool bAvailable);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(IntPtr ISteamMusicRemote, string pchName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(IntPtr ISteamMusicRemote);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(IntPtr ISteamMusicRemote, int nID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(IntPtr ISteamMusicRemote, int nID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(IntPtr ISteamMusicRemote, string pchDisplayName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(IntPtr ISteamMusicRemote, int nValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(IntPtr ISteamMusicRemote, string pchText);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(IntPtr ISteamMusicRemote, AudioPlayback_Status nStatus);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(IntPtr ISteamMusicRemote, float flValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(IntPtr ISteamNetworking, bool bAllow);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(IntPtr ISteamNetworking, ulong steamIDRemote, int nChannel);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(IntPtr ISteamNetworking, uint nIP, ushort nPort, int nTimeoutSec);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(IntPtr ISteamNetworking, int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(IntPtr ISteamNetworking, ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(IntPtr ISteamNetworking, uint hSocket, bool bNotifyRemoteEnd);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(IntPtr ISteamNetworking, uint hSocket, bool bNotifyRemoteEnd);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(IntPtr ISteamNetworking, uint hListenSocket, out uint pnIP, out ushort pnPort);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(IntPtr ISteamNetworking, uint hSocket);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(IntPtr ISteamNetworking, ulong steamIDRemote, ref P2PSessionState_t.PackSmall pConnectionState);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(IntPtr ISteamNetworking, uint hSocket);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(IntPtr ISteamNetworking, uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(IntPtr ISteamNetworking, uint hListenSocket, out uint pcubMsgSize, ref uint phSocket);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(IntPtr ISteamNetworking, uint hSocket, out uint pcubMsgSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(IntPtr ISteamNetworking, out uint pcubMsgSize, int nChannel);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(IntPtr ISteamNetworking, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(IntPtr ISteamNetworking, uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubData, uint cubData, bool bReliable);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(IntPtr ISteamNetworking, ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(IntPtr ISteamParentalSettings, uint nAppID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(IntPtr ISteamParentalSettings, uint nAppID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(IntPtr ISteamParentalSettings);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(IntPtr ISteamParentalSettings);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(IntPtr ISteamRemoteStorage, ulong updateHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(IntPtr ISteamRemoteStorage, WorkshopFileAction eAction, uint unStartIndex);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(IntPtr ISteamRemoteStorage, WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t.PackSmall pTags, ref SteamParamStringArray_t.PackSmall pUserTags);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(IntPtr ISteamRemoteStorage, ulong steamId, uint unStartIndex, ref SteamParamStringArray_t.PackSmall pRequiredTags, ref SteamParamStringArray_t.PackSmall pExcludedTags);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubDataToRead);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(IntPtr ISteamRemoteStorage, string pchFile, uint nOffset, uint cubToRead);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(IntPtr ISteamRemoteStorage, ulong hReadCall, IntPtr pvBuffer, uint cubToRead);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, uint cubData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(IntPtr ISteamRemoteStorage, ulong writeHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(IntPtr ISteamRemoteStorage, ulong writeHandle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(IntPtr ISteamRemoteStorage, ulong writeHandle, IntPtr pvData, int cubData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(IntPtr ISteamRemoteStorage);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(IntPtr ISteamRemoteStorage, int iCachedContent);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(IntPtr ISteamRemoteStorage);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(IntPtr ISteamRemoteStorage, int iFile, out int pnFileSizeInBytes);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, uint unMaxSecondsOld);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(IntPtr ISteamRemoteStorage, out ulong pnTotalBytes, out ulong puAvailableBytes);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(IntPtr ISteamRemoteStorage, ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(IntPtr ISteamRemoteStorage, ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(IntPtr ISteamRemoteStorage);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(IntPtr ISteamRemoteStorage);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(IntPtr ISteamRemoteStorage, WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t.PackSmall pTags);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(IntPtr ISteamRemoteStorage, string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t.PackSmall pTags, WorkshopFileType eWorkshopFileType);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(IntPtr ISteamRemoteStorage, bool bEnabled);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, WorkshopFileAction eAction);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(IntPtr ISteamRemoteStorage, ulong hContent, uint unPriority);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(IntPtr ISteamRemoteStorage, ulong hContent, string pchLocation, uint unPriority);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(IntPtr ISteamRemoteStorage, ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchDescription);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchFile);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchPreviewFile);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchChangeDescription);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(IntPtr ISteamRemoteStorage, ulong updateHandle, ref SteamParamStringArray_t.PackSmall pTags);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchTitle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(IntPtr ISteamRemoteStorage, ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, bool bVoteUp);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(IntPtr ISteamScreenshots, string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(IntPtr ISteamScreenshots, VRScreenshotType eType, string pchFilename, string pchVRFilename);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(IntPtr ISteamScreenshots, bool bHook);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(IntPtr ISteamScreenshots);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(IntPtr ISteamScreenshots, uint hScreenshot, string pchLocation);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(IntPtr ISteamScreenshots, uint hScreenshot, ulong unPublishedFileID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_TagUser(IntPtr ISteamScreenshots, uint hScreenshot, ulong steamID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(IntPtr ISteamScreenshots);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(IntPtr ISteamScreenshots, IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(IntPtr ISteamUGC, ulong handle, string pchKey, string pchValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(IntPtr ISteamUGC, ulong handle, string pszPreviewFile, ItemPreviewType type);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(IntPtr ISteamUGC, ulong handle, string pszVideoID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(IntPtr ISteamUGC, ulong handle, string pKey, string pValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(IntPtr ISteamUGC, uint unWorkshopDepotID, string pszFolder);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(IntPtr ISteamUGC, uint nConsumerAppId, WorkshopFileType eFileType);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(IntPtr ISteamUGC, UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(IntPtr ISteamUGC, uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_DownloadItem(IntPtr ISteamUGC, ulong nPublishedFileID, bool bHighPriority);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetItemState(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(IntPtr ISteamUGC, ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(IntPtr ISteamUGC, ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(IntPtr ISteamUGC, ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(IntPtr ISteamUGC, ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchURL, uint cchURLSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(IntPtr ISteamUGC, ulong handle, uint index, ref SteamUGCDetails_t.PackSmall pDetails);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(IntPtr ISteamUGC, ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint cMaxEntries);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(IntPtr ISteamUGC, ulong handle, string pchKey);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(IntPtr ISteamUGC, ulong nPublishedFileID, uint unMaxAgeSeconds);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(IntPtr ISteamUGC, ulong handle, uint unMaxAgeSeconds);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(IntPtr ISteamUGC, ulong handle, string pMatchCloudFileName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemContent(IntPtr ISteamUGC, ulong handle, string pszContentFolder);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(IntPtr ISteamUGC, ulong handle, string pchDescription);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(IntPtr ISteamUGC, ulong handle, string pchMetaData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(IntPtr ISteamUGC, ulong handle, string pszPreviewFile);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTags(IntPtr ISteamUGC, ulong updateHandle, ref SteamParamStringArray_t.PackSmall pTags);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(IntPtr ISteamUGC, ulong handle, string pchTitle);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(IntPtr ISteamUGC, ulong handle, RemoteStoragePublishedFileVisibility eVisibility);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(IntPtr ISteamUGC, ulong handle, bool bMatchAnyTag);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(IntPtr ISteamUGC, ulong handle, uint unDays);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(IntPtr ISteamUGC, ulong handle, bool bReturnAdditionalPreviews);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(IntPtr ISteamUGC, ulong handle, bool bReturnChildren);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(IntPtr ISteamUGC, ulong handle, bool bReturnKeyValueTags);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(IntPtr ISteamUGC, ulong handle, bool bReturnLongDescription);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(IntPtr ISteamUGC, ulong handle, bool bReturnMetadata);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(IntPtr ISteamUGC, ulong handle, bool bReturnOnlyIDs);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(IntPtr ISteamUGC, ulong handle, uint unDays);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(IntPtr ISteamUGC, ulong handle, bool bReturnTotalOnly);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetSearchText(IntPtr ISteamUGC, ulong handle, string pSearchText);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID, bool bVoteUp);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(IntPtr ISteamUGC, uint nConsumerAppId, ulong nPublishedFileID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(IntPtr ISteamUGC);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(IntPtr ISteamUGC, ulong handle, string pchChangeNote);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(IntPtr ISteamUGC, bool bSuspend);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(IntPtr ISteamUGC, ulong handle, uint index, string pszPreviewFile);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(IntPtr ISteamUGC, ulong handle, uint index, string pszVideoID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_AdvertiseGame(IntPtr ISteamUser, ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(IntPtr ISteamUser, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(IntPtr ISteamUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(IntPtr ISteamUser, uint hAuthTicket);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(IntPtr ISteamUser, IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_EndAuthSession(IntPtr ISteamUser, ulong steamID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(IntPtr ISteamUser, out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(IntPtr ISteamUser, int nSeries, bool bFoil);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(IntPtr ISteamUser, StringBuilder pchBuffer, int cubBuffer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(IntPtr ISteamUser, bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(IntPtr ISteamUser, IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(IntPtr ISteamUser, IntPtr pDataToInclude, int cbDataToInclude);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(IntPtr ISteamUser, string pchRedirectURL);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(IntPtr ISteamUser, uint unIPServer, ushort usPortServer);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(IntPtr ISteamUser, ulong gameID, int eAppUsageEvent, string pchExtraInfo);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(IntPtr ISteamUser, ulong steamID, uint appID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(IntPtr ISteamUserStats, ulong hSteamLeaderboard, ulong hUGC);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(IntPtr ISteamUserStats, string pchName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(IntPtr ISteamUserStats, ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(IntPtr ISteamUserStats, string pchName, ref bool pbAchieved);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(IntPtr ISteamUserStats, string pchName, out float pflPercent);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(IntPtr ISteamUserStats, string pchName, ref bool pbAchieved, out uint punUnlockTime);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(IntPtr ISteamUserStats, string pchName, string pchKey);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(IntPtr ISteamUserStats, string pchName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(IntPtr ISteamUserStats, uint iAchievement);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(IntPtr ISteamUserStats, ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t.PackSmall pLeaderboardEntry, IntPtr pDetails, int cDetailsMax);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(IntPtr ISteamUserStats, string pchStatName, out long pData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(IntPtr ISteamUserStats, string pchStatName, out double pData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(IntPtr ISteamUserStats, string pchStatName, out long pData, uint cubData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(IntPtr ISteamUserStats, string pchStatName, out double pData, uint cubData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr ISteamUserStats, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(IntPtr ISteamUserStats, int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(IntPtr ISteamUserStats);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(IntPtr ISteamUserStats);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat(IntPtr ISteamUserStats, string pchName, out int pData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat0(IntPtr ISteamUserStats, string pchName, out float pData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, ref bool pbAchieved);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, ref bool pbAchieved, out uint punUnlockTime);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out int pData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out float pData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(IntPtr ISteamUserStats, string pchName, uint nCurProgress, uint nMaxProgress);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(IntPtr ISteamUserStats);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(IntPtr ISteamUserStats);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(IntPtr ISteamUserStats, int nHistoryDays);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(IntPtr ISteamUserStats, ulong steamIDUser);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(IntPtr ISteamUserStats, bool bAchievementsToo);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(IntPtr ISteamUserStats, string pchName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat(IntPtr ISteamUserStats, string pchName, int nData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat0(IntPtr ISteamUserStats, string pchName, float fData);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(IntPtr ISteamUserStats, string pchName, float flCountThisSession, double dSessionLength);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(IntPtr ISteamUtils, string szFileName);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(IntPtr ISteamUtils, ulong hSteamAPICall);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(IntPtr ISteamUtils, ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, ref bool pbFailed);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(IntPtr ISteamUtils, out uint unIP, out ushort usPort);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(IntPtr ISteamUtils, StringBuilder pchText, uint cchText);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(IntPtr ISteamUtils, int iImage, IntPtr pubDest, int nDestBufferSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetImageSize(IntPtr ISteamUtils, int iImage, out uint pnWidth, out uint pnHeight);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(IntPtr ISteamUtils, ulong hSteamAPICall, ref bool pbFailed);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(IntPtr ISteamUtils, int nHorizontalInset, int nVerticalInset);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(IntPtr ISteamUtils, NotificationPosition eNotificationPosition);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(IntPtr ISteamUtils, bool bEnabled);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(IntPtr ISteamUtils, IntPtr pFunction);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(IntPtr ISteamUtils, GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(IntPtr ISteamVideo, uint unVideoAppID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(IntPtr ISteamVideo, uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamVideo_GetVideoURL(IntPtr ISteamVideo, uint unVideoAppID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(IntPtr ISteamVideo, IntPtr pnNumViewers);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RunCallbacks();

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_Shutdown();

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamGameServer_GetHSteamUser();

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamGameServer_RunCallbacks();

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamGameServer_Shutdown();

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamInternal_CreateInterface(string version);

				[DllImport("libsteam_api.dylib", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString);
			}
		}

		internal class Win32 : Platform.Interface, IDisposable
		{
			internal IntPtr _ptr;

			public bool IsValid
			{
				get
				{
					return this._ptr != IntPtr.Zero;
				}
			}

			internal Win32(IntPtr pointer)
			{
				this._ptr = pointer;
			}

			public virtual void Dispose()
			{
				this._ptr = IntPtr.Zero;
			}

			public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID);
			}

			public virtual int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
			}

			public virtual int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
			}

			public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
			}

			public virtual uint ISteamAppList_GetNumInstalledApps()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr);
			}

			public virtual bool ISteamApps_BGetDLCDataByIndex(int iDLC, ref uint pAppID, ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
			}

			public virtual bool ISteamApps_BIsAppInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsCybercafe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr);
			}

			public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsLowViolence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr);
			}

			public virtual bool ISteamApps_BIsSubscribed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr);
			}

			public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr);
			}

			public virtual bool ISteamApps_BIsVACBanned()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr);
			}

			public virtual int ISteamApps_GetAppBuildId()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr);
			}

			public virtual uint ISteamApps_GetAppInstallDir(uint appID, StringBuilder pchFolder, uint cchFolderBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
			}

			public virtual CSteamID ISteamApps_GetAppOwner()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr);
			}

			public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr);
			}

			public virtual bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
			}

			public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr);
			}

			public virtual int ISteamApps_GetDLCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr);
			}

			public virtual bool ISteamApps_GetDlcDownloadProgress(uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal);
			}

			public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID);
			}

			public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName);
			}

			public virtual uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
			}

			public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey);
			}

			public virtual void ISteamApps_InstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
			}

			public virtual bool ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly);
			}

			public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
			}

			public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
			}

			public virtual void ISteamApps_UninstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
			}

			public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe);
			}

			public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr);
			}

			public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe);
			}

			public virtual HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType);
			}

			public virtual HSteamPipe ISteamClient_CreateSteamPipe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr);
			}

			public virtual uint ISteamClient_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr);
			}

			public virtual IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGameServerStats(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGenericInterface(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamParentalSettings(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamParentalSettings(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
			}

			public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
			}

			public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
			}

			public virtual void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
			}

			public virtual void ISteamController_ActivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_ActivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			public virtual void ISteamController_DeactivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_DeactivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			public virtual void ISteamController_DeactivateAllActionSetLayers(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_DeactivateAllActionSetLayers(this._ptr, controllerHandle);
			}

			public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName);
			}

			public virtual int ISteamController_GetActiveActionSetLayers(ulong controllerHandle, IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetActiveActionSetLayers(this._ptr, controllerHandle, handlesOut);
			}

			public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ulong controllerHandle, ulong analogActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
			}

			public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName);
			}

			public virtual int ISteamController_GetAnalogActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
			}

			public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut);
			}

			public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex);
			}

			public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle);
			}

			public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ulong controllerHandle, ulong digitalActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
			}

			public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName);
			}

			public virtual int ISteamController_GetDigitalActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
			}

			public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle);
			}

			public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin);
			}

			public virtual SteamInputType ISteamController_GetInputTypeForHandle(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetInputTypeForHandle(this._ptr, controllerHandle);
			}

			public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle);
			}

			public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin);
			}

			public virtual bool ISteamController_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_Init(this._ptr);
			}

			public virtual void ISteamController_RunFrame()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
			}

			public virtual void ISteamController_SetLEDColor(ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
			}

			public virtual bool ISteamController_ShowAnalogActionOrigins(ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
			}

			public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle);
			}

			public virtual bool ISteamController_ShowDigitalActionOrigins(ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
			}

			public virtual bool ISteamController_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_Shutdown(this._ptr);
			}

			public virtual void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
			}

			public virtual void ISteamController_TriggerHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
			}

			public virtual void ISteamController_TriggerRepeatedHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
			}

			public virtual void ISteamController_TriggerVibration(ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
			}

			public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
			}

			public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
			}

			public virtual void ISteamFriends_ClearRichPresence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
			}

			public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(IntPtr psteamIDClans, int cClansToRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
			}

			public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex);
			}

			public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
			}

			public virtual bool ISteamFriends_GetClanActivityCounts(ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting);
			}

			public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan);
			}

			public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan);
			}

			public virtual int ISteamFriends_GetClanChatMessage(ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
			}

			public virtual int ISteamFriends_GetClanCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr);
			}

			public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
			}

			public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan);
			}

			public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend);
			}

			public virtual int ISteamFriends_GetCoplayFriendCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr);
			}

			public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID);
			}

			public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
			}

			public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags);
			}

			public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource);
			}

			public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
			}

			public virtual bool ISteamFriends_GetFriendGamePlayed(ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref pFriendGameInfo);
			}

			public virtual int ISteamFriends_GetFriendMessage(ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
			}

			public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
			}

			public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend);
			}

			public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
			}

			public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
			}

			public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendsGroupCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr);
			}

			public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG);
			}

			public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID);
			}

			public virtual void ISteamFriends_GetFriendsGroupMembersList(short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
			}

			public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID);
			}

			public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetPersonaName()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr);
			}

			public virtual PersonaState ISteamFriends_GetPersonaState()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr);
			}

			public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer);
			}

			public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual uint ISteamFriends_GetUserRestrictions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr);
			}

			public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
			}

			public virtual bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
			}

			public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
			}

			public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat);
			}

			public virtual bool ISteamFriends_IsClanOfficialGameGroup(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_IsClanOfficialGameGroup(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_IsClanPublic(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_IsClanPublic(this._ptr, steamIDClan);
			}

			public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID);
			}

			public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
			}

			public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			public virtual bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
			}

			public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan);
			}

			public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
			}

			public virtual bool ISteamFriends_RequestUserInformation(ulong steamIDUser, bool bRequireNameOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
			}

			public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
			}

			public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, bool bSpeaking)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
			}

			public virtual bool ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled);
			}

			public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName);
			}

			public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
			}

			public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
			}

			public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan);
			}

			public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			public virtual bool ISteamGameServer_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr);
			}

			public virtual bool ISteamGameServer_BSecure()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr);
			}

			public virtual bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
			}

			public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			public virtual void ISteamGameServer_ClearAllKeyValues()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
			}

			public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer);
			}

			public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr);
			}

			public virtual void ISteamGameServer_EnableHeartbeats(bool bActive)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
			}

			public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
			}

			public virtual void ISteamGameServer_ForceHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
			}

			public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual void ISteamGameServer_GetGameplayStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
			}

			public virtual int ISteamGameServer_GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
			}

			public virtual uint ISteamGameServer_GetPublicIP()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr);
			}

			public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr);
			}

			public virtual CSteamID ISteamGameServer_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr);
			}

			public virtual bool ISteamGameServer_HandleIncomingPacket(IntPtr pData, int cbData, uint srcIP, ushort srcPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
			}

			public virtual bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
			}

			public virtual void ISteamGameServer_LogOff()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
			}

			public virtual void ISteamGameServer_LogOn(string pszToken)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
			}

			public virtual void ISteamGameServer_LogOnAnonymous()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
			}

			public virtual bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
			}

			public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
			}

			public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
			}

			public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
			}

			public virtual void ISteamGameServer_SetDedicatedServer(bool bDedicated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
			}

			public virtual void ISteamGameServer_SetGameData(string pchGameData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
			}

			public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
			}

			public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
			}

			public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
			}

			public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
			}

			public virtual void ISteamGameServer_SetMapName(string pszMapName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
			}

			public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
			}

			public virtual void ISteamGameServer_SetModDir(string pszModDir)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
			}

			public virtual void ISteamGameServer_SetPasswordProtected(bool bPasswordProtected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
			}

			public virtual void ISteamGameServer_SetProduct(string pszProduct)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
			}

			public virtual void ISteamGameServer_SetRegion(string pszRegion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
			}

			public virtual void ISteamGameServer_SetServerName(string pszServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
			}

			public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
			}

			public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
			}

			public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			public virtual bool ISteamGameServer_WasRestartRequested()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr);
			}

			public virtual bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
			}

			public virtual bool ISteamGameServerStats_GetUserAchievement(ulong steamIDUser, string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			public virtual bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
			}

			public virtual bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
			}

			public virtual bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
			}

			public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
			}

			public virtual void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
			}

			public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, bool bAllowed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
			}

			public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
			}

			public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
			}

			public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
			}

			public virtual void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
			}

			public virtual void ISteamHTMLSurface_Find(uint unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
			}

			public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
			}

			public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
			}

			public virtual bool ISteamHTMLSurface_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr);
			}

			public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, bool bResult)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
			}

			public virtual void ISteamHTMLSurface_KeyChar(uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_KeyDown(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_KeyUp(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
			}

			public virtual void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
			}

			public virtual void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
			}

			public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle, bool bBackgroundMode)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
			}

			public virtual void ISteamHTMLSurface_SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, bool bSecure, bool bHTTPOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
			}

			public virtual void ISteamHTMLSurface_SetDPIScalingFactor(uint unBrowserHandle, float flDPIScaling)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(this._ptr, unBrowserHandle, flDPIScaling);
			}

			public virtual void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, bool bHasKeyFocus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
			}

			public virtual void ISteamHTMLSurface_SetPageScaleFactor(uint unBrowserHandle, float flZoom, int nPointX, int nPointY)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
			}

			public virtual void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
			}

			public virtual void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			public virtual bool ISteamHTMLSurface_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr);
			}

			public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
			}

			public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify);
			}

			public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
			}

			public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut);
			}

			public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, ref bool pbWasTimedOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseBodyData(uint hRequest, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(uint hRequest, string pchHeaderName, out uint unResponseHeaderSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer);
			}

			public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
			}

			public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
			}

			public virtual bool ISteamHTTP_SetCookie(uint hCookieContainer, string pchHost, string pchUrl, string pchCookie)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(uint hRequest, string pchParamName, string pchParamValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(uint hRequest, string pchHeaderName, string pchHeaderValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(uint hRequest, bool bRequireVerifiedCertificate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
			}

			public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
			}

			public virtual bool ISteamInventory_AddPromoItems(ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
			}

			public virtual bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
			}

			public virtual bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
			}

			public virtual bool ISteamInventory_DeserializeResult(ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
			}

			public virtual void ISteamInventory_DestroyResult(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
			}

			public virtual bool ISteamInventory_ExchangeItems(ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
			}

			public virtual bool ISteamInventory_GenerateItems(ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle);
			}

			public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
			}

			public virtual bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize);
			}

			public virtual bool ISteamInventory_GetItemDefinitionProperty(int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			public virtual bool ISteamInventory_GetItemPrice(int iDefinition, out ulong pPrice)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetItemPrice(this._ptr, iDefinition, out pPrice);
			}

			public virtual bool ISteamInventory_GetItemsByID(ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
			}

			public virtual bool ISteamInventory_GetItemsWithPrices(IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetItemsWithPrices(this._ptr, pArrayItemDefs, pPrices, unArrayLength);
			}

			public virtual uint ISteamInventory_GetNumItemsWithPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetNumItemsWithPrices(this._ptr);
			}

			public virtual bool ISteamInventory_GetResultItemProperty(int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			public virtual bool ISteamInventory_GetResultItems(int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
			}

			public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle);
			}

			public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle);
			}

			public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle);
			}

			public virtual bool ISteamInventory_LoadItemDefinitions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr);
			}

			public virtual bool ISteamInventory_RemoveProperty(ulong handle, ulong nItemID, string pchPropertyName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_RemoveProperty(this._ptr, handle, nItemID, pchPropertyName);
			}

			public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID);
			}

			public virtual SteamAPICall_t ISteamInventory_RequestPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_RequestPrices(this._ptr);
			}

			public virtual void ISteamInventory_SendItemDropHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
			}

			public virtual bool ISteamInventory_SerializeResult(int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
			}

			public virtual bool ISteamInventory_SetProperty(ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_SetProperty(this._ptr, handle, nItemID, pchPropertyName, pchPropertyValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, bValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, long nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, nValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, flValue);
			}

			public virtual SteamAPICall_t ISteamInventory_StartPurchase(int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_StartPurchase(this._ptr, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			public virtual SteamInventoryUpdateHandle_t ISteamInventory_StartUpdateProperties()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_StartUpdateProperties(this._ptr);
			}

			public virtual bool ISteamInventory_SubmitUpdateProperties(ulong handle, ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_SubmitUpdateProperties(this._ptr, handle, ref pResultHandle);
			}

			public virtual bool ISteamInventory_TradeItems(ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
			}

			public virtual bool ISteamInventory_TransferItemQuantity(ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
			}

			public virtual bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
			}

			public virtual int ISteamMatchmaking_AddFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
			}

			public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			public virtual bool ISteamMatchmaking_GetFavoriteGame(int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
			}

			public virtual int ISteamMatchmaking_GetFavoriteGameCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby);
			}

			public virtual int ISteamMatchmaking_GetLobbyChatEntry(ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
			}

			public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
			}

			public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_GetLobbyGameServer(ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
			}

			public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(ulong steamIDLobby, ulong steamIDUser, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
			}

			public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby);
			}

			public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby);
			}

			public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_RemoveFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
			}

			public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr);
			}

			public virtual bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
			}

			public virtual bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
			}

			public virtual bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			public virtual void ISteamMatchmaking_SetLobbyGameServer(ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
			}

			public virtual bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, bool bLobbyJoinable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
			}

			public virtual void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
			}

			public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
			}

			public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
			}

			public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
			}

			public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
			}

			public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest);
			}

			public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
			}

			public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest);
			}

			public virtual HServerQuery ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
			}

			public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
			}

			public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(uint iApp, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerQuery ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual bool ISteamMusic_BIsEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr);
			}

			public virtual bool ISteamMusic_BIsPlaying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr);
			}

			public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr);
			}

			public virtual float ISteamMusic_GetVolume()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr);
			}

			public virtual void ISteamMusic_Pause()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
			}

			public virtual void ISteamMusic_Play()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMusic_Play(this._ptr);
			}

			public virtual void ISteamMusic_PlayNext()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
			}

			public virtual void ISteamMusic_PlayPrevious()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
			}

			public virtual void ISteamMusic_SetVolume(float flVolume)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
			}

			public virtual bool ISteamMusicRemote_BActivationSuccess(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr);
			}

			public virtual bool ISteamMusicRemote_EnableLooped(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlaylists(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlayNext(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlayPrevious(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnableQueue(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnableShuffled(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_PlaylistDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_PlaylistWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_QueueDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_QueueWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName);
			}

			public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr);
			}

			public virtual bool ISteamMusicRemote_ResetQueueEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr);
			}

			public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID);
			}

			public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID);
			}

			public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName);
			}

			public virtual bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
			}

			public virtual bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText);
			}

			public virtual bool ISteamMusicRemote_UpdateLooped(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus);
			}

			public virtual bool ISteamMusicRemote_UpdateShuffled(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue);
			}

			public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			public virtual bool ISteamNetworking_AllowP2PPacketRelay(bool bAllow)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow);
			}

			public virtual bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
			}

			public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
			}

			public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
			}

			public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
			}

			public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			public virtual bool ISteamNetworking_DestroySocket(uint hSocket, bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			public virtual bool ISteamNetworking_GetListenSocketInfo(uint hListenSocket, out uint pnIP, out ushort pnPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort);
			}

			public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket);
			}

			public virtual bool ISteamNetworking_GetP2PSessionState(ulong steamIDRemote, ref P2PSessionState_t pConnectionState)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref pConnectionState);
			}

			public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket);
			}

			public virtual bool ISteamNetworking_GetSocketInfo(uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
			}

			public virtual bool ISteamNetworking_IsDataAvailable(uint hListenSocket, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
			}

			public virtual bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize);
			}

			public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel);
			}

			public virtual bool ISteamNetworking_ReadP2PPacket(IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
			}

			public virtual bool ISteamNetworking_RetrieveData(uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
			}

			public virtual bool ISteamNetworking_RetrieveDataFromSocket(uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
			}

			public virtual bool ISteamNetworking_SendDataOnSocket(uint hSocket, IntPtr pubData, uint cubData, bool bReliable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
			}

			public virtual bool ISteamNetworking_SendP2PPacket(ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
			}

			public virtual bool ISteamParentalSettings_BIsAppBlocked(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamParentalSettings_BIsAppBlocked(this._ptr, nAppID);
			}

			public virtual bool ISteamParentalSettings_BIsAppInBlockList(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamParentalSettings_BIsAppInBlockList(this._ptr, nAppID);
			}

			public virtual bool ISteamParentalSettings_BIsFeatureBlocked(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(this._ptr, eFeature);
			}

			public virtual bool ISteamParentalSettings_BIsFeatureInBlockList(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(this._ptr, eFeature);
			}

			public virtual bool ISteamParentalSettings_BIsParentalLockEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(this._ptr);
			}

			public virtual bool ISteamParentalSettings_BIsParentalLockLocked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(this._ptr);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle);
			}

			public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(WorkshopFileAction eAction, uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref pTags, ref pUserTags);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref pRequiredTags, ref pExcludedTags);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex);
			}

			public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile);
			}

			public virtual int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(string pchFile, uint nOffset, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
			}

			public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(ulong hReadCall, IntPtr pvBuffer, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(string pchFile, IntPtr pvData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle);
			}

			public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(ulong writeHandle, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
			}

			public virtual int ISteamRemoteStorage_GetCachedUGCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr);
			}

			public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent);
			}

			public virtual int ISteamRemoteStorage_GetFileCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr);
			}

			public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes);
			}

			public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile);
			}

			public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(ulong unPublishedFileId, uint unMaxSecondsOld)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes);
			}

			public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_GetUGCDetails(ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
			}

			public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr);
			}

			public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags, eWorkshopFileType);
			}

			public virtual void ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
			}

			public virtual bool ISteamRemoteStorage_SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(ulong unPublishedFileId, WorkshopFileAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(ulong hContent, string pchLocation, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
			}

			public virtual int ISteamRemoteStorage_UGCRead(ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(ulong updateHandle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ulong updateHandle, string pchPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ulong updateHandle, string pchChangeDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref pTags);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(ulong unPublishedFileId, bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
			}

			public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
			}

			public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
			}

			public virtual void ISteamScreenshots_HookScreenshots(bool bHook)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
			}

			public virtual bool ISteamScreenshots_IsScreenshotsHooked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr);
			}

			public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
			}

			public virtual bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
			}

			public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
			}

			public virtual void ISteamScreenshots_TriggerScreenshot()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
			}

			public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
			}

			public virtual SteamAPICall_t ISteamUGC_AddAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			public virtual SteamAPICall_t ISteamUGC_AddDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
			}

			public virtual bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
			}

			public virtual bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
			}

			public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
			}

			public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			public virtual bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
			}

			public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
			}

			public virtual bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
			}

			public virtual SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
			}

			public virtual SteamAPICall_t ISteamUGC_DeleteItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_DeleteItem(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, bool bHighPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
			}

			public virtual SteamAPICall_t ISteamUGC_GetAppDependencies(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetAppDependencies(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_GetItemDownloadInfo(ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal);
			}

			public virtual bool ISteamUGC_GetItemInstallInfo(ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
			}

			public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID);
			}

			public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal);
			}

			public virtual uint ISteamUGC_GetNumSubscribedItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr);
			}

			public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
			}

			public virtual bool ISteamUGC_GetQueryUGCChildren(ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
			}

			public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
			}

			public virtual bool ISteamUGC_GetQueryUGCMetadata(ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
			}

			public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
			}

			public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
			}

			public virtual bool ISteamUGC_GetQueryUGCPreviewURL(ulong handle, uint index, StringBuilder pchURL, uint cchURLSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
			}

			public virtual bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref pDetails);
			}

			public virtual bool ISteamUGC_GetQueryUGCStatistic(ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
			}

			public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
			}

			public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_RemoveAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
			}

			public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
			}

			public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
			}

			public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle);
			}

			public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
			}

			public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
			}

			public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
			}

			public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
			}

			public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
			}

			public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
			}

			public virtual bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref pTags);
			}

			public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
			}

			public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
			}

			public virtual bool ISteamUGC_SetItemVisibility(ulong handle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
			}

			public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
			}

			public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, bool bMatchAnyTag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
			}

			public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
			}

			public virtual bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle, bool bReturnAdditionalPreviews)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
			}

			public virtual bool ISteamUGC_SetReturnChildren(ulong handle, bool bReturnChildren)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
			}

			public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, bool bReturnKeyValueTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
			}

			public virtual bool ISteamUGC_SetReturnLongDescription(ulong handle, bool bReturnLongDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
			}

			public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, bool bReturnMetadata)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
			}

			public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, bool bReturnOnlyIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
			}

			public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
			}

			public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, bool bReturnTotalOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
			}

			public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
			}

			public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
			}

			public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
			}

			public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
			}

			public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID);
			}

			public virtual void ISteamUGC_SuspendDownloads(bool bSuspend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
			}

			public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
			}

			public virtual bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
			}

			public virtual void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
			}

			public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			public virtual bool ISteamUser_BIsBehindNAT()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneIdentifying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneRequiringVerification()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneVerified()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr);
			}

			public virtual bool ISteamUser_BIsTwoFactorEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr);
			}

			public virtual bool ISteamUser_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr);
			}

			public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			public virtual VoiceResult ISteamUser_DecompressVoice(IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
			}

			public virtual void ISteamUser_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
			}

			public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual VoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			public virtual bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
			}

			public virtual HSteamUser ISteamUser_GetHSteamUser()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr);
			}

			public virtual int ISteamUser_GetPlayerSteamLevel()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr);
			}

			public virtual CSteamID ISteamUser_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr);
			}

			public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
			}

			public virtual VoiceResult ISteamUser_GetVoice(bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr);
			}

			public virtual int ISteamUser_InitiateGameConnection(IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
			}

			public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
			}

			public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL);
			}

			public virtual void ISteamUser_StartVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
			}

			public virtual void ISteamUser_StopVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
			}

			public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
			}

			public virtual void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
			}

			public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
			}

			public virtual bool ISteamUserStats_ClearAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName);
			}

			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
			}

			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
			}

			public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName);
			}

			public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
			}

			public virtual bool ISteamUserStats_GetAchievement(string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
			}

			public virtual bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent);
			}

			public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(string pchName, ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
			}

			public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
			}

			public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName);
			}

			public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement);
			}

			public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref pLeaderboardEntry, pDetails, cDetailsMax);
			}

			public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData);
			}

			public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData);
			}

			public virtual int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
			}

			public virtual int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
			}

			public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard);
			}

			public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard);
			}

			public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard);
			}

			public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard);
			}

			public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			public virtual uint ISteamUserStats_GetNumAchievements()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr);
			}

			public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetUserAchievement(ulong steamIDUser, string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(ulong steamIDUser, string pchName, ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
			}

			public virtual bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamUserStats_IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
			}

			public virtual bool ISteamUserStats_RequestCurrentStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamUserStats_ResetAllStats(bool bAchievementsToo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo);
			}

			public virtual bool ISteamUserStats_SetAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName);
			}

			public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
			}

			public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
			}

			public virtual bool ISteamUserStats_StoreStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr);
			}

			public virtual bool ISteamUserStats_UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
			}

			public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
			}

			public virtual bool ISteamUtils_BOverlayNeedsPresent()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName);
			}

			public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall);
			}

			public virtual bool ISteamUtils_GetAPICallResult(ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
			}

			public virtual uint ISteamUtils_GetAppID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr);
			}

			public virtual Universe ISteamUtils_GetConnectedUniverse()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr);
			}

			public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort);
			}

			public virtual byte ISteamUtils_GetCurrentBatteryPower()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr);
			}

			public virtual bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
			}

			public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr);
			}

			public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
			}

			public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight);
			}

			public virtual uint ISteamUtils_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr);
			}

			public virtual IntPtr ISteamUtils_GetIPCountry()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr);
			}

			public virtual uint ISteamUtils_GetSecondsSinceAppActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr);
			}

			public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr);
			}

			public virtual uint ISteamUtils_GetServerRealTime()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr);
			}

			public virtual IntPtr ISteamUtils_GetSteamUILanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr);
			}

			public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
			}

			public virtual bool ISteamUtils_IsOverlayEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr);
			}

			public virtual bool ISteamUtils_IsSteamInBigPictureMode()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr);
			}

			public virtual bool ISteamUtils_IsSteamRunningInVR()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr);
			}

			public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr);
			}

			public virtual void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
			}

			public virtual void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
			}

			public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled(bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
			}

			public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
			}

			public virtual bool ISteamUtils_ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
			}

			public virtual void ISteamUtils_StartVRDashboard()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
			}

			public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
			}

			public virtual bool ISteamVideo_GetOPFStringForApp(uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
			}

			public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
			}

			public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers);
			}

			public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
			{
				return Platform.Win32.Native.SteamAPI_GetHSteamPipe();
			}

			public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
			{
				return Platform.Win32.Native.SteamAPI_GetHSteamUser();
			}

			public virtual bool SteamApi_SteamAPI_Init()
			{
				return Platform.Win32.Native.SteamAPI_Init();
			}

			public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
			{
				Platform.Win32.Native.SteamAPI_RegisterCallback(pCallback, callback);
			}

			public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Win32.Native.SteamAPI_RegisterCallResult(pCallback, callback);
			}

			public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
			{
				return Platform.Win32.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
			}

			public virtual void SteamApi_SteamAPI_RunCallbacks()
			{
				Platform.Win32.Native.SteamAPI_RunCallbacks();
			}

			public virtual void SteamApi_SteamAPI_Shutdown()
			{
				Platform.Win32.Native.SteamAPI_Shutdown();
			}

			public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
			{
				Platform.Win32.Native.SteamAPI_UnregisterCallback(pCallback);
			}

			public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Win32.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
			}

			public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
			{
				return Platform.Win32.Native.SteamGameServer_GetHSteamPipe();
			}

			public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
			{
				return Platform.Win32.Native.SteamGameServer_GetHSteamUser();
			}

			public virtual void SteamApi_SteamGameServer_RunCallbacks()
			{
				Platform.Win32.Native.SteamGameServer_RunCallbacks();
			}

			public virtual void SteamApi_SteamGameServer_Shutdown()
			{
				Platform.Win32.Native.SteamGameServer_Shutdown();
			}

			public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
			{
				return Platform.Win32.Native.SteamInternal_CreateInterface(version);
			}

			public virtual bool SteamApi_SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString)
			{
				return Platform.Win32.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
			}

			internal static class Native
			{
				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_GetHSteamUser();

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_Init();

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(IntPtr ISteamAppList, uint nAppID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(IntPtr ISteamAppList, uint nAppID, StringBuilder pchDirectory, int cchNameMax);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppName(IntPtr ISteamAppList, uint nAppID, StringBuilder pchName, int cchNameMax);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(IntPtr ISteamAppList, IntPtr pvecAppID, uint unMaxAppIDs);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(IntPtr ISteamApps, int iDLC, ref uint pAppID, ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(IntPtr ISteamApps, uint appID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(IntPtr ISteamApps, uint appID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(IntPtr ISteamApps, uint appID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(IntPtr ISteamApps);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(IntPtr ISteamApps, uint appID, StringBuilder pchFolder, uint cchFolderBufferSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(IntPtr ISteamApps);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(IntPtr ISteamApps, StringBuilder pchName, int cchNameBufferSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(IntPtr ISteamApps, uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(IntPtr ISteamApps, uint nAppID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(IntPtr ISteamApps, string pszFileName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(IntPtr ISteamApps, uint appID, IntPtr pvecDepots, uint cMaxDepots);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(IntPtr ISteamApps, string pchKey);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(IntPtr ISteamApps, bool bMissingFilesOnly);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(IntPtr ISteamApps);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(IntPtr ISteamApps, uint nAppID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(IntPtr ISteamClient, int hSteamPipe);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(IntPtr ISteamClient);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(IntPtr ISteamClient, int hSteamPipe);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(IntPtr ISteamClient, out int phSteamPipe, AccountType eAccountType);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamParentalSettings(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(IntPtr ISteamClient, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_ReleaseUser(IntPtr ISteamClient, int hSteamPipe, int hUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(IntPtr ISteamClient, uint unIP, ushort usPort);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(IntPtr ISteamClient, IntPtr pFunction);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_ActivateActionSet(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_ActivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_DeactivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_DeactivateAllActionSetLayers(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(IntPtr ISteamController, string pszActionSetName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetActiveActionSetLayers(IntPtr ISteamController, ulong controllerHandle, IntPtr handlesOut);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(IntPtr ISteamController, string pszActionName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetConnectedControllers(IntPtr ISteamController, IntPtr handlesOut);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(IntPtr ISteamController, int nIndex);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(IntPtr ISteamController, string pszActionName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(IntPtr ISteamController, ulong ulControllerHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_SetLEDColor(IntPtr ISteamController, ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(IntPtr ISteamController, ulong controllerHandle, ulong eAction);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerVibration(IntPtr ISteamController, ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(IntPtr ISteamFriends, string pchDialog);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(IntPtr ISteamFriends, ulong steamIDLobby);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(IntPtr ISteamFriends, uint nAppID, OverlayToStoreFlag eFlag);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(IntPtr ISteamFriends, string pchDialog, ulong steamID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(IntPtr ISteamFriends, string pchURL);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(IntPtr ISteamFriends, IntPtr psteamIDClans, int cClansToRequest);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(IntPtr ISteamFriends, uint unStartIndex);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(IntPtr ISteamFriends, ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(IntPtr ISteamFriends, int iClan);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iOfficer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(IntPtr ISteamFriends, int iCoplayFriend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(IntPtr ISteamFriends, ulong steamID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(IntPtr ISteamFriends, int iFriend, int iFriendFlags);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCount(IntPtr ISteamFriends, int iFriendFlags);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(IntPtr ISteamFriends, ulong steamIDSource);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(IntPtr ISteamFriends, ulong steamIDSource, int iFriend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(IntPtr ISteamFriends, ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(IntPtr ISteamFriends, ulong steamIDFriend, int iPersonaName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend, string pchKey);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(IntPtr ISteamFriends, ulong steamIDFriend, int iKey);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(IntPtr ISteamFriends, int iFG);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(IntPtr ISteamFriends, short friendsGroupID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(IntPtr ISteamFriends, short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(IntPtr ISteamFriends, short friendsGroupID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(IntPtr ISteamFriends);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(IntPtr ISteamFriends, ulong steamIDPlayer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_HasFriend(IntPtr ISteamFriends, ulong steamIDFriend, int iFriendFlags);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(IntPtr ISteamFriends, ulong steamIDFriend, string pchConnectString);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(IntPtr ISteamFriends, ulong steamIDClanChat, ulong steamIDUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanPublic(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(IntPtr ISteamFriends, ulong steamID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(IntPtr ISteamFriends, ulong steamIDUser, ulong steamIDSource);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, string pchMsgToSend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(IntPtr ISteamFriends, ulong steamIDUser, bool bRequireNameOnly);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, string pchText);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(IntPtr ISteamFriends, ulong steamIDUser, bool bSpeaking);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(IntPtr ISteamFriends, bool bInterceptEnabled);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(IntPtr ISteamFriends, string pchPersonaName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(IntPtr ISteamFriends, ulong steamIDUserPlayedWith);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(IntPtr ISteamFriends, string pchKey, string pchValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(IntPtr ISteamGameServer, ulong steamIDClan);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(IntPtr ISteamGameServer, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(IntPtr ISteamGameServer, ulong steamIDUser, string pchPlayerName, uint uScore);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(IntPtr ISteamGameServer, uint hAuthTicket);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(IntPtr ISteamGameServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(IntPtr ISteamGameServer, ulong steamIDNewPlayer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(IntPtr ISteamGameServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(IntPtr ISteamGameServer, bool bActive);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(IntPtr ISteamGameServer, ulong steamID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(IntPtr ISteamGameServer, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(IntPtr ISteamGameServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(IntPtr ISteamGameServer, IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(IntPtr ISteamGameServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(IntPtr ISteamGameServer, IntPtr pData, int cbData, uint srcIP, ushort srcPort);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(IntPtr ISteamGameServer, uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOn(IntPtr ISteamGameServer, string pszToken);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(IntPtr ISteamGameServer, ulong steamIDUser, ulong steamIDGroup);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(IntPtr ISteamGameServer, uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(IntPtr ISteamGameServer, ulong steamIDUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(IntPtr ISteamGameServer, int cBotplayers);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(IntPtr ISteamGameServer, bool bDedicated);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameData(IntPtr ISteamGameServer, string pchGameData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(IntPtr ISteamGameServer, string pszGameDescription);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameTags(IntPtr ISteamGameServer, string pchGameTags);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(IntPtr ISteamGameServer, int iHeartbeatInterval);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(IntPtr ISteamGameServer, string pKey, string pValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetMapName(IntPtr ISteamGameServer, string pszMapName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(IntPtr ISteamGameServer, int cPlayersMax);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetModDir(IntPtr ISteamGameServer, string pszModDir);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(IntPtr ISteamGameServer, bool bPasswordProtected);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetProduct(IntPtr ISteamGameServer, string pszProduct);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetRegion(IntPtr ISteamGameServer, string pszRegion);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetServerName(IntPtr ISteamGameServer, string pszServerName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(IntPtr ISteamGameServer, ushort unSpectatorPort);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(IntPtr ISteamGameServer, string pszSpectatorServerName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(IntPtr ISteamGameServer, ulong steamID, uint appID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(IntPtr ISteamGameServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, ref bool pbAchieved);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out int pData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out float pData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, int nData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float fData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchKey, string pchValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bAllowed);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(IntPtr ISteamHTMLSurface, string pchUserAgent, string pchUserCSS);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(IntPtr ISteamHTMLSurface);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchScript);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_Find(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bResult);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchURL, string pchPostData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int nDelta);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_Reload(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bBackgroundMode);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(IntPtr ISteamHTMLSurface, string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, bool bSecure, bool bHTTPOnly);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flDPIScaling);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bHasKeyFocus);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flZoom, int nPointX, int nPointY);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint unWidth, uint unHeight);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(IntPtr ISteamHTTP, bool bAllowResponsesToModify);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(IntPtr ISteamHTTP, HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(IntPtr ISteamHTTP, uint hRequest, out float pflPercentOut);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(IntPtr ISteamHTTP, uint hRequest, ref bool pbWasTimedOut);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(IntPtr ISteamHTTP, uint hRequest, out byte pBodyDataBuffer, uint unBufferSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(IntPtr ISteamHTTP, uint hRequest, out uint unBodySize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out uint unResponseHeaderSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(IntPtr ISteamHTTP, uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(IntPtr ISteamHTTP, uint hCookieContainer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetCookie(IntPtr ISteamHTTP, uint hCookieContainer, string pchHost, string pchUrl, string pchCookie);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(IntPtr ISteamHTTP, uint hRequest, uint unMilliseconds);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(IntPtr ISteamHTTP, uint hRequest, ulong ulContextValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(IntPtr ISteamHTTP, uint hRequest, uint hCookieContainer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(IntPtr ISteamHTTP, uint hRequest, string pchParamName, string pchParamValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, string pchHeaderValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(IntPtr ISteamHTTP, uint hRequest, uint unTimeoutSeconds);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(IntPtr ISteamHTTP, uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(IntPtr ISteamHTTP, uint hRequest, bool bRequireVerifiedCertificate);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(IntPtr ISteamHTTP, uint hRequest, string pchUserAgentInfo);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(IntPtr ISteamInventory, ref int pResultHandle, int itemDef);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(IntPtr ISteamInventory, int resultHandle, ulong steamIDExpected);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(IntPtr ISteamInventory, ref int pResultHandle, ulong itemConsume, uint unQuantity);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(IntPtr ISteamInventory, ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamInventory_DestroyResult(IntPtr ISteamInventory, int resultHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GenerateItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetAllItems(IntPtr ISteamInventory, ref int pResultHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(IntPtr ISteamInventory, ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(IntPtr ISteamInventory, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(IntPtr ISteamInventory, int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemPrice(IntPtr ISteamInventory, int iDefinition, out ulong pPrice);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(IntPtr ISteamInventory, ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsWithPrices(IntPtr ISteamInventory, IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamInventory_GetNumItemsWithPrices(IntPtr ISteamInventory);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(IntPtr ISteamInventory, int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItems(IntPtr ISteamInventory, int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(IntPtr ISteamInventory, int resultHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(IntPtr ISteamInventory, int resultHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(IntPtr ISteamInventory, ref int pResultHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(IntPtr ISteamInventory);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_RemoveProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(IntPtr ISteamInventory, ulong steamID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(IntPtr ISteamInventory);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(IntPtr ISteamInventory);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SerializeResult(IntPtr ISteamInventory, int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, bool bValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, long nValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, float flValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(IntPtr ISteamInventory, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(IntPtr ISteamInventory);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SubmitUpdateProperties(IntPtr ISteamInventory, ulong handle, ref int pResultHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TradeItems(IntPtr ISteamInventory, ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(IntPtr ISteamInventory, ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(IntPtr ISteamInventory, ref int pResultHandle, int dropListDefinition);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(IntPtr ISteamMatchmaking, LobbyDistanceFilter eLobbyDistanceFilter);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(IntPtr ISteamMatchmaking, int nSlotsAvailable);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToBeCloseTo);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(IntPtr ISteamMatchmaking, int cMaxResults);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(IntPtr ISteamMatchmaking, LobbyType eLobbyType, int cMaxMembers);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(IntPtr ISteamMatchmaking, int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(IntPtr ISteamMatchmaking);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(IntPtr ISteamMatchmaking, int iLobby);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iMember);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDUser, string pchKey);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDInvitee);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(IntPtr ISteamMatchmaking);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(IntPtr ISteamMatchmaking, ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDLobbyDependent);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(IntPtr ISteamMatchmaking, ulong steamIDLobby, bool bLobbyJoinable);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby, int cMaxMembers);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDNewOwner);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(IntPtr ISteamMatchmaking, ulong steamIDLobby, LobbyType eLobbyType);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(IntPtr ISteamMatchmakingServers, int hServerQuery);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(IntPtr ISteamMatchmakingServers, IntPtr hServerListRequest);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr pRequestServersResponse);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(IntPtr ISteamMusic);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_SetVolume(IntPtr ISteamMusic, float flVolume);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(IntPtr ISteamMusicRemote);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(IntPtr ISteamMusicRemote);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(IntPtr ISteamMusicRemote, bool bAvailable);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(IntPtr ISteamMusicRemote);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(IntPtr ISteamMusicRemote);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(IntPtr ISteamMusicRemote);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(IntPtr ISteamMusicRemote);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(IntPtr ISteamMusicRemote);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(IntPtr ISteamMusicRemote);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(IntPtr ISteamMusicRemote, string pchName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(IntPtr ISteamMusicRemote);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(IntPtr ISteamMusicRemote);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(IntPtr ISteamMusicRemote, int nID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(IntPtr ISteamMusicRemote, int nID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(IntPtr ISteamMusicRemote, string pchDisplayName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(IntPtr ISteamMusicRemote, int nValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(IntPtr ISteamMusicRemote, string pchText);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(IntPtr ISteamMusicRemote, AudioPlayback_Status nStatus);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(IntPtr ISteamMusicRemote, float flValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(IntPtr ISteamNetworking, bool bAllow);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(IntPtr ISteamNetworking, ulong steamIDRemote, int nChannel);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(IntPtr ISteamNetworking, uint nIP, ushort nPort, int nTimeoutSec);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(IntPtr ISteamNetworking, int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(IntPtr ISteamNetworking, ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(IntPtr ISteamNetworking, uint hSocket, bool bNotifyRemoteEnd);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(IntPtr ISteamNetworking, uint hSocket, bool bNotifyRemoteEnd);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(IntPtr ISteamNetworking, uint hListenSocket, out uint pnIP, out ushort pnPort);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(IntPtr ISteamNetworking, uint hSocket);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(IntPtr ISteamNetworking, ulong steamIDRemote, ref P2PSessionState_t pConnectionState);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(IntPtr ISteamNetworking, uint hSocket);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(IntPtr ISteamNetworking, uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(IntPtr ISteamNetworking, uint hListenSocket, out uint pcubMsgSize, ref uint phSocket);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(IntPtr ISteamNetworking, uint hSocket, out uint pcubMsgSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(IntPtr ISteamNetworking, out uint pcubMsgSize, int nChannel);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(IntPtr ISteamNetworking, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(IntPtr ISteamNetworking, uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubData, uint cubData, bool bReliable);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(IntPtr ISteamNetworking, ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(IntPtr ISteamParentalSettings, uint nAppID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(IntPtr ISteamParentalSettings, uint nAppID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(IntPtr ISteamParentalSettings);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(IntPtr ISteamParentalSettings);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(IntPtr ISteamRemoteStorage, ulong updateHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(IntPtr ISteamRemoteStorage, WorkshopFileAction eAction, uint unStartIndex);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(IntPtr ISteamRemoteStorage, WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(IntPtr ISteamRemoteStorage, ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubDataToRead);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(IntPtr ISteamRemoteStorage, string pchFile, uint nOffset, uint cubToRead);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(IntPtr ISteamRemoteStorage, ulong hReadCall, IntPtr pvBuffer, uint cubToRead);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, uint cubData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(IntPtr ISteamRemoteStorage, ulong writeHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(IntPtr ISteamRemoteStorage, ulong writeHandle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(IntPtr ISteamRemoteStorage, ulong writeHandle, IntPtr pvData, int cubData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(IntPtr ISteamRemoteStorage);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(IntPtr ISteamRemoteStorage, int iCachedContent);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(IntPtr ISteamRemoteStorage);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(IntPtr ISteamRemoteStorage, int iFile, out int pnFileSizeInBytes);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, uint unMaxSecondsOld);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(IntPtr ISteamRemoteStorage, out ulong pnTotalBytes, out ulong puAvailableBytes);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(IntPtr ISteamRemoteStorage, ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(IntPtr ISteamRemoteStorage, ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(IntPtr ISteamRemoteStorage);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(IntPtr ISteamRemoteStorage);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(IntPtr ISteamRemoteStorage, WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(IntPtr ISteamRemoteStorage, string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(IntPtr ISteamRemoteStorage, bool bEnabled);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, WorkshopFileAction eAction);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(IntPtr ISteamRemoteStorage, ulong hContent, uint unPriority);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(IntPtr ISteamRemoteStorage, ulong hContent, string pchLocation, uint unPriority);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(IntPtr ISteamRemoteStorage, ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchDescription);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchFile);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchPreviewFile);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchChangeDescription);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(IntPtr ISteamRemoteStorage, ulong updateHandle, ref SteamParamStringArray_t pTags);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchTitle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(IntPtr ISteamRemoteStorage, ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, bool bVoteUp);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(IntPtr ISteamScreenshots, string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(IntPtr ISteamScreenshots, VRScreenshotType eType, string pchFilename, string pchVRFilename);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(IntPtr ISteamScreenshots, bool bHook);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(IntPtr ISteamScreenshots);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(IntPtr ISteamScreenshots, uint hScreenshot, string pchLocation);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(IntPtr ISteamScreenshots, uint hScreenshot, ulong unPublishedFileID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_TagUser(IntPtr ISteamScreenshots, uint hScreenshot, ulong steamID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(IntPtr ISteamScreenshots);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(IntPtr ISteamScreenshots, IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(IntPtr ISteamUGC, ulong handle, string pchKey, string pchValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(IntPtr ISteamUGC, ulong handle, string pszPreviewFile, ItemPreviewType type);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(IntPtr ISteamUGC, ulong handle, string pszVideoID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(IntPtr ISteamUGC, ulong handle, string pKey, string pValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(IntPtr ISteamUGC, uint unWorkshopDepotID, string pszFolder);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(IntPtr ISteamUGC, uint nConsumerAppId, WorkshopFileType eFileType);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(IntPtr ISteamUGC, UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(IntPtr ISteamUGC, uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_DownloadItem(IntPtr ISteamUGC, ulong nPublishedFileID, bool bHighPriority);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetItemState(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(IntPtr ISteamUGC, ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(IntPtr ISteamUGC, ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(IntPtr ISteamUGC, ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(IntPtr ISteamUGC, ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchURL, uint cchURLSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(IntPtr ISteamUGC, ulong handle, uint index, ref SteamUGCDetails_t pDetails);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(IntPtr ISteamUGC, ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint cMaxEntries);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(IntPtr ISteamUGC, ulong handle, string pchKey);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(IntPtr ISteamUGC, ulong nPublishedFileID, uint unMaxAgeSeconds);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(IntPtr ISteamUGC, ulong handle, uint unMaxAgeSeconds);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(IntPtr ISteamUGC, ulong handle, string pMatchCloudFileName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemContent(IntPtr ISteamUGC, ulong handle, string pszContentFolder);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(IntPtr ISteamUGC, ulong handle, string pchDescription);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(IntPtr ISteamUGC, ulong handle, string pchMetaData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(IntPtr ISteamUGC, ulong handle, string pszPreviewFile);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTags(IntPtr ISteamUGC, ulong updateHandle, ref SteamParamStringArray_t pTags);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(IntPtr ISteamUGC, ulong handle, string pchTitle);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(IntPtr ISteamUGC, ulong handle, RemoteStoragePublishedFileVisibility eVisibility);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(IntPtr ISteamUGC, ulong handle, bool bMatchAnyTag);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(IntPtr ISteamUGC, ulong handle, uint unDays);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(IntPtr ISteamUGC, ulong handle, bool bReturnAdditionalPreviews);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(IntPtr ISteamUGC, ulong handle, bool bReturnChildren);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(IntPtr ISteamUGC, ulong handle, bool bReturnKeyValueTags);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(IntPtr ISteamUGC, ulong handle, bool bReturnLongDescription);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(IntPtr ISteamUGC, ulong handle, bool bReturnMetadata);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(IntPtr ISteamUGC, ulong handle, bool bReturnOnlyIDs);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(IntPtr ISteamUGC, ulong handle, uint unDays);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(IntPtr ISteamUGC, ulong handle, bool bReturnTotalOnly);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetSearchText(IntPtr ISteamUGC, ulong handle, string pSearchText);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID, bool bVoteUp);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(IntPtr ISteamUGC, uint nConsumerAppId, ulong nPublishedFileID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(IntPtr ISteamUGC);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(IntPtr ISteamUGC, ulong handle, string pchChangeNote);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(IntPtr ISteamUGC, bool bSuspend);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(IntPtr ISteamUGC, ulong handle, uint index, string pszPreviewFile);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(IntPtr ISteamUGC, ulong handle, uint index, string pszVideoID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_AdvertiseGame(IntPtr ISteamUser, ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(IntPtr ISteamUser, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(IntPtr ISteamUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(IntPtr ISteamUser, uint hAuthTicket);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(IntPtr ISteamUser, IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_EndAuthSession(IntPtr ISteamUser, ulong steamID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(IntPtr ISteamUser, out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(IntPtr ISteamUser, int nSeries, bool bFoil);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(IntPtr ISteamUser, StringBuilder pchBuffer, int cubBuffer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(IntPtr ISteamUser, bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(IntPtr ISteamUser, IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(IntPtr ISteamUser, IntPtr pDataToInclude, int cbDataToInclude);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(IntPtr ISteamUser, string pchRedirectURL);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(IntPtr ISteamUser, uint unIPServer, ushort usPortServer);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(IntPtr ISteamUser, ulong gameID, int eAppUsageEvent, string pchExtraInfo);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(IntPtr ISteamUser, ulong steamID, uint appID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(IntPtr ISteamUserStats, ulong hSteamLeaderboard, ulong hUGC);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(IntPtr ISteamUserStats, string pchName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(IntPtr ISteamUserStats, ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(IntPtr ISteamUserStats, string pchName, ref bool pbAchieved);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(IntPtr ISteamUserStats, string pchName, out float pflPercent);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(IntPtr ISteamUserStats, string pchName, ref bool pbAchieved, out uint punUnlockTime);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(IntPtr ISteamUserStats, string pchName, string pchKey);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(IntPtr ISteamUserStats, string pchName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(IntPtr ISteamUserStats, uint iAchievement);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(IntPtr ISteamUserStats, ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(IntPtr ISteamUserStats, string pchStatName, out long pData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(IntPtr ISteamUserStats, string pchStatName, out double pData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(IntPtr ISteamUserStats, string pchStatName, out long pData, uint cubData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(IntPtr ISteamUserStats, string pchStatName, out double pData, uint cubData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr ISteamUserStats, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(IntPtr ISteamUserStats, int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(IntPtr ISteamUserStats);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(IntPtr ISteamUserStats);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat(IntPtr ISteamUserStats, string pchName, out int pData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat0(IntPtr ISteamUserStats, string pchName, out float pData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, ref bool pbAchieved);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, ref bool pbAchieved, out uint punUnlockTime);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out int pData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out float pData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(IntPtr ISteamUserStats, string pchName, uint nCurProgress, uint nMaxProgress);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(IntPtr ISteamUserStats);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(IntPtr ISteamUserStats);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(IntPtr ISteamUserStats, int nHistoryDays);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(IntPtr ISteamUserStats, ulong steamIDUser);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(IntPtr ISteamUserStats, bool bAchievementsToo);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(IntPtr ISteamUserStats, string pchName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat(IntPtr ISteamUserStats, string pchName, int nData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat0(IntPtr ISteamUserStats, string pchName, float fData);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(IntPtr ISteamUserStats, string pchName, float flCountThisSession, double dSessionLength);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(IntPtr ISteamUtils, string szFileName);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(IntPtr ISteamUtils, ulong hSteamAPICall);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(IntPtr ISteamUtils, ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, ref bool pbFailed);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(IntPtr ISteamUtils, out uint unIP, out ushort usPort);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(IntPtr ISteamUtils, StringBuilder pchText, uint cchText);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(IntPtr ISteamUtils, int iImage, IntPtr pubDest, int nDestBufferSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetImageSize(IntPtr ISteamUtils, int iImage, out uint pnWidth, out uint pnHeight);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(IntPtr ISteamUtils, ulong hSteamAPICall, ref bool pbFailed);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(IntPtr ISteamUtils, int nHorizontalInset, int nVerticalInset);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(IntPtr ISteamUtils, NotificationPosition eNotificationPosition);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(IntPtr ISteamUtils, bool bEnabled);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(IntPtr ISteamUtils, IntPtr pFunction);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(IntPtr ISteamUtils, GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(IntPtr ISteamVideo, uint unVideoAppID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(IntPtr ISteamVideo, uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamVideo_GetVideoURL(IntPtr ISteamVideo, uint unVideoAppID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(IntPtr ISteamVideo, IntPtr pnNumViewers);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RunCallbacks();

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_Shutdown();

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamGameServer_GetHSteamUser();

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamGameServer_RunCallbacks();

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamGameServer_Shutdown();

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamInternal_CreateInterface(string version);

				[DllImport("steam_api.dll", CallingConvention=CallingConvention.Cdecl, CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString);
			}
		}

		internal class Win64 : Platform.Interface, IDisposable
		{
			internal IntPtr _ptr;

			public bool IsValid
			{
				get
				{
					return this._ptr != IntPtr.Zero;
				}
			}

			internal Win64(IntPtr pointer)
			{
				this._ptr = pointer;
			}

			public virtual void Dispose()
			{
				this._ptr = IntPtr.Zero;
			}

			public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID);
			}

			public virtual int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
			}

			public virtual int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
			}

			public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
			}

			public virtual uint ISteamAppList_GetNumInstalledApps()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr);
			}

			public virtual bool ISteamApps_BGetDLCDataByIndex(int iDLC, ref uint pAppID, ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
			}

			public virtual bool ISteamApps_BIsAppInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsCybercafe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr);
			}

			public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsLowViolence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr);
			}

			public virtual bool ISteamApps_BIsSubscribed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr);
			}

			public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID);
			}

			public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr);
			}

			public virtual bool ISteamApps_BIsVACBanned()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr);
			}

			public virtual int ISteamApps_GetAppBuildId()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr);
			}

			public virtual uint ISteamApps_GetAppInstallDir(uint appID, StringBuilder pchFolder, uint cchFolderBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
			}

			public virtual CSteamID ISteamApps_GetAppOwner()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr);
			}

			public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr);
			}

			public virtual bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
			}

			public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr);
			}

			public virtual int ISteamApps_GetDLCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr);
			}

			public virtual bool ISteamApps_GetDlcDownloadProgress(uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal);
			}

			public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID);
			}

			public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName);
			}

			public virtual uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
			}

			public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey);
			}

			public virtual void ISteamApps_InstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
			}

			public virtual bool ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly);
			}

			public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
			}

			public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
			}

			public virtual void ISteamApps_UninstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
			}

			public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe);
			}

			public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr);
			}

			public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe);
			}

			public virtual HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType);
			}

			public virtual HSteamPipe ISteamClient_CreateSteamPipe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr);
			}

			public virtual uint ISteamClient_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr);
			}

			public virtual IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGameServerStats(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamGenericInterface(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamParentalSettings(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamParentalSettings(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
			}

			public virtual IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
			}

			public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
			}

			public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
			}

			public virtual void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
			}

			public virtual void ISteamController_ActivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_ActivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			public virtual void ISteamController_DeactivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_DeactivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			public virtual void ISteamController_DeactivateAllActionSetLayers(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_DeactivateAllActionSetLayers(this._ptr, controllerHandle);
			}

			public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName);
			}

			public virtual int ISteamController_GetActiveActionSetLayers(ulong controllerHandle, IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetActiveActionSetLayers(this._ptr, controllerHandle, handlesOut);
			}

			public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ulong controllerHandle, ulong analogActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
			}

			public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName);
			}

			public virtual int ISteamController_GetAnalogActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
			}

			public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut);
			}

			public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex);
			}

			public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle);
			}

			public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ulong controllerHandle, ulong digitalActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
			}

			public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName);
			}

			public virtual int ISteamController_GetDigitalActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
			}

			public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle);
			}

			public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin);
			}

			public virtual SteamInputType ISteamController_GetInputTypeForHandle(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetInputTypeForHandle(this._ptr, controllerHandle);
			}

			public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle);
			}

			public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin);
			}

			public virtual bool ISteamController_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_Init(this._ptr);
			}

			public virtual void ISteamController_RunFrame()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
			}

			public virtual void ISteamController_SetLEDColor(ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
			}

			public virtual bool ISteamController_ShowAnalogActionOrigins(ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
			}

			public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle);
			}

			public virtual bool ISteamController_ShowDigitalActionOrigins(ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
			}

			public virtual bool ISteamController_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_Shutdown(this._ptr);
			}

			public virtual void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
			}

			public virtual void ISteamController_TriggerHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
			}

			public virtual void ISteamController_TriggerRepeatedHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
			}

			public virtual void ISteamController_TriggerVibration(ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
			}

			public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
			}

			public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
			}

			public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
			}

			public virtual void ISteamFriends_ClearRichPresence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
			}

			public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(IntPtr psteamIDClans, int cClansToRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
			}

			public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex);
			}

			public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
			}

			public virtual bool ISteamFriends_GetClanActivityCounts(ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting);
			}

			public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan);
			}

			public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan);
			}

			public virtual int ISteamFriends_GetClanChatMessage(ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
			}

			public virtual int ISteamFriends_GetClanCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr);
			}

			public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
			}

			public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan);
			}

			public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan);
			}

			public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend);
			}

			public virtual int ISteamFriends_GetCoplayFriendCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr);
			}

			public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID);
			}

			public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
			}

			public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags);
			}

			public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource);
			}

			public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
			}

			public virtual bool ISteamFriends_GetFriendGamePlayed(ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref pFriendGameInfo);
			}

			public virtual int ISteamFriends_GetFriendMessage(ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
			}

			public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
			}

			public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend);
			}

			public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
			}

			public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
			}

			public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetFriendsGroupCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr);
			}

			public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG);
			}

			public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID);
			}

			public virtual void ISteamFriends_GetFriendsGroupMembersList(short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
			}

			public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID);
			}

			public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual IntPtr ISteamFriends_GetPersonaName()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr);
			}

			public virtual PersonaState ISteamFriends_GetPersonaState()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr);
			}

			public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer);
			}

			public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend);
			}

			public virtual uint ISteamFriends_GetUserRestrictions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr);
			}

			public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
			}

			public virtual bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
			}

			public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
			}

			public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat);
			}

			public virtual bool ISteamFriends_IsClanOfficialGameGroup(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_IsClanOfficialGameGroup(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_IsClanPublic(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_IsClanPublic(this._ptr, steamIDClan);
			}

			public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID);
			}

			public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
			}

			public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan);
			}

			public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			public virtual bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
			}

			public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan);
			}

			public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
			}

			public virtual bool ISteamFriends_RequestUserInformation(ulong steamIDUser, bool bRequireNameOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
			}

			public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
			}

			public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, bool bSpeaking)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
			}

			public virtual bool ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled);
			}

			public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName);
			}

			public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
			}

			public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
			}

			public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan);
			}

			public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			public virtual bool ISteamGameServer_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr);
			}

			public virtual bool ISteamGameServer_BSecure()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr);
			}

			public virtual bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
			}

			public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			public virtual void ISteamGameServer_ClearAllKeyValues()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
			}

			public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer);
			}

			public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr);
			}

			public virtual void ISteamGameServer_EnableHeartbeats(bool bActive)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
			}

			public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
			}

			public virtual void ISteamGameServer_ForceHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
			}

			public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual void ISteamGameServer_GetGameplayStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
			}

			public virtual int ISteamGameServer_GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
			}

			public virtual uint ISteamGameServer_GetPublicIP()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr);
			}

			public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr);
			}

			public virtual CSteamID ISteamGameServer_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr);
			}

			public virtual bool ISteamGameServer_HandleIncomingPacket(IntPtr pData, int cbData, uint srcIP, ushort srcPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
			}

			public virtual bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
			}

			public virtual void ISteamGameServer_LogOff()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
			}

			public virtual void ISteamGameServer_LogOn(string pszToken)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
			}

			public virtual void ISteamGameServer_LogOnAnonymous()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
			}

			public virtual bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
			}

			public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
			}

			public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
			}

			public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
			}

			public virtual void ISteamGameServer_SetDedicatedServer(bool bDedicated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
			}

			public virtual void ISteamGameServer_SetGameData(string pchGameData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
			}

			public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
			}

			public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
			}

			public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
			}

			public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
			}

			public virtual void ISteamGameServer_SetMapName(string pszMapName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
			}

			public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
			}

			public virtual void ISteamGameServer_SetModDir(string pszModDir)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
			}

			public virtual void ISteamGameServer_SetPasswordProtected(bool bPasswordProtected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
			}

			public virtual void ISteamGameServer_SetProduct(string pszProduct)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
			}

			public virtual void ISteamGameServer_SetRegion(string pszRegion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
			}

			public virtual void ISteamGameServer_SetServerName(string pszServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
			}

			public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
			}

			public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
			}

			public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			public virtual bool ISteamGameServer_WasRestartRequested()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr);
			}

			public virtual bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
			}

			public virtual bool ISteamGameServerStats_GetUserAchievement(ulong steamIDUser, string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			public virtual bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
			}

			public virtual bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
			}

			public virtual bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
			}

			public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
			}

			public virtual void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
			}

			public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, bool bAllowed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
			}

			public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
			}

			public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
			}

			public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
			}

			public virtual void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
			}

			public virtual void ISteamHTMLSurface_Find(uint unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
			}

			public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
			}

			public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
			}

			public virtual bool ISteamHTMLSurface_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr);
			}

			public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, bool bResult)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
			}

			public virtual void ISteamHTMLSurface_KeyChar(uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_KeyDown(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_KeyUp(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			public virtual void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
			}

			public virtual void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
			}

			public virtual void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
			}

			public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
			}

			public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle, bool bBackgroundMode)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
			}

			public virtual void ISteamHTMLSurface_SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, bool bSecure, bool bHTTPOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
			}

			public virtual void ISteamHTMLSurface_SetDPIScalingFactor(uint unBrowserHandle, float flDPIScaling)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(this._ptr, unBrowserHandle, flDPIScaling);
			}

			public virtual void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, bool bHasKeyFocus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
			}

			public virtual void ISteamHTMLSurface_SetPageScaleFactor(uint unBrowserHandle, float flZoom, int nPointX, int nPointY)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
			}

			public virtual void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
			}

			public virtual void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			public virtual bool ISteamHTMLSurface_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr);
			}

			public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
			}

			public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
			}

			public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify);
			}

			public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
			}

			public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut);
			}

			public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, ref bool pbWasTimedOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseBodyData(uint hRequest, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(uint hRequest, string pchHeaderName, out uint unResponseHeaderSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
			}

			public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
			}

			public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer);
			}

			public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest);
			}

			public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
			}

			public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
			}

			public virtual bool ISteamHTTP_SetCookie(uint hCookieContainer, string pchHost, string pchUrl, string pchCookie)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(uint hRequest, string pchParamName, string pchParamValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(uint hRequest, string pchHeaderName, string pchHeaderValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(uint hRequest, bool bRequireVerifiedCertificate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
			}

			public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
			}

			public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
			}

			public virtual bool ISteamInventory_AddPromoItems(ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
			}

			public virtual bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
			}

			public virtual bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
			}

			public virtual bool ISteamInventory_DeserializeResult(ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
			}

			public virtual void ISteamInventory_DestroyResult(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
			}

			public virtual bool ISteamInventory_ExchangeItems(ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
			}

			public virtual bool ISteamInventory_GenerateItems(ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle);
			}

			public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
			}

			public virtual bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize);
			}

			public virtual bool ISteamInventory_GetItemDefinitionProperty(int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			public virtual bool ISteamInventory_GetItemPrice(int iDefinition, out ulong pPrice)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetItemPrice(this._ptr, iDefinition, out pPrice);
			}

			public virtual bool ISteamInventory_GetItemsByID(ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
			}

			public virtual bool ISteamInventory_GetItemsWithPrices(IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetItemsWithPrices(this._ptr, pArrayItemDefs, pPrices, unArrayLength);
			}

			public virtual uint ISteamInventory_GetNumItemsWithPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetNumItemsWithPrices(this._ptr);
			}

			public virtual bool ISteamInventory_GetResultItemProperty(int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			public virtual bool ISteamInventory_GetResultItems(int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
			}

			public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle);
			}

			public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle);
			}

			public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle);
			}

			public virtual bool ISteamInventory_LoadItemDefinitions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr);
			}

			public virtual bool ISteamInventory_RemoveProperty(ulong handle, ulong nItemID, string pchPropertyName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_RemoveProperty(this._ptr, handle, nItemID, pchPropertyName);
			}

			public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID);
			}

			public virtual SteamAPICall_t ISteamInventory_RequestPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_RequestPrices(this._ptr);
			}

			public virtual void ISteamInventory_SendItemDropHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
			}

			public virtual bool ISteamInventory_SerializeResult(int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
			}

			public virtual bool ISteamInventory_SetProperty(ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_SetProperty(this._ptr, handle, nItemID, pchPropertyName, pchPropertyValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, bValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, long nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, nValue);
			}

			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, flValue);
			}

			public virtual SteamAPICall_t ISteamInventory_StartPurchase(int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_StartPurchase(this._ptr, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			public virtual SteamInventoryUpdateHandle_t ISteamInventory_StartUpdateProperties()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_StartUpdateProperties(this._ptr);
			}

			public virtual bool ISteamInventory_SubmitUpdateProperties(ulong handle, ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_SubmitUpdateProperties(this._ptr, handle, ref pResultHandle);
			}

			public virtual bool ISteamInventory_TradeItems(ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
			}

			public virtual bool ISteamInventory_TransferItemQuantity(ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
			}

			public virtual bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
			}

			public virtual int ISteamMatchmaking_AddFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
			}

			public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
			}

			public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			public virtual bool ISteamMatchmaking_GetFavoriteGame(int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
			}

			public virtual int ISteamMatchmaking_GetFavoriteGameCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby);
			}

			public virtual int ISteamMatchmaking_GetLobbyChatEntry(ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
			}

			public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
			}

			public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_GetLobbyGameServer(ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
			}

			public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(ulong steamIDLobby, ulong steamIDUser, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
			}

			public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby);
			}

			public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby);
			}

			public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby);
			}

			public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
			}

			public virtual bool ISteamMatchmaking_RemoveFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
			}

			public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby);
			}

			public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr);
			}

			public virtual bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
			}

			public virtual bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
			}

			public virtual bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			public virtual void ISteamMatchmaking_SetLobbyGameServer(ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
			}

			public virtual bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, bool bLobbyJoinable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
			}

			public virtual void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
			}

			public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
			}

			public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
			}

			public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
			}

			public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
			}

			public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest);
			}

			public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
			}

			public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest);
			}

			public virtual HServerQuery ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
			}

			public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
			}

			public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(uint iApp, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
			}

			public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			public virtual HServerQuery ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			public virtual bool ISteamMusic_BIsEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr);
			}

			public virtual bool ISteamMusic_BIsPlaying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr);
			}

			public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr);
			}

			public virtual float ISteamMusic_GetVolume()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr);
			}

			public virtual void ISteamMusic_Pause()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
			}

			public virtual void ISteamMusic_Play()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMusic_Play(this._ptr);
			}

			public virtual void ISteamMusic_PlayNext()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
			}

			public virtual void ISteamMusic_PlayPrevious()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
			}

			public virtual void ISteamMusic_SetVolume(float flVolume)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
			}

			public virtual bool ISteamMusicRemote_BActivationSuccess(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable);
			}

			public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr);
			}

			public virtual bool ISteamMusicRemote_EnableLooped(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlaylists(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlayNext(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnablePlayPrevious(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnableQueue(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_EnableShuffled(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_PlaylistDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_PlaylistWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_QueueDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_QueueWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr);
			}

			public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName);
			}

			public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr);
			}

			public virtual bool ISteamMusicRemote_ResetQueueEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr);
			}

			public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID);
			}

			public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID);
			}

			public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName);
			}

			public virtual bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
			}

			public virtual bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue);
			}

			public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText);
			}

			public virtual bool ISteamMusicRemote_UpdateLooped(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus);
			}

			public virtual bool ISteamMusicRemote_UpdateShuffled(bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue);
			}

			public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue);
			}

			public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			public virtual bool ISteamNetworking_AllowP2PPacketRelay(bool bAllow)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow);
			}

			public virtual bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
			}

			public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
			}

			public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
			}

			public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
			}

			public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			public virtual bool ISteamNetworking_DestroySocket(uint hSocket, bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			public virtual bool ISteamNetworking_GetListenSocketInfo(uint hListenSocket, out uint pnIP, out ushort pnPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort);
			}

			public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket);
			}

			public virtual bool ISteamNetworking_GetP2PSessionState(ulong steamIDRemote, ref P2PSessionState_t pConnectionState)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref pConnectionState);
			}

			public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket);
			}

			public virtual bool ISteamNetworking_GetSocketInfo(uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
			}

			public virtual bool ISteamNetworking_IsDataAvailable(uint hListenSocket, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
			}

			public virtual bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize);
			}

			public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel);
			}

			public virtual bool ISteamNetworking_ReadP2PPacket(IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
			}

			public virtual bool ISteamNetworking_RetrieveData(uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
			}

			public virtual bool ISteamNetworking_RetrieveDataFromSocket(uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
			}

			public virtual bool ISteamNetworking_SendDataOnSocket(uint hSocket, IntPtr pubData, uint cubData, bool bReliable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
			}

			public virtual bool ISteamNetworking_SendP2PPacket(ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
			}

			public virtual bool ISteamParentalSettings_BIsAppBlocked(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamParentalSettings_BIsAppBlocked(this._ptr, nAppID);
			}

			public virtual bool ISteamParentalSettings_BIsAppInBlockList(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamParentalSettings_BIsAppInBlockList(this._ptr, nAppID);
			}

			public virtual bool ISteamParentalSettings_BIsFeatureBlocked(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(this._ptr, eFeature);
			}

			public virtual bool ISteamParentalSettings_BIsFeatureInBlockList(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(this._ptr, eFeature);
			}

			public virtual bool ISteamParentalSettings_BIsParentalLockEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(this._ptr);
			}

			public virtual bool ISteamParentalSettings_BIsParentalLockLocked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(this._ptr);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle);
			}

			public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(WorkshopFileAction eAction, uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref pTags, ref pUserTags);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref pRequiredTags, ref pExcludedTags);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex);
			}

			public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile);
			}

			public virtual int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(string pchFile, uint nOffset, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
			}

			public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(ulong hReadCall, IntPtr pvBuffer, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(string pchFile, IntPtr pvData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle);
			}

			public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(ulong writeHandle, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
			}

			public virtual int ISteamRemoteStorage_GetCachedUGCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr);
			}

			public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent);
			}

			public virtual int ISteamRemoteStorage_GetFileCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr);
			}

			public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes);
			}

			public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile);
			}

			public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(ulong unPublishedFileId, uint unMaxSecondsOld)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes);
			}

			public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile);
			}

			public virtual bool ISteamRemoteStorage_GetUGCDetails(ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
			}

			public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr);
			}

			public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags, eWorkshopFileType);
			}

			public virtual void ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
			}

			public virtual bool ISteamRemoteStorage_SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(ulong unPublishedFileId, WorkshopFileAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(ulong hContent, string pchLocation, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
			}

			public virtual int ISteamRemoteStorage_UGCRead(ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(ulong updateHandle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ulong updateHandle, string pchPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ulong updateHandle, string pchChangeDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref pTags);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
			}

			public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
			}

			public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(ulong unPublishedFileId, bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
			}

			public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
			}

			public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
			}

			public virtual void ISteamScreenshots_HookScreenshots(bool bHook)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
			}

			public virtual bool ISteamScreenshots_IsScreenshotsHooked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr);
			}

			public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
			}

			public virtual bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
			}

			public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
			}

			public virtual void ISteamScreenshots_TriggerScreenshot()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
			}

			public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
			}

			public virtual SteamAPICall_t ISteamUGC_AddAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			public virtual SteamAPICall_t ISteamUGC_AddDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
			}

			public virtual bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
			}

			public virtual bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
			}

			public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
			}

			public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			public virtual bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
			}

			public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
			}

			public virtual bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
			}

			public virtual SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
			}

			public virtual SteamAPICall_t ISteamUGC_DeleteItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_DeleteItem(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, bool bHighPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
			}

			public virtual SteamAPICall_t ISteamUGC_GetAppDependencies(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetAppDependencies(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_GetItemDownloadInfo(ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal);
			}

			public virtual bool ISteamUGC_GetItemInstallInfo(ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
			}

			public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID);
			}

			public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal);
			}

			public virtual uint ISteamUGC_GetNumSubscribedItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr);
			}

			public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
			}

			public virtual bool ISteamUGC_GetQueryUGCChildren(ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
			}

			public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
			}

			public virtual bool ISteamUGC_GetQueryUGCMetadata(ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
			}

			public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
			}

			public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
			}

			public virtual bool ISteamUGC_GetQueryUGCPreviewURL(ulong handle, uint index, StringBuilder pchURL, uint cchURLSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
			}

			public virtual bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref pDetails);
			}

			public virtual bool ISteamUGC_GetQueryUGCStatistic(ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
			}

			public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
			}

			public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_RemoveAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
			}

			public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
			}

			public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
			}

			public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle);
			}

			public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
			}

			public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
			}

			public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
			}

			public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
			}

			public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
			}

			public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
			}

			public virtual bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref pTags);
			}

			public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
			}

			public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
			}

			public virtual bool ISteamUGC_SetItemVisibility(ulong handle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
			}

			public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
			}

			public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, bool bMatchAnyTag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
			}

			public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
			}

			public virtual bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle, bool bReturnAdditionalPreviews)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
			}

			public virtual bool ISteamUGC_SetReturnChildren(ulong handle, bool bReturnChildren)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
			}

			public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, bool bReturnKeyValueTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
			}

			public virtual bool ISteamUGC_SetReturnLongDescription(ulong handle, bool bReturnLongDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
			}

			public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, bool bReturnMetadata)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
			}

			public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, bool bReturnOnlyIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
			}

			public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
			}

			public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, bool bReturnTotalOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
			}

			public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
			}

			public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
			}

			public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
			}

			public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
			}

			public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID);
			}

			public virtual void ISteamUGC_SuspendDownloads(bool bSuspend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
			}

			public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID);
			}

			public virtual bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
			}

			public virtual bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
			}

			public virtual void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
			}

			public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			public virtual bool ISteamUser_BIsBehindNAT()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneIdentifying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneRequiringVerification()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr);
			}

			public virtual bool ISteamUser_BIsPhoneVerified()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr);
			}

			public virtual bool ISteamUser_BIsTwoFactorEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr);
			}

			public virtual bool ISteamUser_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr);
			}

			public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			public virtual VoiceResult ISteamUser_DecompressVoice(IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
			}

			public virtual void ISteamUser_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
			}

			public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual VoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			public virtual bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
			}

			public virtual HSteamUser ISteamUser_GetHSteamUser()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr);
			}

			public virtual int ISteamUser_GetPlayerSteamLevel()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr);
			}

			public virtual CSteamID ISteamUser_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr);
			}

			public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
			}

			public virtual VoiceResult ISteamUser_GetVoice(bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr);
			}

			public virtual int ISteamUser_InitiateGameConnection(IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
			}

			public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
			}

			public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL);
			}

			public virtual void ISteamUser_StartVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
			}

			public virtual void ISteamUser_StopVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
			}

			public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
			}

			public virtual void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
			}

			public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
			}

			public virtual bool ISteamUserStats_ClearAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName);
			}

			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
			}

			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
			}

			public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName);
			}

			public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
			}

			public virtual bool ISteamUserStats_GetAchievement(string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
			}

			public virtual bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent);
			}

			public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(string pchName, ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
			}

			public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
			}

			public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName);
			}

			public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement);
			}

			public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref pLeaderboardEntry, pDetails, cDetailsMax);
			}

			public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData);
			}

			public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData);
			}

			public virtual int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
			}

			public virtual int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
			}

			public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard);
			}

			public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard);
			}

			public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard);
			}

			public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard);
			}

			public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			public virtual uint ISteamUserStats_GetNumAchievements()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr);
			}

			public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetUserAchievement(ulong steamIDUser, string pchName, ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(ulong steamIDUser, string pchName, ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
			}

			public virtual bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			public virtual bool ISteamUserStats_IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
			}

			public virtual bool ISteamUserStats_RequestCurrentStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays);
			}

			public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser);
			}

			public virtual bool ISteamUserStats_ResetAllStats(bool bAchievementsToo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo);
			}

			public virtual bool ISteamUserStats_SetAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName);
			}

			public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
			}

			public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
			}

			public virtual bool ISteamUserStats_StoreStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr);
			}

			public virtual bool ISteamUserStats_UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
			}

			public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
			}

			public virtual bool ISteamUtils_BOverlayNeedsPresent()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr);
			}

			public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName);
			}

			public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall);
			}

			public virtual bool ISteamUtils_GetAPICallResult(ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
			}

			public virtual uint ISteamUtils_GetAppID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr);
			}

			public virtual Universe ISteamUtils_GetConnectedUniverse()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr);
			}

			public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort);
			}

			public virtual byte ISteamUtils_GetCurrentBatteryPower()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr);
			}

			public virtual bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
			}

			public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr);
			}

			public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
			}

			public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight);
			}

			public virtual uint ISteamUtils_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr);
			}

			public virtual IntPtr ISteamUtils_GetIPCountry()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr);
			}

			public virtual uint ISteamUtils_GetSecondsSinceAppActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr);
			}

			public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr);
			}

			public virtual uint ISteamUtils_GetServerRealTime()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr);
			}

			public virtual IntPtr ISteamUtils_GetSteamUILanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr);
			}

			public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
			}

			public virtual bool ISteamUtils_IsOverlayEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr);
			}

			public virtual bool ISteamUtils_IsSteamInBigPictureMode()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr);
			}

			public virtual bool ISteamUtils_IsSteamRunningInVR()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr);
			}

			public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr);
			}

			public virtual void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
			}

			public virtual void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
			}

			public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled(bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
			}

			public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
			}

			public virtual bool ISteamUtils_ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
			}

			public virtual void ISteamUtils_StartVRDashboard()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
			}

			public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
			}

			public virtual bool ISteamVideo_GetOPFStringForApp(uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
			}

			public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
			}

			public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers);
			}

			public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
			{
				return Platform.Win64.Native.SteamAPI_GetHSteamPipe();
			}

			public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
			{
				return Platform.Win64.Native.SteamAPI_GetHSteamUser();
			}

			public virtual bool SteamApi_SteamAPI_Init()
			{
				return Platform.Win64.Native.SteamAPI_Init();
			}

			public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
			{
				Platform.Win64.Native.SteamAPI_RegisterCallback(pCallback, callback);
			}

			public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Win64.Native.SteamAPI_RegisterCallResult(pCallback, callback);
			}

			public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
			{
				return Platform.Win64.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
			}

			public virtual void SteamApi_SteamAPI_RunCallbacks()
			{
				Platform.Win64.Native.SteamAPI_RunCallbacks();
			}

			public virtual void SteamApi_SteamAPI_Shutdown()
			{
				Platform.Win64.Native.SteamAPI_Shutdown();
			}

			public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
			{
				Platform.Win64.Native.SteamAPI_UnregisterCallback(pCallback);
			}

			public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Win64.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
			}

			public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
			{
				return Platform.Win64.Native.SteamGameServer_GetHSteamPipe();
			}

			public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
			{
				return Platform.Win64.Native.SteamGameServer_GetHSteamUser();
			}

			public virtual void SteamApi_SteamGameServer_RunCallbacks()
			{
				Platform.Win64.Native.SteamGameServer_RunCallbacks();
			}

			public virtual void SteamApi_SteamGameServer_Shutdown()
			{
				Platform.Win64.Native.SteamGameServer_Shutdown();
			}

			public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
			{
				return Platform.Win64.Native.SteamInternal_CreateInterface(version);
			}

			public virtual bool SteamApi_SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString)
			{
				return Platform.Win64.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
			}

			internal static class Native
			{
				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_GetHSteamUser();

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_Init();

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(IntPtr ISteamAppList, uint nAppID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(IntPtr ISteamAppList, uint nAppID, StringBuilder pchDirectory, int cchNameMax);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamAppList_GetAppName(IntPtr ISteamAppList, uint nAppID, StringBuilder pchName, int cchNameMax);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(IntPtr ISteamAppList, IntPtr pvecAppID, uint unMaxAppIDs);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(IntPtr ISteamApps, int iDLC, ref uint pAppID, ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(IntPtr ISteamApps, uint appID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(IntPtr ISteamApps, uint appID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(IntPtr ISteamApps, uint appID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(IntPtr ISteamApps);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(IntPtr ISteamApps, uint appID, StringBuilder pchFolder, uint cchFolderBufferSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(IntPtr ISteamApps);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(IntPtr ISteamApps, StringBuilder pchName, int cchNameBufferSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(IntPtr ISteamApps, uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(IntPtr ISteamApps, uint nAppID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(IntPtr ISteamApps, string pszFileName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(IntPtr ISteamApps, uint appID, IntPtr pvecDepots, uint cMaxDepots);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(IntPtr ISteamApps, string pchKey);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(IntPtr ISteamApps, bool bMissingFilesOnly);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(IntPtr ISteamApps);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(IntPtr ISteamApps, uint nAppID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(IntPtr ISteamClient, int hSteamPipe);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(IntPtr ISteamClient);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(IntPtr ISteamClient, int hSteamPipe);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(IntPtr ISteamClient, out int phSteamPipe, AccountType eAccountType);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamParentalSettings(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(IntPtr ISteamClient, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_ReleaseUser(IntPtr ISteamClient, int hSteamPipe, int hUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(IntPtr ISteamClient, uint unIP, ushort usPort);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(IntPtr ISteamClient, IntPtr pFunction);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_ActivateActionSet(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_ActivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_DeactivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_DeactivateAllActionSetLayers(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(IntPtr ISteamController, string pszActionSetName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetActiveActionSetLayers(IntPtr ISteamController, ulong controllerHandle, IntPtr handlesOut);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(IntPtr ISteamController, string pszActionName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetConnectedControllers(IntPtr ISteamController, IntPtr handlesOut);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(IntPtr ISteamController, int nIndex);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(IntPtr ISteamController, string pszActionName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(IntPtr ISteamController, ulong ulControllerHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_SetLEDColor(IntPtr ISteamController, ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(IntPtr ISteamController, ulong controllerHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(IntPtr ISteamController, ulong controllerHandle, ulong eAction);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamController_TriggerVibration(IntPtr ISteamController, ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(IntPtr ISteamFriends, string pchDialog);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(IntPtr ISteamFriends, ulong steamIDLobby);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(IntPtr ISteamFriends, uint nAppID, OverlayToStoreFlag eFlag);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(IntPtr ISteamFriends, string pchDialog, ulong steamID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(IntPtr ISteamFriends, string pchURL);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(IntPtr ISteamFriends, IntPtr psteamIDClans, int cClansToRequest);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(IntPtr ISteamFriends, uint unStartIndex);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(IntPtr ISteamFriends, ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(IntPtr ISteamFriends, int iClan);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iOfficer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(IntPtr ISteamFriends, int iCoplayFriend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(IntPtr ISteamFriends, ulong steamID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(IntPtr ISteamFriends, int iFriend, int iFriendFlags);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCount(IntPtr ISteamFriends, int iFriendFlags);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(IntPtr ISteamFriends, ulong steamIDSource);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(IntPtr ISteamFriends, ulong steamIDSource, int iFriend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(IntPtr ISteamFriends, ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(IntPtr ISteamFriends, ulong steamIDFriend, int iPersonaName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend, string pchKey);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(IntPtr ISteamFriends, ulong steamIDFriend, int iKey);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(IntPtr ISteamFriends, int iFG);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(IntPtr ISteamFriends, short friendsGroupID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(IntPtr ISteamFriends, short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(IntPtr ISteamFriends, short friendsGroupID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(IntPtr ISteamFriends);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(IntPtr ISteamFriends, ulong steamIDPlayer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_HasFriend(IntPtr ISteamFriends, ulong steamIDFriend, int iFriendFlags);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(IntPtr ISteamFriends, ulong steamIDFriend, string pchConnectString);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(IntPtr ISteamFriends, ulong steamIDClanChat, ulong steamIDUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanPublic(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(IntPtr ISteamFriends, ulong steamID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(IntPtr ISteamFriends, ulong steamIDUser, ulong steamIDSource);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, string pchMsgToSend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(IntPtr ISteamFriends, ulong steamIDClan);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(IntPtr ISteamFriends, ulong steamIDUser, bool bRequireNameOnly);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, string pchText);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(IntPtr ISteamFriends, ulong steamIDUser, bool bSpeaking);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(IntPtr ISteamFriends, bool bInterceptEnabled);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(IntPtr ISteamFriends, string pchPersonaName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(IntPtr ISteamFriends, ulong steamIDUserPlayedWith);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(IntPtr ISteamFriends, string pchKey, string pchValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(IntPtr ISteamGameServer, ulong steamIDClan);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(IntPtr ISteamGameServer, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(IntPtr ISteamGameServer, ulong steamIDUser, string pchPlayerName, uint uScore);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(IntPtr ISteamGameServer, uint hAuthTicket);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(IntPtr ISteamGameServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(IntPtr ISteamGameServer, ulong steamIDNewPlayer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(IntPtr ISteamGameServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(IntPtr ISteamGameServer, bool bActive);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(IntPtr ISteamGameServer, ulong steamID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(IntPtr ISteamGameServer, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(IntPtr ISteamGameServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(IntPtr ISteamGameServer, IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(IntPtr ISteamGameServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(IntPtr ISteamGameServer, IntPtr pData, int cbData, uint srcIP, ushort srcPort);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(IntPtr ISteamGameServer, uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOn(IntPtr ISteamGameServer, string pszToken);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(IntPtr ISteamGameServer, ulong steamIDUser, ulong steamIDGroup);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(IntPtr ISteamGameServer, uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(IntPtr ISteamGameServer, ulong steamIDUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(IntPtr ISteamGameServer, int cBotplayers);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(IntPtr ISteamGameServer, bool bDedicated);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameData(IntPtr ISteamGameServer, string pchGameData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(IntPtr ISteamGameServer, string pszGameDescription);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameTags(IntPtr ISteamGameServer, string pchGameTags);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(IntPtr ISteamGameServer, int iHeartbeatInterval);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(IntPtr ISteamGameServer, string pKey, string pValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetMapName(IntPtr ISteamGameServer, string pszMapName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(IntPtr ISteamGameServer, int cPlayersMax);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetModDir(IntPtr ISteamGameServer, string pszModDir);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(IntPtr ISteamGameServer, bool bPasswordProtected);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetProduct(IntPtr ISteamGameServer, string pszProduct);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetRegion(IntPtr ISteamGameServer, string pszRegion);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetServerName(IntPtr ISteamGameServer, string pszServerName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(IntPtr ISteamGameServer, ushort unSpectatorPort);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(IntPtr ISteamGameServer, string pszSpectatorServerName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(IntPtr ISteamGameServer, ulong steamID, uint appID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(IntPtr ISteamGameServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, ref bool pbAchieved);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out int pData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out float pData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, int nData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float fData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchKey, string pchValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bAllowed);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(IntPtr ISteamHTMLSurface, string pchUserAgent, string pchUserCSS);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(IntPtr ISteamHTMLSurface);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchScript);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_Find(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bResult);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchURL, string pchPostData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int nDelta);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_Reload(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bBackgroundMode);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(IntPtr ISteamHTMLSurface, string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, bool bSecure, bool bHTTPOnly);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flDPIScaling);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(IntPtr ISteamHTMLSurface, uint unBrowserHandle, bool bHasKeyFocus);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flZoom, int nPointX, int nPointY);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint unWidth, uint unHeight);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(IntPtr ISteamHTTP, bool bAllowResponsesToModify);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(IntPtr ISteamHTTP, HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(IntPtr ISteamHTTP, uint hRequest, out float pflPercentOut);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(IntPtr ISteamHTTP, uint hRequest, ref bool pbWasTimedOut);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(IntPtr ISteamHTTP, uint hRequest, out byte pBodyDataBuffer, uint unBufferSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(IntPtr ISteamHTTP, uint hRequest, out uint unBodySize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out uint unResponseHeaderSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(IntPtr ISteamHTTP, uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(IntPtr ISteamHTTP, uint hCookieContainer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetCookie(IntPtr ISteamHTTP, uint hCookieContainer, string pchHost, string pchUrl, string pchCookie);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(IntPtr ISteamHTTP, uint hRequest, uint unMilliseconds);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(IntPtr ISteamHTTP, uint hRequest, ulong ulContextValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(IntPtr ISteamHTTP, uint hRequest, uint hCookieContainer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(IntPtr ISteamHTTP, uint hRequest, string pchParamName, string pchParamValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, string pchHeaderValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(IntPtr ISteamHTTP, uint hRequest, uint unTimeoutSeconds);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(IntPtr ISteamHTTP, uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(IntPtr ISteamHTTP, uint hRequest, bool bRequireVerifiedCertificate);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(IntPtr ISteamHTTP, uint hRequest, string pchUserAgentInfo);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(IntPtr ISteamInventory, ref int pResultHandle, int itemDef);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(IntPtr ISteamInventory, int resultHandle, ulong steamIDExpected);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(IntPtr ISteamInventory, ref int pResultHandle, ulong itemConsume, uint unQuantity);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(IntPtr ISteamInventory, ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamInventory_DestroyResult(IntPtr ISteamInventory, int resultHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GenerateItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetAllItems(IntPtr ISteamInventory, ref int pResultHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(IntPtr ISteamInventory, ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(IntPtr ISteamInventory, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(IntPtr ISteamInventory, int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemPrice(IntPtr ISteamInventory, int iDefinition, out ulong pPrice);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(IntPtr ISteamInventory, ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsWithPrices(IntPtr ISteamInventory, IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamInventory_GetNumItemsWithPrices(IntPtr ISteamInventory);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(IntPtr ISteamInventory, int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItems(IntPtr ISteamInventory, int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(IntPtr ISteamInventory, int resultHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(IntPtr ISteamInventory, int resultHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(IntPtr ISteamInventory, ref int pResultHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(IntPtr ISteamInventory);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_RemoveProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(IntPtr ISteamInventory, ulong steamID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(IntPtr ISteamInventory);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(IntPtr ISteamInventory);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SerializeResult(IntPtr ISteamInventory, int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, bool bValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, long nValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, float flValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(IntPtr ISteamInventory, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(IntPtr ISteamInventory);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_SubmitUpdateProperties(IntPtr ISteamInventory, ulong handle, ref int pResultHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TradeItems(IntPtr ISteamInventory, ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(IntPtr ISteamInventory, ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(IntPtr ISteamInventory, ref int pResultHandle, int dropListDefinition);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(IntPtr ISteamMatchmaking, LobbyDistanceFilter eLobbyDistanceFilter);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(IntPtr ISteamMatchmaking, int nSlotsAvailable);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToBeCloseTo);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(IntPtr ISteamMatchmaking, int cMaxResults);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(IntPtr ISteamMatchmaking, LobbyType eLobbyType, int cMaxMembers);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(IntPtr ISteamMatchmaking, int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(IntPtr ISteamMatchmaking);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(IntPtr ISteamMatchmaking, int iLobby);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iMember);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDUser, string pchKey);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDInvitee);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(IntPtr ISteamMatchmaking);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(IntPtr ISteamMatchmaking, ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDLobbyDependent);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(IntPtr ISteamMatchmaking, ulong steamIDLobby, bool bLobbyJoinable);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby, int cMaxMembers);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDNewOwner);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(IntPtr ISteamMatchmaking, ulong steamIDLobby, LobbyType eLobbyType);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(IntPtr ISteamMatchmakingServers, int hServerQuery);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(IntPtr ISteamMatchmakingServers, IntPtr hServerListRequest);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr pRequestServersResponse);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(IntPtr ISteamMusic);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamMusic_SetVolume(IntPtr ISteamMusic, float flVolume);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(IntPtr ISteamMusicRemote);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(IntPtr ISteamMusicRemote);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(IntPtr ISteamMusicRemote, bool bAvailable);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(IntPtr ISteamMusicRemote);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(IntPtr ISteamMusicRemote);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(IntPtr ISteamMusicRemote);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(IntPtr ISteamMusicRemote);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(IntPtr ISteamMusicRemote);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(IntPtr ISteamMusicRemote);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(IntPtr ISteamMusicRemote, string pchName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(IntPtr ISteamMusicRemote);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(IntPtr ISteamMusicRemote);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(IntPtr ISteamMusicRemote, int nID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(IntPtr ISteamMusicRemote, int nID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(IntPtr ISteamMusicRemote, string pchDisplayName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(IntPtr ISteamMusicRemote, int nValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(IntPtr ISteamMusicRemote, string pchText);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(IntPtr ISteamMusicRemote, AudioPlayback_Status nStatus);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(IntPtr ISteamMusicRemote, bool bValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(IntPtr ISteamMusicRemote, float flValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(IntPtr ISteamNetworking, bool bAllow);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(IntPtr ISteamNetworking, ulong steamIDRemote, int nChannel);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(IntPtr ISteamNetworking, uint nIP, ushort nPort, int nTimeoutSec);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(IntPtr ISteamNetworking, int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(IntPtr ISteamNetworking, ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(IntPtr ISteamNetworking, uint hSocket, bool bNotifyRemoteEnd);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(IntPtr ISteamNetworking, uint hSocket, bool bNotifyRemoteEnd);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(IntPtr ISteamNetworking, uint hListenSocket, out uint pnIP, out ushort pnPort);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(IntPtr ISteamNetworking, uint hSocket);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(IntPtr ISteamNetworking, ulong steamIDRemote, ref P2PSessionState_t pConnectionState);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(IntPtr ISteamNetworking, uint hSocket);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(IntPtr ISteamNetworking, uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(IntPtr ISteamNetworking, uint hListenSocket, out uint pcubMsgSize, ref uint phSocket);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(IntPtr ISteamNetworking, uint hSocket, out uint pcubMsgSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(IntPtr ISteamNetworking, out uint pcubMsgSize, int nChannel);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(IntPtr ISteamNetworking, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(IntPtr ISteamNetworking, uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubData, uint cubData, bool bReliable);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(IntPtr ISteamNetworking, ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(IntPtr ISteamParentalSettings, uint nAppID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(IntPtr ISteamParentalSettings, uint nAppID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(IntPtr ISteamParentalSettings);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(IntPtr ISteamParentalSettings);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(IntPtr ISteamRemoteStorage, ulong updateHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(IntPtr ISteamRemoteStorage, WorkshopFileAction eAction, uint unStartIndex);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(IntPtr ISteamRemoteStorage, WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(IntPtr ISteamRemoteStorage, ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubDataToRead);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(IntPtr ISteamRemoteStorage, string pchFile, uint nOffset, uint cubToRead);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(IntPtr ISteamRemoteStorage, ulong hReadCall, IntPtr pvBuffer, uint cubToRead);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, uint cubData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(IntPtr ISteamRemoteStorage, ulong writeHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(IntPtr ISteamRemoteStorage, ulong writeHandle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(IntPtr ISteamRemoteStorage, ulong writeHandle, IntPtr pvData, int cubData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(IntPtr ISteamRemoteStorage);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(IntPtr ISteamRemoteStorage, int iCachedContent);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(IntPtr ISteamRemoteStorage);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(IntPtr ISteamRemoteStorage, int iFile, out int pnFileSizeInBytes);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, uint unMaxSecondsOld);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(IntPtr ISteamRemoteStorage, out ulong pnTotalBytes, out ulong puAvailableBytes);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(IntPtr ISteamRemoteStorage, ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(IntPtr ISteamRemoteStorage, ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(IntPtr ISteamRemoteStorage);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(IntPtr ISteamRemoteStorage);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(IntPtr ISteamRemoteStorage, WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(IntPtr ISteamRemoteStorage, string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(IntPtr ISteamRemoteStorage, bool bEnabled);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, WorkshopFileAction eAction);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(IntPtr ISteamRemoteStorage, ulong hContent, uint unPriority);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(IntPtr ISteamRemoteStorage, ulong hContent, string pchLocation, uint unPriority);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(IntPtr ISteamRemoteStorage, ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchDescription);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchFile);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchPreviewFile);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchChangeDescription);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(IntPtr ISteamRemoteStorage, ulong updateHandle, ref SteamParamStringArray_t pTags);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchTitle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(IntPtr ISteamRemoteStorage, ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, bool bVoteUp);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(IntPtr ISteamScreenshots, string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(IntPtr ISteamScreenshots, VRScreenshotType eType, string pchFilename, string pchVRFilename);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(IntPtr ISteamScreenshots, bool bHook);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(IntPtr ISteamScreenshots);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(IntPtr ISteamScreenshots, uint hScreenshot, string pchLocation);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(IntPtr ISteamScreenshots, uint hScreenshot, ulong unPublishedFileID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamScreenshots_TagUser(IntPtr ISteamScreenshots, uint hScreenshot, ulong steamID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(IntPtr ISteamScreenshots);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(IntPtr ISteamScreenshots, IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(IntPtr ISteamUGC, ulong handle, string pchKey, string pchValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(IntPtr ISteamUGC, ulong handle, string pszPreviewFile, ItemPreviewType type);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(IntPtr ISteamUGC, ulong handle, string pszVideoID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(IntPtr ISteamUGC, ulong handle, string pKey, string pValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(IntPtr ISteamUGC, uint unWorkshopDepotID, string pszFolder);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(IntPtr ISteamUGC, uint nConsumerAppId, WorkshopFileType eFileType);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(IntPtr ISteamUGC, UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(IntPtr ISteamUGC, uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_DownloadItem(IntPtr ISteamUGC, ulong nPublishedFileID, bool bHighPriority);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetItemState(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(IntPtr ISteamUGC, ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(IntPtr ISteamUGC, ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(IntPtr ISteamUGC, ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(IntPtr ISteamUGC, ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchURL, uint cchURLSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(IntPtr ISteamUGC, ulong handle, uint index, ref SteamUGCDetails_t pDetails);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(IntPtr ISteamUGC, ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint cMaxEntries);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(IntPtr ISteamUGC, ulong handle, string pchKey);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(IntPtr ISteamUGC, ulong handle, uint index);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(IntPtr ISteamUGC, ulong nPublishedFileID, uint unMaxAgeSeconds);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(IntPtr ISteamUGC, ulong handle, uint unMaxAgeSeconds);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(IntPtr ISteamUGC, ulong handle, string pMatchCloudFileName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemContent(IntPtr ISteamUGC, ulong handle, string pszContentFolder);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(IntPtr ISteamUGC, ulong handle, string pchDescription);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(IntPtr ISteamUGC, ulong handle, string pchMetaData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(IntPtr ISteamUGC, ulong handle, string pszPreviewFile);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTags(IntPtr ISteamUGC, ulong updateHandle, ref SteamParamStringArray_t pTags);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(IntPtr ISteamUGC, ulong handle, string pchTitle);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(IntPtr ISteamUGC, ulong handle, RemoteStoragePublishedFileVisibility eVisibility);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(IntPtr ISteamUGC, ulong handle, bool bMatchAnyTag);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(IntPtr ISteamUGC, ulong handle, uint unDays);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(IntPtr ISteamUGC, ulong handle, bool bReturnAdditionalPreviews);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(IntPtr ISteamUGC, ulong handle, bool bReturnChildren);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(IntPtr ISteamUGC, ulong handle, bool bReturnKeyValueTags);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(IntPtr ISteamUGC, ulong handle, bool bReturnLongDescription);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(IntPtr ISteamUGC, ulong handle, bool bReturnMetadata);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(IntPtr ISteamUGC, ulong handle, bool bReturnOnlyIDs);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(IntPtr ISteamUGC, ulong handle, uint unDays);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(IntPtr ISteamUGC, ulong handle, bool bReturnTotalOnly);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_SetSearchText(IntPtr ISteamUGC, ulong handle, string pSearchText);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID, bool bVoteUp);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(IntPtr ISteamUGC, uint nConsumerAppId, ulong nPublishedFileID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(IntPtr ISteamUGC);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(IntPtr ISteamUGC, ulong handle, string pchChangeNote);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(IntPtr ISteamUGC, bool bSuspend);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(IntPtr ISteamUGC, ulong handle, uint index, string pszPreviewFile);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(IntPtr ISteamUGC, ulong handle, uint index, string pszVideoID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_AdvertiseGame(IntPtr ISteamUser, ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(IntPtr ISteamUser, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(IntPtr ISteamUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(IntPtr ISteamUser, uint hAuthTicket);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(IntPtr ISteamUser, IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_EndAuthSession(IntPtr ISteamUser, ulong steamID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(IntPtr ISteamUser, out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(IntPtr ISteamUser, int nSeries, bool bFoil);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(IntPtr ISteamUser, StringBuilder pchBuffer, int cubBuffer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(IntPtr ISteamUser, bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(IntPtr ISteamUser, IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(IntPtr ISteamUser, IntPtr pDataToInclude, int cbDataToInclude);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(IntPtr ISteamUser, string pchRedirectURL);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(IntPtr ISteamUser, uint unIPServer, ushort usPortServer);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(IntPtr ISteamUser, ulong gameID, int eAppUsageEvent, string pchExtraInfo);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(IntPtr ISteamUser, ulong steamID, uint appID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(IntPtr ISteamUserStats, ulong hSteamLeaderboard, ulong hUGC);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(IntPtr ISteamUserStats, string pchName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(IntPtr ISteamUserStats, ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(IntPtr ISteamUserStats, string pchName, ref bool pbAchieved);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(IntPtr ISteamUserStats, string pchName, out float pflPercent);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(IntPtr ISteamUserStats, string pchName, ref bool pbAchieved, out uint punUnlockTime);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(IntPtr ISteamUserStats, string pchName, string pchKey);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(IntPtr ISteamUserStats, string pchName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(IntPtr ISteamUserStats, uint iAchievement);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(IntPtr ISteamUserStats, ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(IntPtr ISteamUserStats, string pchStatName, out long pData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(IntPtr ISteamUserStats, string pchStatName, out double pData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(IntPtr ISteamUserStats, string pchStatName, out long pData, uint cubData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(IntPtr ISteamUserStats, string pchStatName, out double pData, uint cubData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr ISteamUserStats, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(IntPtr ISteamUserStats, int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, ref bool pbAchieved);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(IntPtr ISteamUserStats);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(IntPtr ISteamUserStats);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat(IntPtr ISteamUserStats, string pchName, out int pData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat0(IntPtr ISteamUserStats, string pchName, out float pData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, ref bool pbAchieved);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, ref bool pbAchieved, out uint punUnlockTime);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out int pData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out float pData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(IntPtr ISteamUserStats, string pchName, uint nCurProgress, uint nMaxProgress);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(IntPtr ISteamUserStats);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(IntPtr ISteamUserStats);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(IntPtr ISteamUserStats, int nHistoryDays);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(IntPtr ISteamUserStats, ulong steamIDUser);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(IntPtr ISteamUserStats, bool bAchievementsToo);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(IntPtr ISteamUserStats, string pchName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat(IntPtr ISteamUserStats, string pchName, int nData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat0(IntPtr ISteamUserStats, string pchName, float fData);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(IntPtr ISteamUserStats, string pchName, float flCountThisSession, double dSessionLength);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(IntPtr ISteamUtils, string szFileName);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(IntPtr ISteamUtils, ulong hSteamAPICall);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(IntPtr ISteamUtils, ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, ref bool pbFailed);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(IntPtr ISteamUtils, out uint unIP, out ushort usPort);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(IntPtr ISteamUtils, StringBuilder pchText, uint cchText);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(IntPtr ISteamUtils, int iImage, IntPtr pubDest, int nDestBufferSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_GetImageSize(IntPtr ISteamUtils, int iImage, out uint pnWidth, out uint pnHeight);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(IntPtr ISteamUtils, ulong hSteamAPICall, ref bool pbFailed);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(IntPtr ISteamUtils, int nHorizontalInset, int nVerticalInset);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(IntPtr ISteamUtils, NotificationPosition eNotificationPosition);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(IntPtr ISteamUtils, bool bEnabled);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(IntPtr ISteamUtils, IntPtr pFunction);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(IntPtr ISteamUtils, GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(IntPtr ISteamVideo, uint unVideoAppID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(IntPtr ISteamVideo, uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_ISteamVideo_GetVideoURL(IntPtr ISteamVideo, uint unVideoAppID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(IntPtr ISteamVideo, IntPtr pnNumViewers);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_RunCallbacks();

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_Shutdown();

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern HSteamUser SteamGameServer_GetHSteamUser();

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamGameServer_RunCallbacks();

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern void SteamGameServer_Shutdown();

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern IntPtr SteamInternal_CreateInterface(string version);

				[DllImport("steam_api64.dll", CharSet=CharSet.None, ExactSpelling=false)]
				internal static extern bool SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString);
			}
		}
	}
}
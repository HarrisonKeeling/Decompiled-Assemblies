using System;
using System.Text;

public class CRC
{
	private static byte[] byteBuffer;

	private readonly static uint[] crc32_tab;

	private readonly static ulong[] crc64_tab;

	static CRC()
	{
		CRC.byteBuffer = new byte[1024];
		CRC.crc32_tab = new uint[] { 0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117 };
		CRC.crc64_tab = new ulong[] { 0L, 8851949072701294969L, 17703898145402589938L, 10333669153493130123L, 13851072938616403599L, 13465927519055396854L, 3857338458010461309L, 5715195658523061508L, 12333367839138578037L, 15127763206205961996L, 6816212484437830791L, 2612226237385041406L, 7714676916020922618L, 1281407202545942915L, 11430391317046123016L, 16463076249205199729L, 9009731685717012353L, 563108230357313272L, 9851657908567506291L, 17465080730062222346L, 13632424968875661582L, 14404880506683019383L, 5224452474770082812L, 3627802401766982277L, 15429353832041845236L, 12463821128841762957L, 2562814405091885830L, 6433535930597116543L, 1592294032496338811L, 7836410910743637506L, 16404387395731993993L, 11056451039949864176L, 18019463371434024706L, 9280105458721969787L, 1126216460714626544L, 8464919223366468745L, 4190910634541279629L, 4679640014836523252L, 14959263154764675967L, 13060872525739979270L, 5852729821509460343L, 3161916214005835790L, 11856275032257016709L, 16019730051968187132L, 10448904949540165624L, 16994763621833383553L, 7255604803533964554L, 2191395843288271987L, 9734813498046853251L, 18285020776702097914L, 8262382231073956465L, 608425843627928328L, 5125628810183771660L, 4465764294926438261L, 12867071861194233086L, 14432195567501024647L, 3184588064992677622L, 6262709589572306831L, 15672821821487275012L, 11770576130456212861L, 17008134862606432377L, 10867599606483677440L, 1853769023980628619L, 7161174014982448114L, 16103423924954344815L, 11935289383220651030L, 3083341959784644509L, 5769757520242456292L, 2252432921429253088L, 7321251034957484697L, 16929838446732937490L, 10388307452745547883L, 8381821269082559258L, 1047727658635319907L, 9359280029673046504L, 18102965619612993681L, 13000435797616977301L, 14894146905688698092L, 4745161141923116903L, 4252033715651608094L, 11705459643018920686L, 15612384854998895511L, 6323832428011671580L, 3250108949404244325L, 7082685524280996961L, 1770671381070249240L, 10951102161764411027L, 17087309740654948330L, 674072313427442843L, 8323419547594995170L, 18224423522563763817L, 9669888565606754064L, 14511209607067929108L, 12950765422787986285L, 4382791686576543974L, 5047054248884015519L, 2696289253709771373L, 6895947823530343188L, 15049839570318909599L, 12250835051042597350L, 16524764462147912930L, 11496477575961038235L, 1216851687255856656L, 7654800921679748969L, 10251257620367543320L, 17625884659327141217L, 8931528589852876522L, 84259039178430355L, 5655163293556783767L, 3792978414742418414L, 13532134484260726885L, 13912670750543257884L, 6369176129985355244L, 2502782282785952917L, 12525419179144613662L, 15495561035627234919L, 10978437246791527267L, 16321975555527844378L, 7920669638525335953L, 1671873238255513832L, 17531166746306175897L, 9913345878835194592L, 503231997654823275L, 8945175932061546514L, 3707538047961257238L, 5308515798192249967L, 14322348029964896228L, 13554501644362141341L, 10785157014839085493L, 17254666630495879372L, 6925536469308201799L, 1928669229005230654L, 6166683919569289018L, 3408106242218915395L, 11539515040484912584L, 15779741191858611377L, 4504865842858506176L, 4925828954283753145L, 14642502069914969394L, 12820884771576065099L, 18355716529793696079L, 9540007361421969462L, 796147016248169405L, 8202193697865996996L, 16763642538165118516L, 10555343349626187597L, 2095455317270639814L, 7479631577382337983L, 2926364910754730171L, 5928137516128508354L, 15937228569359352393L, 12102324735718361904L, 4867406749023426625L, 4131191115536978232L, 13131477498808912563L, 14763945261529023434L, 9490322283846233806L, 17972763431062038455L, 8504067431303216188L, 926884511990314309L, 8051711962477172407L, 1541670979892322254L, 11100683476643087429L, 16201132341218348348L, 12647664856023343160L, 15374718365700663617L, 6500217898808488650L, 2372580570961558451L, 14165371048561993922L, 13712881572587659707L, 3541342762140498480L, 5475551080882205513L, 337036156713721421L, 9112211761281881908L, 17374189211922025663L, 10071726351451997638L, 1348144626854885686L, 7524919785159454799L, 16646839095189990340L, 11375251796044276413L, 15171913658969673657L, 12129609824107054784L, 2827581646778391883L, 6766067242130363442L, 13374985906044110659L, 14070668113165684282L, 5489218623395763633L, 3960334819262667976L, 8765583373153087948L, 251615998827411637L, 10094108497768031038L, 17783882574922426951L, 5392578507419542746L, 3462768234654100899L, 13791895647060686376L, 14249064643987996497L, 10011129131143811669L, 17309264314385947436L, 9177858264896848039L, 398073508124084702L, 16284634862666717871L, 11179858319785628630L, 1463182455377365085L, 7968614284679676196L, 2433703374511713312L, 6565738749404456281L, 15309601843359497938L, 12587227855704700843L, 4025855981238586203L, 5550341738321543714L, 14010231419946703273L, 13309869690798280912L, 17863057179705753044L, 10177610780853122221L, 168518078356860710L, 8687094605961012831L, 11310326587113567534L, 16586241563491499095L, 7585956829484836828L, 1413790823389195941L, 6687492953022055329L, 2744609311697881816L, 12213303662187237715L, 15250927976100943914L, 12738352259970710488L, 14564578711588090529L, 5005564565571905834L, 4588929132448424019L, 8142317431333358935L, 731591227688682542L, 9606093343850471333L, 18417404465172059868L, 2012927990619293101L, 7005115709973351636L, 17176652871151048543L, 10702745209522052646L, 15841339277050671906L, 11605722277885901403L, 3343746476511027664L, 6106651831093618857L, 14830152191845028953L, 13193075276920315168L, 4071158715666679467L, 4803046671925235666L, 1006463995309646550L, 8588326435575524271L, 17890351864123093028L, 9412308762883553629L, 7415076095922514476L, 2035579357833339733L, 10617031596384499934L, 16829728831969243559L, 12024401134718426275L, 15854695815076877786L, 6012200567359213137L, 3006100283679606568L };
	}

	public CRC()
	{
	}

	public static uint Compute32(uint crc, int i)
	{
		Union32 union32 = new Union32()
		{
			i = i
		};
		CRC.byteBuffer[0] = union32.b1;
		CRC.byteBuffer[1] = union32.b2;
		CRC.byteBuffer[2] = union32.b3;
		CRC.byteBuffer[3] = union32.b4;
		return CRC.CRC32(crc, CRC.byteBuffer, (ulong)4);
	}

	public static uint Compute32(uint crc, uint u)
	{
		Union32 union32 = new Union32()
		{
			u = u
		};
		CRC.byteBuffer[0] = union32.b1;
		CRC.byteBuffer[1] = union32.b2;
		CRC.byteBuffer[2] = union32.b3;
		CRC.byteBuffer[3] = union32.b4;
		return CRC.CRC32(crc, CRC.byteBuffer, (ulong)4);
	}

	public static uint Compute32(uint crc, float f)
	{
		Union32 union32 = new Union32()
		{
			f = f
		};
		CRC.byteBuffer[0] = union32.b1;
		CRC.byteBuffer[1] = union32.b2;
		CRC.byteBuffer[2] = union32.b3;
		CRC.byteBuffer[3] = union32.b4;
		return CRC.CRC32(crc, CRC.byteBuffer, (ulong)4);
	}

	public static uint Compute32(uint crc, long i)
	{
		Union64 union64 = new Union64()
		{
			i = i
		};
		CRC.byteBuffer[0] = union64.b1;
		CRC.byteBuffer[1] = union64.b2;
		CRC.byteBuffer[2] = union64.b3;
		CRC.byteBuffer[3] = union64.b4;
		CRC.byteBuffer[4] = union64.b5;
		CRC.byteBuffer[5] = union64.b6;
		CRC.byteBuffer[6] = union64.b7;
		CRC.byteBuffer[7] = union64.b8;
		return CRC.CRC32(crc, CRC.byteBuffer, (ulong)8);
	}

	public static uint Compute32(uint crc, ulong u)
	{
		Union64 union64 = new Union64()
		{
			u = u
		};
		CRC.byteBuffer[0] = union64.b1;
		CRC.byteBuffer[1] = union64.b2;
		CRC.byteBuffer[2] = union64.b3;
		CRC.byteBuffer[3] = union64.b4;
		CRC.byteBuffer[4] = union64.b5;
		CRC.byteBuffer[5] = union64.b6;
		CRC.byteBuffer[6] = union64.b7;
		CRC.byteBuffer[7] = union64.b8;
		return CRC.CRC32(crc, CRC.byteBuffer, (ulong)8);
	}

	public static uint Compute32(uint crc, double f)
	{
		Union64 union64 = new Union64()
		{
			f = f
		};
		CRC.byteBuffer[0] = union64.b1;
		CRC.byteBuffer[1] = union64.b2;
		CRC.byteBuffer[2] = union64.b3;
		CRC.byteBuffer[3] = union64.b4;
		CRC.byteBuffer[4] = union64.b5;
		CRC.byteBuffer[5] = union64.b6;
		CRC.byteBuffer[6] = union64.b7;
		CRC.byteBuffer[7] = union64.b8;
		return CRC.CRC32(crc, CRC.byteBuffer, (ulong)8);
	}

	public static uint Compute32(uint crc, string str)
	{
		int num = CRC.GrowByteBuffer(Encoding.UTF8.GetByteCount(str));
		Encoding.UTF8.GetBytes(str, 0, str.Length, CRC.byteBuffer, 0);
		return CRC.CRC32(crc, CRC.byteBuffer, (ulong)num);
	}

	public static uint Compute32(string[] strs)
	{
		uint num = 0;
		for (int i = 0; i < (int)strs.Length; i++)
		{
			int num1 = CRC.GrowByteBuffer(Encoding.UTF8.GetByteCount(strs[i]));
			Encoding.UTF8.GetBytes(strs[i], 0, strs[i].Length, CRC.byteBuffer, 0);
			num = CRC.CRC32(num, CRC.byteBuffer, (ulong)num1);
		}
		return num;
	}

	public static ulong Compute64(ulong crc, int i)
	{
		Union32 union32 = new Union32()
		{
			i = i
		};
		CRC.byteBuffer[0] = union32.b1;
		CRC.byteBuffer[1] = union32.b2;
		CRC.byteBuffer[2] = union32.b3;
		CRC.byteBuffer[3] = union32.b4;
		return CRC.CRC64(crc, CRC.byteBuffer, (ulong)4);
	}

	public static ulong Compute64(ulong crc, uint u)
	{
		Union32 union32 = new Union32()
		{
			u = u
		};
		CRC.byteBuffer[0] = union32.b1;
		CRC.byteBuffer[1] = union32.b2;
		CRC.byteBuffer[2] = union32.b3;
		CRC.byteBuffer[3] = union32.b4;
		return CRC.CRC64(crc, CRC.byteBuffer, (ulong)4);
	}

	public static ulong Compute64(ulong crc, float f)
	{
		Union32 union32 = new Union32()
		{
			f = f
		};
		CRC.byteBuffer[0] = union32.b1;
		CRC.byteBuffer[1] = union32.b2;
		CRC.byteBuffer[2] = union32.b3;
		CRC.byteBuffer[3] = union32.b4;
		return CRC.CRC64(crc, CRC.byteBuffer, (ulong)4);
	}

	public static ulong Compute64(ulong crc, long i)
	{
		Union64 union64 = new Union64()
		{
			i = i
		};
		CRC.byteBuffer[0] = union64.b1;
		CRC.byteBuffer[1] = union64.b2;
		CRC.byteBuffer[2] = union64.b3;
		CRC.byteBuffer[3] = union64.b4;
		CRC.byteBuffer[4] = union64.b5;
		CRC.byteBuffer[5] = union64.b6;
		CRC.byteBuffer[6] = union64.b7;
		CRC.byteBuffer[7] = union64.b8;
		return CRC.CRC64(crc, CRC.byteBuffer, (ulong)8);
	}

	public static ulong Compute64(ulong crc, ulong u)
	{
		Union64 union64 = new Union64()
		{
			u = u
		};
		CRC.byteBuffer[0] = union64.b1;
		CRC.byteBuffer[1] = union64.b2;
		CRC.byteBuffer[2] = union64.b3;
		CRC.byteBuffer[3] = union64.b4;
		CRC.byteBuffer[4] = union64.b5;
		CRC.byteBuffer[5] = union64.b6;
		CRC.byteBuffer[6] = union64.b7;
		CRC.byteBuffer[7] = union64.b8;
		return CRC.CRC64(crc, CRC.byteBuffer, (ulong)8);
	}

	public static ulong Compute64(ulong crc, double f)
	{
		Union64 union64 = new Union64()
		{
			f = f
		};
		CRC.byteBuffer[0] = union64.b1;
		CRC.byteBuffer[1] = union64.b2;
		CRC.byteBuffer[2] = union64.b3;
		CRC.byteBuffer[3] = union64.b4;
		CRC.byteBuffer[4] = union64.b5;
		CRC.byteBuffer[5] = union64.b6;
		CRC.byteBuffer[6] = union64.b7;
		CRC.byteBuffer[7] = union64.b8;
		return CRC.CRC64(crc, CRC.byteBuffer, (ulong)8);
	}

	public static ulong Compute64(ulong crc, string str)
	{
		int num = CRC.GrowByteBuffer(Encoding.UTF8.GetByteCount(str));
		Encoding.UTF8.GetBytes(str, 0, str.Length, CRC.byteBuffer, 0);
		return CRC.CRC64(crc, CRC.byteBuffer, (ulong)num);
	}

	public static ulong Compute64(string[] strs)
	{
		ulong num = (ulong)0;
		for (int i = 0; i < (int)strs.Length; i++)
		{
			int num1 = CRC.GrowByteBuffer(Encoding.UTF8.GetByteCount(strs[i]));
			Encoding.UTF8.GetBytes(strs[i], 0, strs[i].Length, CRC.byteBuffer, 0);
			num = CRC.CRC64(num, CRC.byteBuffer, (ulong)num1);
		}
		return num;
	}

	private static uint CRC32(uint value, byte[] buf, ulong size)
	{
		uint num = 0;
		uint crc32Tab = value ^ -1;
		while (true)
		{
			ulong num1 = size;
			size = num1 - (long)1;
			if (num1 <= (long)0)
			{
				break;
			}
			uint num2 = num;
			num = num2 + 1;
			crc32Tab = CRC.crc32_tab[(crc32Tab ^ buf[num2]) & 255] ^ crc32Tab >> 8;
		}
		return crc32Tab ^ -1;
	}

	private static ulong CRC64(ulong value, byte[] buf, ulong size)
	{
		uint num = 0;
		ulong crc64Tab = value ^ (long)-1;
		while (true)
		{
			ulong num1 = size;
			size = num1 - (long)1;
			if (num1 <= (long)0)
			{
				break;
			}
			uint num2 = num;
			num = num2 + 1;
			crc64Tab = CRC.crc64_tab[(void*)(checked((IntPtr)((crc64Tab ^ (ulong)buf[num2]) & (long)255)))] ^ crc64Tab >> 8;
		}
		return crc64Tab ^ (long)-1;
	}

	private static int GrowByteBuffer(int count)
	{
		if (count > (int)CRC.byteBuffer.Length)
		{
			CRC.byteBuffer = new byte[count];
		}
		return count;
	}
}